(function() {
/**
 * almond 0.2.6 Copyright (c) 2011-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);

                name = baseParts.concat(name.split("/"));

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    function onResourceLoad(name, defined, deps){
        if(requirejs.onResourceLoad && name){
            requirejs.onResourceLoad({defined:defined}, {id:name}, deps);
        }
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (typeof callback === 'function') {

            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                    hasProp(waiting, depName) ||
                    hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback.apply(defined[name], args);

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                    cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }

        onResourceLoad(name, defined, args);
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        config = cfg;
        if (config.deps) {
            req(config.deps, config.callback);
        }
        return req;
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());
/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * The system module encapsulates the most basic features used by other modules.
 * @module system
 * @requires require
 * @requires jquery
 */
define('durandal/system',['require', 'jquery'], function(require, $) {
    var isDebugging = false,
        nativeKeys = Object.keys,
        hasOwnProperty = Object.prototype.hasOwnProperty,
        toString = Object.prototype.toString,
        system,
        treatAsIE8 = false,
        nativeIsArray = Array.isArray,
        slice = Array.prototype.slice;

    //polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim
    if (!String.prototype.trim) {
        String.prototype.trim = function () {
            return this.replace(/^\s+|\s+$/g, '');
        };
    }

    //see http://patik.com/blog/complete-cross-browser-console-log/
    // Tell IE9 to use its built-in console
    if (Function.prototype.bind && (typeof console === 'object' || typeof console === 'function') && typeof console.log == 'object') {
        try {
            ['log', 'info', 'warn', 'error', 'assert', 'dir', 'clear', 'profile', 'profileEnd']
                .forEach(function(method) {
                    console[method] = this.call(console[method], console);
                }, Function.prototype.bind);
        } catch (ex) {
            treatAsIE8 = true;
        }
    }

    // callback for dojo's loader 
    // note: if you wish to use Durandal with dojo's AMD loader,
    // currently you must fork the dojo source with the following
    // dojo/dojo.js, line 1187, the last line of the finishExec() function: 
    //  (add) signal("moduleLoaded", [module.result, module.mid]);
    // an enhancement request has been submitted to dojo to make this
    // a permanent change. To view the status of this request, visit:
    // http://bugs.dojotoolkit.org/ticket/16727

    if (require.on) {
        require.on("moduleLoaded", function(module, mid) {
            system.setModuleId(module, mid);
        });
    }

    // callback for require.js loader
    if (typeof requirejs !== 'undefined') {
        requirejs.onResourceLoad = function(context, map, depArray) {
            system.setModuleId(context.defined[map.id], map.id);
        };
    }

    var noop = function() { };

    var log = function() {
        try {
            // Modern browsers
            if (typeof console != 'undefined' && typeof console.log == 'function') {
                // Opera 11
                if (window.opera) {
                    var i = 0;
                    while (i < arguments.length) {
                        console.log('Item ' + (i + 1) + ': ' + arguments[i]);
                        i++;
                    }
                }
                // All other modern browsers
                else if ((slice.call(arguments)).length == 1 && typeof slice.call(arguments)[0] == 'string') {
                    console.log((slice.call(arguments)).toString());
                } else {
                    console.log.apply(console, slice.call(arguments));
                }
            }
            // IE8
            else if ((!Function.prototype.bind || treatAsIE8) && typeof console != 'undefined' && typeof console.log == 'object') {
                Function.prototype.call.call(console.log, console, slice.call(arguments));
            }

            // IE7 and lower, and other old browsers
        } catch (ignore) { }
    };

    var logError = function(error, err) {
        var exception;
        
        if(error instanceof Error){
            exception = error;
        } else {
            exception = new Error(error);
        }
        
        exception.innerError = err;
        
        //Report the error as an error, not as a log
        try {
            // Modern browsers (it's only a single item, no need for argument splitting as in log() above)
            if (typeof console != 'undefined' && typeof console.error == 'function') {
                console.error(exception);
            }
            // IE8
            else if ((!Function.prototype.bind || treatAsIE8) && typeof console != 'undefined' && typeof console.error == 'object') {
                Function.prototype.call.call(console.error, console, exception);
            }
            // IE7 and lower, and other old browsers
        } catch (ignore) { }

        throw exception;
    };

    /**
     * @class SystemModule
     * @static
     */
    system = {
        /**
         * Durandal's version.
         * @property {string} version
         */
        version: "2.1.0",
        /**
         * A noop function.
         * @method noop
         */
        noop: noop,
        /**
         * Gets the module id for the specified object.
         * @method getModuleId
         * @param {object} obj The object whose module id you wish to determine.
         * @return {string} The module id.
         */
        getModuleId: function(obj) {
            if (!obj) {
                return null;
            }

            if (typeof obj == 'function' && obj.prototype) {
                return obj.prototype.__moduleId__;
            }

            if (typeof obj == 'string') {
                return null;
            }

            return obj.__moduleId__;
        },
        /**
         * Sets the module id for the specified object.
         * @method setModuleId
         * @param {object} obj The object whose module id you wish to set.
         * @param {string} id The id to set for the specified object.
         */
        setModuleId: function(obj, id) {
            if (!obj) {
                return;
            }

            if (typeof obj == 'function' && obj.prototype) {
                obj.prototype.__moduleId__ = id;
                return;
            }

            if (typeof obj == 'string') {
                return;
            }

            obj.__moduleId__ = id;
        },
        /**
         * Resolves the default object instance for a module. If the module is an object, the module is returned. If the module is a function, that function is called with `new` and it's result is returned.
         * @method resolveObject
         * @param {object} module The module to use to get/create the default object for.
         * @return {object} The default object for the module.
         */
        resolveObject: function(module) {
            if (system.isFunction(module)) {
                return new module();
            } else {
                return module;
            }
        },
        /**
         * Gets/Sets whether or not Durandal is in debug mode.
         * @method debug
         * @param {boolean} [enable] Turns on/off debugging.
         * @return {boolean} Whether or not Durandal is current debugging.
         */
        debug: function(enable) {
            if (arguments.length == 1) {
                isDebugging = enable;
                if (isDebugging) {
                    this.log = log;
                    this.error = logError;
                    this.log('Debug:Enabled');
                } else {
                    this.log('Debug:Disabled');
                    this.log = noop;
                    this.error = noop;
                }
            }

            return isDebugging;
        },
        /**
         * Logs data to the console. Pass any number of parameters to be logged. Log output is not processed if the framework is not running in debug mode.
         * @method log
         * @param {object} info* The objects to log.
         */
        log: noop,
        /**
         * Logs an error.
         * @method error
         * @param {string|Error} obj The error to report.
         */
        error: noop,
        /**
         * Asserts a condition by throwing an error if the condition fails.
         * @method assert
         * @param {boolean} condition The condition to check.
         * @param {string} message The message to report in the error if the condition check fails.
         */
        assert: function (condition, message) {
            if (!condition) {
                system.error(new Error(message || 'Assert:Failed'));
            }
        },
        /**
         * Creates a deferred object which can be used to create a promise. Optionally pass a function action to perform which will be passed an object used in resolving the promise.
         * @method defer
         * @param {function} [action] The action to defer. You will be passed the deferred object as a paramter.
         * @return {Deferred} The deferred object.
         */
        defer: function(action) {
            return $.Deferred(action);
        },
        /**
         * Creates a simple V4 UUID. This should not be used as a PK in your database. It can be used to generate internal, unique ids. For a more robust solution see [node-uuid](https://github.com/broofa/node-uuid).
         * @method guid
         * @return {string} The guid.
         */
        guid: function() {
            var d = new Date().getTime();
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = (d + Math.random() * 16) % 16 | 0;
                d = Math.floor(d/16);
                return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16);
            });
        },
        /**
         * Uses require.js to obtain a module. This function returns a promise which resolves with the module instance. You can pass more than one module id to this function or an array of ids. If more than one or an array is passed, then the promise will resolve with an array of module instances.
         * @method acquire
         * @param {string|string[]} moduleId The id(s) of the modules to load.
         * @return {Promise} A promise for the loaded module(s).
         */
        acquire: function() {
            var modules,
                first = arguments[0],
                arrayRequest = false;

            if(system.isArray(first)){
                modules = first;
                arrayRequest = true;
            }else{
                modules = slice.call(arguments, 0);
            }

            return this.defer(function(dfd) {
                require(modules, function() {
                    var args = arguments;
                    setTimeout(function() {
                        if(args.length > 1 || arrayRequest){
                            dfd.resolve(slice.call(args, 0));
                        }else{
                            dfd.resolve(args[0]);
                        }
                    }, 1);
                }, function(err){
                    dfd.reject(err);
                });
            }).promise();
        },
        /**
         * Extends the first object with the properties of the following objects.
         * @method extend
         * @param {object} obj The target object to extend.
         * @param {object} extension* Uses to extend the target object.
         */
        extend: function(obj) {
            var rest = slice.call(arguments, 1);

            for (var i = 0; i < rest.length; i++) {
                var source = rest[i];

                if (source) {
                    for (var prop in source) {
                        obj[prop] = source[prop];
                    }
                }
            }

            return obj;
        },
        /**
         * Uses a setTimeout to wait the specified milliseconds.
         * @method wait
         * @param {number} milliseconds The number of milliseconds to wait.
         * @return {Promise}
         */
        wait: function(milliseconds) {
            return system.defer(function(dfd) {
                setTimeout(dfd.resolve, milliseconds);
            }).promise();
        }
    };

    /**
     * Gets all the owned keys of the specified object.
     * @method keys
     * @param {object} object The object whose owned keys should be returned.
     * @return {string[]} The keys.
     */
    system.keys = nativeKeys || function(obj) {
        if (obj !== Object(obj)) {
            throw new TypeError('Invalid object');
        }

        var keys = [];

        for (var key in obj) {
            if (hasOwnProperty.call(obj, key)) {
                keys[keys.length] = key;
            }
        }

        return keys;
    };

    /**
     * Determines if the specified object is an html element.
     * @method isElement
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */
    system.isElement = function(obj) {
        return !!(obj && obj.nodeType === 1);
    };

    /**
     * Determines if the specified object is an array.
     * @method isArray
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */
    system.isArray = nativeIsArray || function(obj) {
        return toString.call(obj) == '[object Array]';
    };

    /**
     * Determines if the specified object is...an object. ie. Not an array, string, etc.
     * @method isObject
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */
    system.isObject = function(obj) {
        return obj === Object(obj);
    };

    /**
     * Determines if the specified object is a boolean.
     * @method isBoolean
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */
    system.isBoolean = function(obj) {
        return typeof(obj) === "boolean";
    };

    /**
     * Determines if the specified object is a promise.
     * @method isPromise
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */
    system.isPromise = function(obj) {
        return obj && system.isFunction(obj.then);
    };

    /**
     * Determines if the specified object is a function arguments object.
     * @method isArguments
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */

    /**
     * Determines if the specified object is a function.
     * @method isFunction
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */

    /**
     * Determines if the specified object is a string.
     * @method isString
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */

    /**
     * Determines if the specified object is a number.
     * @method isNumber
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */

    /**
     * Determines if the specified object is a date.
     * @method isDate
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */

    /**
     * Determines if the specified object is a boolean.
     * @method isBoolean
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */

    //isArguments, isFunction, isString, isNumber, isDate, isRegExp.
    var isChecks = ['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'];

    function makeIsFunction(name) {
        var value = '[object ' + name + ']';
        system['is' + name] = function(obj) {
            return toString.call(obj) == value;
        };
    }

    for (var i = 0; i < isChecks.length; i++) {
        makeIsFunction(isChecks[i]);
    }

    return system;
});

/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * The viewEngine module provides information to the viewLocator module which is used to locate the view's source file. The viewEngine also transforms a view id into a view instance.
 * @module viewEngine
 * @requires system
 * @requires jquery
 */
define('durandal/viewEngine',['durandal/system', 'jquery'], function (system, $) {
    var parseMarkup;

    if ($.parseHTML) {
        parseMarkup = function (html) {
            return $.parseHTML(html);
        };
    } else {
        parseMarkup = function (html) {
            return $(html).get();
        };
    }

    /**
     * @class ViewEngineModule
     * @static
     */
    return {
        cache:{},
        /**
         * The file extension that view source files are expected to have.
         * @property {string} viewExtension
         * @default .html
         */
        viewExtension: '.html',
        /**
         * The name of the RequireJS loader plugin used by the viewLocator to obtain the view source. (Use requirejs to map the plugin's full path).
         * @property {string} viewPlugin
         * @default text
         */
        viewPlugin: 'text',
        /**
         * Parameters passed to the RequireJS loader plugin used by the viewLocator to obtain the view source.
         * @property {string} viewPluginParameters
         * @default The empty string by default.
         */
        viewPluginParameters: '',
        /**
         * Determines if the url is a url for a view, according to the view engine.
         * @method isViewUrl
         * @param {string} url The potential view url.
         * @return {boolean} True if the url is a view url, false otherwise.
         */
        isViewUrl: function (url) {
            return url.indexOf(this.viewExtension, url.length - this.viewExtension.length) !== -1;
        },
        /**
         * Converts a view url into a view id.
         * @method convertViewUrlToViewId
         * @param {string} url The url to convert.
         * @return {string} The view id.
         */
        convertViewUrlToViewId: function (url) {
            return url.substring(0, url.length - this.viewExtension.length);
        },
        /**
         * Converts a view id into a full RequireJS path.
         * @method convertViewIdToRequirePath
         * @param {string} viewId The view id to convert.
         * @return {string} The require path.
         */
        convertViewIdToRequirePath: function (viewId) {
            var plugin = this.viewPlugin ? this.viewPlugin + '!' : '';
            return plugin + viewId + this.viewExtension + this.viewPluginParameters;
        },
        /**
         * Parses the view engine recognized markup and returns DOM elements.
         * @method parseMarkup
         * @param {string} markup The markup to parse.
         * @return {DOMElement[]} The elements.
         */
        parseMarkup: parseMarkup,
        /**
         * Calls `parseMarkup` and then pipes the results through `ensureSingleElement`.
         * @method processMarkup
         * @param {string} markup The markup to process.
         * @return {DOMElement} The view.
         */
        processMarkup: function (markup) {
            var allElements = this.parseMarkup(markup);
            return this.ensureSingleElement(allElements);
        },
        /**
         * Converts an array of elements into a single element. White space and comments are removed. If a single element does not remain, then the elements are wrapped.
         * @method ensureSingleElement
         * @param {DOMElement[]} allElements The elements.
         * @return {DOMElement} A single element.
         */
        ensureSingleElement:function(allElements){
            if (allElements.length == 1) {
                return allElements[0];
            }

            var withoutCommentsOrEmptyText = [];

            for (var i = 0; i < allElements.length; i++) {
                var current = allElements[i];
                if (current.nodeType != 8) {
                    if (current.nodeType == 3) {
                        var result = /\S/.test(current.nodeValue);
                        if (!result) {
                            continue;
                        }
                    }

                    withoutCommentsOrEmptyText.push(current);
                }
            }

            if (withoutCommentsOrEmptyText.length > 1) {
                return $(withoutCommentsOrEmptyText).wrapAll('<div class="durandal-wrapper"></div>').parent().get(0);
            }

            return withoutCommentsOrEmptyText[0];
        },
        /**
         * Gets the view associated with the id from the cache of parsed views.
         * @method tryGetViewFromCache
         * @param {string} id The view id to lookup in the cache.
         * @return {DOMElement|null} The cached view or null if it's not in the cache.
         */
        tryGetViewFromCache:function(id) {
            return this.cache[id];
        },
        /**
         * Puts the view associated with the id into the cache of parsed views.
         * @method putViewInCache
         * @param {string} id The view id whose view should be cached.
         * @param {DOMElement} view The view to cache.
         */
        putViewInCache: function (id, view) {
            this.cache[id] = view;
        },
        /**
         * Creates the view associated with the view id.
         * @method createView
         * @param {string} viewId The view id whose view should be created.
         * @return {Promise} A promise of the view.
         */
        createView: function(viewId) {
            var that = this;
            var requirePath = this.convertViewIdToRequirePath(viewId);
            var existing = this.tryGetViewFromCache(requirePath);

            if (existing) {
                return system.defer(function(dfd) {
                    dfd.resolve(existing.cloneNode(true));
                }).promise();
            }

            return system.defer(function(dfd) {
                system.acquire(requirePath).then(function(markup) {
                    var element = that.processMarkup(markup);
                    element.setAttribute('data-view', viewId);
                    that.putViewInCache(requirePath, element);
                    dfd.resolve(element.cloneNode(true));
                }).fail(function(err) {
                    that.createFallbackView(viewId, requirePath, err).then(function(element) {
                        element.setAttribute('data-view', viewId);
                        that.cache[requirePath] = element;
                        dfd.resolve(element.cloneNode(true));
                    });
                });
            }).promise();
        },
        /**
         * Called when a view cannot be found to provide the opportunity to locate or generate a fallback view. Mainly used to ease development.
         * @method createFallbackView
         * @param {string} viewId The view id whose view should be created.
         * @param {string} requirePath The require path that was attempted.
         * @param {Error} requirePath The error that was returned from the attempt to locate the default view.
         * @return {Promise} A promise for the fallback view.
         */
        createFallbackView: function (viewId, requirePath, err) {
            var that = this,
                message = 'View Not Found. Searched for "' + viewId + '" via path "' + requirePath + '".';

            return system.defer(function(dfd) {
                dfd.resolve(that.processMarkup('<div class="durandal-view-404">' + message + '</div>'));
            }).promise();
        }
    };
});

/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * The viewLocator module collaborates with the viewEngine module to provide views (literally dom sub-trees) to other parts of the framework as needed. The primary consumer of the viewLocator is the composition module.
 * @module viewLocator
 * @requires system
 * @requires viewEngine
 */
define('durandal/viewLocator',['durandal/system', 'durandal/viewEngine'], function (system, viewEngine) {
    function findInElements(nodes, url) {
        for (var i = 0; i < nodes.length; i++) {
            var current = nodes[i];
            var existingUrl = current.getAttribute('data-view');
            if (existingUrl == url) {
                return current;
            }
        }
    }
    
    function escape(str) {
        return (str + '').replace(/([\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:])/g, "\\$1");
    }

    /**
     * @class ViewLocatorModule
     * @static
     */
    return {
        /**
         * Allows you to set up a convention for mapping module folders to view folders. It is a convenience method that customizes `convertModuleIdToViewId` and `translateViewIdToArea` under the covers.
         * @method useConvention
         * @param {string} [modulesPath] A string to match in the path and replace with the viewsPath. If not specified, the match is 'viewmodels'.
         * @param {string} [viewsPath] The replacement for the modulesPath. If not specified, the replacement is 'views'.
         * @param {string} [areasPath] Partial views are mapped to the "views" folder if not specified. Use this parameter to change their location.
         */
        useConvention: function(modulesPath, viewsPath, areasPath) {
            modulesPath = modulesPath || 'viewmodels';
            viewsPath = viewsPath || 'views';
            areasPath = areasPath || viewsPath;

            var reg = new RegExp(escape(modulesPath), 'gi');

            this.convertModuleIdToViewId = function (moduleId) {
                return moduleId.replace(reg, viewsPath);
            };

            this.translateViewIdToArea = function (viewId, area) {
                if (!area || area == 'partial') {
                    return areasPath + '/' + viewId;
                }
                
                return areasPath + '/' + area + '/' + viewId;
            };
        },
        /**
         * Maps an object instance to a view instance.
         * @method locateViewForObject
         * @param {object} obj The object to locate the view for.
         * @param {string} [area] The area to translate the view to.
         * @param {DOMElement[]} [elementsToSearch] An existing set of elements to search first.
         * @return {Promise} A promise of the view.
         */
        locateViewForObject: function(obj, area, elementsToSearch) {
            var view;

            if (obj.getView) {
                view = obj.getView();
                if (view) {
                    return this.locateView(view, area, elementsToSearch);
                }
            }

            if (obj.viewUrl) {
                return this.locateView(obj.viewUrl, area, elementsToSearch);
            }

            var id = system.getModuleId(obj);
            if (id) {
                return this.locateView(this.convertModuleIdToViewId(id), area, elementsToSearch);
            }

            return this.locateView(this.determineFallbackViewId(obj), area, elementsToSearch);
        },
        /**
         * Converts a module id into a view id. By default the ids are the same.
         * @method convertModuleIdToViewId
         * @param {string} moduleId The module id.
         * @return {string} The view id.
         */
        convertModuleIdToViewId: function(moduleId) {
            return moduleId;
        },
        /**
         * If no view id can be determined, this function is called to genreate one. By default it attempts to determine the object's type and use that.
         * @method determineFallbackViewId
         * @param {object} obj The object to determine the fallback id for.
         * @return {string} The view id.
         */
        determineFallbackViewId: function (obj) {
            var funcNameRegex = /function (.{1,})\(/;
            var results = (funcNameRegex).exec((obj).constructor.toString());
            var typeName = (results && results.length > 1) ? results[1] : "";
            typeName = typeName.trim();
            return 'views/' + typeName;
        },
        /**
         * Takes a view id and translates it into a particular area. By default, no translation occurs.
         * @method translateViewIdToArea
         * @param {string} viewId The view id.
         * @param {string} area The area to translate the view to.
         * @return {string} The translated view id.
         */
        translateViewIdToArea: function (viewId, area) {
            return viewId;
        },
        /**
         * Locates the specified view.
         * @method locateView
         * @param {string|DOMElement} viewOrUrlOrId A view, view url or view id to locate.
         * @param {string} [area] The area to translate the view to.
         * @param {DOMElement[]} [elementsToSearch] An existing set of elements to search first.
         * @return {Promise} A promise of the view.
         */
        locateView: function(viewOrUrlOrId, area, elementsToSearch) {
            if (typeof viewOrUrlOrId === 'string') {
                var viewId;

                if (viewEngine.isViewUrl(viewOrUrlOrId)) {
                    viewId = viewEngine.convertViewUrlToViewId(viewOrUrlOrId);
                } else {
                    viewId = viewOrUrlOrId;
                }

                if (area) {
                    viewId = this.translateViewIdToArea(viewId, area);
                }

                if (elementsToSearch) {
                    var existing = findInElements(elementsToSearch, viewId);
                    if (existing) {
                        return system.defer(function(dfd) {
                            dfd.resolve(existing);
                        }).promise();
                    }
                }

                return viewEngine.createView(viewId);
            }

            return system.defer(function(dfd) {
                dfd.resolve(viewOrUrlOrId);
            }).promise();
        }
    };
});

/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * The binder joins an object instance and a DOM element tree by applying databinding and/or invoking binding lifecycle callbacks (binding and bindingComplete).
 * @module binder
 * @requires system
 * @requires knockout
 */
define('durandal/binder',['durandal/system', 'knockout'], function (system, ko) {
    var binder,
        insufficientInfoMessage = 'Insufficient Information to Bind',
        unexpectedViewMessage = 'Unexpected View Type',
        bindingInstructionKey = 'durandal-binding-instruction',
        koBindingContextKey = '__ko_bindingContext__';

    function normalizeBindingInstruction(result){
        if(result === undefined){
            return { applyBindings: true };
        }

        if(system.isBoolean(result)){
            return { applyBindings:result };
        }

        if(result.applyBindings === undefined){
            result.applyBindings = true;
        }

        return result;
    }

    function doBind(obj, view, bindingTarget, data){
        if (!view || !bindingTarget) {
            if (binder.throwOnErrors) {
                system.error(insufficientInfoMessage);
            } else {
                system.log(insufficientInfoMessage, view, data);
            }
            return;
        }

        if (!view.getAttribute) {
            if (binder.throwOnErrors) {
                system.error(unexpectedViewMessage);
            } else {
                system.log(unexpectedViewMessage, view, data);
            }
            return;
        }

        var viewName = view.getAttribute('data-view');

        try {
            var instruction;

            if (obj && obj.binding) {
                instruction = obj.binding(view);
            }

            instruction = normalizeBindingInstruction(instruction);
            binder.binding(data, view, instruction);

            if(instruction.applyBindings){
                system.log('Binding', viewName, data);
                ko.applyBindings(bindingTarget, view);
            }else if(obj){
                ko.utils.domData.set(view, koBindingContextKey, { $data:obj });
            }

            binder.bindingComplete(data, view, instruction);

            if (obj && obj.bindingComplete) {
                obj.bindingComplete(view);
            }

            ko.utils.domData.set(view, bindingInstructionKey, instruction);
            return instruction;
        } catch (e) {
            e.message = e.message + ';\nView: ' + viewName + ";\nModuleId: " + system.getModuleId(data);
            if (binder.throwOnErrors) {
                system.error(e);
            } else {
                system.log(e.message);
            }
        }
    }

    /**
     * @class BinderModule
     * @static
     */
    return binder = {
        /**
         * Called before every binding operation. Does nothing by default.
         * @method binding
         * @param {object} data The data that is about to be bound.
         * @param {DOMElement} view The view that is about to be bound.
         * @param {object} instruction The object that carries the binding instructions.
         */
        binding: system.noop,
        /**
         * Called after every binding operation. Does nothing by default.
         * @method bindingComplete
         * @param {object} data The data that has just been bound.
         * @param {DOMElement} view The view that has just been bound.
         * @param {object} instruction The object that carries the binding instructions.
         */
        bindingComplete: system.noop,
        /**
         * Indicates whether or not the binding system should throw errors or not.
         * @property {boolean} throwOnErrors
         * @default false The binding system will not throw errors by default. Instead it will log them.
         */
        throwOnErrors: false,
        /**
         * Gets the binding instruction that was associated with a view when it was bound.
         * @method getBindingInstruction
         * @param {DOMElement} view The view that was previously bound.
         * @return {object} The object that carries the binding instructions.
         */
        getBindingInstruction:function(view){
            return ko.utils.domData.get(view, bindingInstructionKey);
        },
        /**
         * Binds the view, preserving the existing binding context. Optionally, a new context can be created, parented to the previous context.
         * @method bindContext
         * @param {KnockoutBindingContext} bindingContext The current binding context.
         * @param {DOMElement} view The view to bind.
         * @param {object} [obj] The data to bind to, causing the creation of a child binding context if present.
         * @param {string} [dataAlias] An alias for $data if present.
         */
        bindContext: function(bindingContext, view, obj, dataAlias) {
            if (obj && bindingContext) {
                bindingContext = bindingContext.createChildContext(obj, typeof(dataAlias) === 'string' ? dataAlias : null);
            }

            return doBind(obj, view, bindingContext, obj || (bindingContext ? bindingContext.$data : null));
        },
        /**
         * Binds the view, preserving the existing binding context. Optionally, a new context can be created, parented to the previous context.
         * @method bind
         * @param {object} obj The data to bind to.
         * @param {DOMElement} view The view to bind.
         */
        bind: function(obj, view) {
            return doBind(obj, view, obj, obj);
        }
    };
});

/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * The activator module encapsulates all logic related to screen/component activation.
 * An activator is essentially an asynchronous state machine that understands a particular state transition protocol.
 * The protocol ensures that the following series of events always occur: `canDeactivate` (previous state), `canActivate` (new state), `deactivate` (previous state), `activate` (new state).
 * Each of the _can_ callbacks may return a boolean, affirmative value or promise for one of those. If either of the _can_ functions yields a false result, then activation halts.
 * @module activator
 * @requires system
 * @requires knockout
 */
define('durandal/activator',['durandal/system', 'knockout'], function (system, ko) {
    var activator;
    var defaultOptions = {
        canDeactivate:true
    };

    function ensureSettings(settings) {
        if (settings == undefined) {
            settings = {};
        }

        if (!system.isBoolean(settings.closeOnDeactivate)) {
            settings.closeOnDeactivate = activator.defaults.closeOnDeactivate;
        }

        if (!settings.beforeActivate) {
            settings.beforeActivate = activator.defaults.beforeActivate;
        }

        if (!settings.afterDeactivate) {
            settings.afterDeactivate = activator.defaults.afterDeactivate;
        }

        if(!settings.affirmations){
            settings.affirmations = activator.defaults.affirmations;
        }

        if (!settings.interpretResponse) {
            settings.interpretResponse = activator.defaults.interpretResponse;
        }

        if (!settings.areSameItem) {
            settings.areSameItem = activator.defaults.areSameItem;
        }

        if (!settings.findChildActivator) {
            settings.findChildActivator = activator.defaults.findChildActivator;
        }

        return settings;
    }

    function invoke(target, method, data) {
        if (system.isArray(data)) {
            return target[method].apply(target, data);
        }

        return target[method](data);
    }

    function deactivate(item, close, settings, dfd, setter) {
        if (item && item.deactivate) {
            system.log('Deactivating', item);

            var result;
            try {
                result = item.deactivate(close);
            } catch(error) {
                system.log('ERROR: ' + error.message, error);
                dfd.resolve(false);
                return;
            }

            if (result && result.then) {
                result.then(function() {
                    settings.afterDeactivate(item, close, setter);
                    dfd.resolve(true);
                }, function(reason) {
                    system.log(reason);
                    dfd.resolve(false);
                });
            } else {
                settings.afterDeactivate(item, close, setter);
                dfd.resolve(true);
            }
        } else {
            if (item) {
                settings.afterDeactivate(item, close, setter);
            }

            dfd.resolve(true);
        }
    }

    function activate(newItem, activeItem, callback, activationData) {
        var result;

        if(newItem && newItem.activate) {
            system.log('Activating', newItem);

            try {
                result = invoke(newItem, 'activate', activationData);
            } catch(error) {
                system.log('ERROR: ' + error.message, error);
                callback(false);
                return;
            }
        }

        if(result && result.then) {
            result.then(function() {
                activeItem(newItem);
                callback(true);
            }, function(reason) {
                system.log('ERROR: ' + reason.message, reason);
                callback(false);
            });
        } else {
            activeItem(newItem);
            callback(true);
        }
    }

    function canDeactivateItem(item, close, settings, options) {
        options = system.extend({}, defaultOptions, options);
        settings.lifecycleData = null;

        return system.defer(function (dfd) {
            function continueCanDeactivate() {
                if (item && item.canDeactivate && options.canDeactivate) {
                    var resultOrPromise;
                    try {
                        resultOrPromise = item.canDeactivate(close);
                    } catch (error) {
                        system.log('ERROR: ' + error.message, error);
                        dfd.resolve(false);
                        return;
                    }

                    if (resultOrPromise.then) {
                        resultOrPromise.then(function (result) {
                            settings.lifecycleData = result;
                            dfd.resolve(settings.interpretResponse(result));
                        }, function (reason) {
                            system.log('ERROR: ' + reason.message, reason);
                            dfd.resolve(false);
                        });
                    } else {
                        settings.lifecycleData = resultOrPromise;
                        dfd.resolve(settings.interpretResponse(resultOrPromise));
                    }
                } else {
                    dfd.resolve(true);
                }
            }

            var childActivator = settings.findChildActivator(item);
            if (childActivator) {
                childActivator.canDeactivate().then(function(result) {
                    if (result) {
                        continueCanDeactivate();
                    } else {
                        dfd.resolve(false);
                    }
                });
            } else {
                continueCanDeactivate();
            }
        }).promise();
    };

    function canActivateItem(newItem, activeItem, settings, activeData, newActivationData) {
        settings.lifecycleData = null;

        return system.defer(function (dfd) {
            if (settings.areSameItem(activeItem(), newItem, activeData, newActivationData)) {
                dfd.resolve(true);
                return;
            }

            if (newItem && newItem.canActivate) {
                var resultOrPromise;
                try {
                    resultOrPromise = invoke(newItem, 'canActivate', newActivationData);
                } catch (error) {
                    system.log('ERROR: ' + error.message, error);
                    dfd.resolve(false);
                    return;
                }

                if (resultOrPromise.then) {
                    resultOrPromise.then(function(result) {
                        settings.lifecycleData = result;
                        dfd.resolve(settings.interpretResponse(result));
                    }, function(reason) {
                        system.log('ERROR: ' + reason.message, reason);
                        dfd.resolve(false);
                    });
                } else {
                    settings.lifecycleData = resultOrPromise;
                    dfd.resolve(settings.interpretResponse(resultOrPromise));
                }
            } else {
                dfd.resolve(true);
            }
        }).promise();
    };

    /**
     * An activator is a read/write computed observable that enforces the activation lifecycle whenever changing values.
     * @class Activator
     */
    function createActivator(initialActiveItem, settings) {
        var activeItem = ko.observable(null);
        var activeData;

        settings = ensureSettings(settings);

        var computed = ko.computed({
            read: function () {
                return activeItem();
            },
            write: function (newValue) {
                computed.viaSetter = true;
                computed.activateItem(newValue);
            }
        });

        computed.__activator__ = true;

        /**
         * The settings for this activator.
         * @property {ActivatorSettings} settings
         */
        computed.settings = settings;
        settings.activator = computed;

        /**
         * An observable which indicates whether or not the activator is currently in the process of activating an instance.
         * @method isActivating
         * @return {boolean}
         */
        computed.isActivating = ko.observable(false);

        computed.forceActiveItem = function (item) {
            activeItem(item);
        };

        /**
         * Determines whether or not the specified item can be deactivated.
         * @method canDeactivateItem
         * @param {object} item The item to check.
         * @param {boolean} close Whether or not to check if close is possible.
         * @param {object} options Options for controlling the activation process.
         * @return {promise}
         */
        computed.canDeactivateItem = function (item, close, options) {
            return canDeactivateItem(item, close, settings, options);
        };

        /**
         * Deactivates the specified item.
         * @method deactivateItem
         * @param {object} item The item to deactivate.
         * @param {boolean} close Whether or not to close the item.
         * @return {promise}
         */
        computed.deactivateItem = function (item, close) {
            return system.defer(function(dfd) {
                computed.canDeactivateItem(item, close).then(function(canDeactivate) {
                    if (canDeactivate) {
                        deactivate(item, close, settings, dfd, activeItem);
                    } else {
                        computed.notifySubscribers();
                        dfd.resolve(false);
                    }
                });
            }).promise();
        };

        /**
         * Determines whether or not the specified item can be activated.
         * @method canActivateItem
         * @param {object} item The item to check.
         * @param {object} activationData Data associated with the activation.
         * @return {promise}
         */
        computed.canActivateItem = function (newItem, activationData) {
            return canActivateItem(newItem, activeItem, settings, activeData, activationData);
        };

        /**
         * Activates the specified item.
         * @method activateItem
         * @param {object} newItem The item to activate.
         * @param {object} newActivationData Data associated with the activation.
         * @param {object} options Options for controlling the activation process.
         * @return {promise}
         */
        computed.activateItem = function (newItem, newActivationData, options) {
            var viaSetter = computed.viaSetter;
            computed.viaSetter = false;

            return system.defer(function (dfd) {
                if (computed.isActivating()) {
                    dfd.resolve(false);
                    return;
                }

                computed.isActivating(true);

                var currentItem = activeItem();
                if (settings.areSameItem(currentItem, newItem, activeData, newActivationData)) {
                    computed.isActivating(false);
                    dfd.resolve(true);
                    return;
                }

                computed.canDeactivateItem(currentItem, settings.closeOnDeactivate, options).then(function (canDeactivate) {
                    if (canDeactivate) {
                        computed.canActivateItem(newItem, newActivationData).then(function (canActivate) {
                            if (canActivate) {
                                system.defer(function (dfd2) {
                                    deactivate(currentItem, settings.closeOnDeactivate, settings, dfd2);
                                }).promise().then(function () {
                                        newItem = settings.beforeActivate(newItem, newActivationData);
                                        activate(newItem, activeItem, function (result) {
                                            activeData = newActivationData;
                                            computed.isActivating(false);
                                            dfd.resolve(result);
                                        }, newActivationData);
                                    });
                            } else {
                                if (viaSetter) {
                                    computed.notifySubscribers();
                                }

                                computed.isActivating(false);
                                dfd.resolve(false);
                            }
                        });
                    } else {
                        if (viaSetter) {
                            computed.notifySubscribers();
                        }

                        computed.isActivating(false);
                        dfd.resolve(false);
                    }
                });
            }).promise();
        };

        /**
         * Determines whether or not the activator, in its current state, can be activated.
         * @method canActivate
         * @return {promise}
         */
        computed.canActivate = function () {
            var toCheck;

            if (initialActiveItem) {
                toCheck = initialActiveItem;
                initialActiveItem = false;
            } else {
                toCheck = computed();
            }

            return computed.canActivateItem(toCheck);
        };

        /**
         * Activates the activator, in its current state.
         * @method activate
         * @return {promise}
         */
        computed.activate = function () {
            var toActivate;

            if (initialActiveItem) {
                toActivate = initialActiveItem;
                initialActiveItem = false;
            } else {
                toActivate = computed();
            }

            return computed.activateItem(toActivate);
        };

        /**
         * Determines whether or not the activator, in its current state, can be deactivated.
         * @method canDeactivate
         * @return {promise}
         */
        computed.canDeactivate = function (close) {
            return computed.canDeactivateItem(computed(), close);
        };

        /**
         * Deactivates the activator, in its current state.
         * @method deactivate
         * @return {promise}
         */
        computed.deactivate = function (close) {
            return computed.deactivateItem(computed(), close);
        };

        computed.includeIn = function (includeIn) {
            includeIn.canActivate = function () {
                return computed.canActivate();
            };

            includeIn.activate = function () {
                return computed.activate();
            };

            includeIn.canDeactivate = function (close) {
                return computed.canDeactivate(close);
            };

            includeIn.deactivate = function (close) {
                return computed.deactivate(close);
            };
        };

        if (settings.includeIn) {
            computed.includeIn(settings.includeIn);
        } else if (initialActiveItem) {
            computed.activate();
        }

        computed.forItems = function (items) {
            settings.closeOnDeactivate = false;

            settings.determineNextItemToActivate = function (list, lastIndex) {
                var toRemoveAt = lastIndex - 1;

                if (toRemoveAt == -1 && list.length > 1) {
                    return list[1];
                }

                if (toRemoveAt > -1 && toRemoveAt < list.length - 1) {
                    return list[toRemoveAt];
                }

                return null;
            };

            settings.beforeActivate = function (newItem) {
                var currentItem = computed();

                if (!newItem) {
                    newItem = settings.determineNextItemToActivate(items, currentItem ? items.indexOf(currentItem) : 0);
                } else {
                    var index = items.indexOf(newItem);

                    if (index == -1) {
                        items.push(newItem);
                    } else {
                        newItem = items()[index];
                    }
                }

                return newItem;
            };

            settings.afterDeactivate = function (oldItem, close) {
                if (close) {
                    items.remove(oldItem);
                }
            };

            var originalCanDeactivate = computed.canDeactivate;
            computed.canDeactivate = function (close) {
                if (close) {
                    return system.defer(function (dfd) {
                        var list = items();
                        var results = [];

                        function finish() {
                            for (var j = 0; j < results.length; j++) {
                                if (!results[j]) {
                                    dfd.resolve(false);
                                    return;
                                }
                            }

                            dfd.resolve(true);
                        }

                        for (var i = 0; i < list.length; i++) {
                            computed.canDeactivateItem(list[i], close).then(function (result) {
                                results.push(result);
                                if (results.length == list.length) {
                                    finish();
                                }
                            });
                        }
                    }).promise();
                } else {
                    return originalCanDeactivate();
                }
            };

            var originalDeactivate = computed.deactivate;
            computed.deactivate = function (close) {
                if (close) {
                    return system.defer(function (dfd) {
                        var list = items();
                        var results = 0;
                        var listLength = list.length;

                        function doDeactivate(item) {
                            setTimeout(function () {
                                computed.deactivateItem(item, close).then(function () {
                                    results++;
                                    items.remove(item);
                                    if (results == listLength) {
                                        dfd.resolve();
                                    }
                                });
                            }, 1);
                        }

                        for (var i = 0; i < listLength; i++) {
                            doDeactivate(list[i]);
                        }
                    }).promise();
                } else {
                    return originalDeactivate();
                }
            };

            return computed;
        };

        return computed;
    }

    /**
     * @class ActivatorSettings
     * @static
     */
    var activatorSettings = {
        /**
         * The default value passed to an object's deactivate function as its close parameter.
         * @property {boolean} closeOnDeactivate
         * @default true
         */
        closeOnDeactivate: true,
        /**
         * Lower-cased words which represent a truthy value.
         * @property {string[]} affirmations
         * @default ['yes', 'ok', 'true']
         */
        affirmations: ['yes', 'ok', 'true'],
        /**
         * Interprets the response of a `canActivate` or `canDeactivate` call using the known affirmative values in the `affirmations` array.
         * @method interpretResponse
         * @param {object} value
         * @return {boolean}
         */
        interpretResponse: function(value) {
            if(system.isObject(value)) {
                value = value.can || false;
            }

            if(system.isString(value)) {
                return ko.utils.arrayIndexOf(this.affirmations, value.toLowerCase()) !== -1;
            }

            return value;
        },
        /**
         * Determines whether or not the current item and the new item are the same.
         * @method areSameItem
         * @param {object} currentItem
         * @param {object} newItem
         * @param {object} currentActivationData
         * @param {object} newActivationData
         * @return {boolean}
         */
        areSameItem: function(currentItem, newItem, currentActivationData, newActivationData) {
            return currentItem == newItem;
        },
        /**
         * Called immediately before the new item is activated.
         * @method beforeActivate
         * @param {object} newItem
         */
        beforeActivate: function(newItem) {
            return newItem;
        },
        /**
         * Called immediately after the old item is deactivated.
         * @method afterDeactivate
         * @param {object} oldItem The previous item.
         * @param {boolean} close Whether or not the previous item was closed.
         * @param {function} setter The activate item setter function.
         */
        afterDeactivate: function(oldItem, close, setter) {
            if(close && setter) {
                setter(null);
            }
        },
        findChildActivator: function(item){
            return null;
        }
    };

    /**
     * @class ActivatorModule
     * @static
     */
    activator = {
        /**
         * The default settings used by activators.
         * @property {ActivatorSettings} defaults
         */
        defaults: activatorSettings,
        /**
         * Creates a new activator.
         * @method create
         * @param {object} [initialActiveItem] The item which should be immediately activated upon creation of the ativator.
         * @param {ActivatorSettings} [settings] Per activator overrides of the default activator settings.
         * @return {Activator} The created activator.
         */
        create: createActivator,
        /**
         * Determines whether or not the provided object is an activator or not.
         * @method isActivator
         * @param {object} object Any object you wish to verify as an activator or not.
         * @return {boolean} True if the object is an activator; false otherwise.
         */
        isActivator:function(object){
            return object && object.__activator__;
        }
    };

    return activator;
});

/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * The composition module encapsulates all functionality related to visual composition.
 * @module composition
 * @requires system
 * @requires viewLocator
 * @requires binder
 * @requires viewEngine
 * @requires activator
 * @requires jquery
 * @requires knockout
 */
define('durandal/composition',['durandal/system', 'durandal/viewLocator', 'durandal/binder', 'durandal/viewEngine', 'durandal/activator', 'jquery', 'knockout'], function (system, viewLocator, binder, viewEngine, activator, $, ko) {
    var dummyModel = {},
        activeViewAttributeName = 'data-active-view',
        composition,
        compositionCompleteCallbacks = [],
        compositionCount = 0,
        compositionDataKey = 'durandal-composition-data',
        partAttributeName = 'data-part',
        bindableSettings = ['model', 'view', 'transition', 'area', 'strategy', 'activationData', 'onError'],
        visibilityKey = "durandal-visibility-data",
        composeBindings = ['compose:'];
    
    function onError(context, error, element) {
        try {
            if (context.onError) {
                try {
                    context.onError(error, element);
                } catch (e) {
                    system.error(e);
                }
            } else {
                system.error(error);
            }
        } finally {
            endComposition(context, element, true);
        }
    }

    function getHostState(parent) {
        var elements = [];
        var state = {
            childElements: elements,
            activeView: null
        };

        var child = ko.virtualElements.firstChild(parent);

        while (child) {
            if (child.nodeType == 1) {
                elements.push(child);
                if (child.getAttribute(activeViewAttributeName)) {
                    state.activeView = child;
                }
            }

            child = ko.virtualElements.nextSibling(child);
        }

        if(!state.activeView){
            state.activeView = elements[0];
        }

        return state;
    }

    function endComposition(context, element, error) {
        compositionCount--;

        if(compositionCount === 0) {
            var callBacks = compositionCompleteCallbacks;
            compositionCompleteCallbacks = [];
            
            if (!error) {
                setTimeout(function () {
                    var i = callBacks.length;

                    while (i--) {
                        try {
                            callBacks[i]();
                        } catch (e) {
                            onError(context, e, element);
                        }
                    }
                }, 1);
            }
        }

        cleanUp(context);
    }

    function cleanUp(context){
        delete context.activeView;
        delete context.viewElements;
    }

    function tryActivate(context, successCallback, skipActivation, element) {
        if(skipActivation){
            successCallback();
        } else if (context.activate && context.model && context.model.activate) {
            var result;

            try{
                if(system.isArray(context.activationData)) {
                    result = context.model.activate.apply(context.model, context.activationData);
                } else {
                    result = context.model.activate(context.activationData);
                }

                if(result && result.then) {
                    result.then(successCallback, function(reason) {
                        onError(context, reason, element);
                        successCallback();
                    });
                } else if(result || result === undefined) {
                    successCallback();
                } else {
                    endComposition(context, element);
                }
            }
            catch(e){
                onError(context, e, element);
            }
        } else {
            successCallback();
        }
    }

    function triggerAttach(context, element) {
        var context = this;

        if (context.activeView) {
            context.activeView.removeAttribute(activeViewAttributeName);
        }

        if (context.child) {
            try{
                if (context.model && context.model.attached) {
                    if (context.composingNewView || context.alwaysTriggerAttach) {
                        context.model.attached(context.child, context.parent, context);
                    }
                }

                if (context.attached) {
                    context.attached(context.child, context.parent, context);
                }

                context.child.setAttribute(activeViewAttributeName, true);

                if (context.composingNewView && context.model && context.model.detached) {
                    ko.utils.domNodeDisposal.addDisposeCallback(context.child, function () {
                        try{
                            context.model.detached(context.child, context.parent, context);
                        }catch(e2){
                            onError(context, e2, element);
                        }
                    });
                }
            }catch(e){
                onError(context, e, element);
            }
        }

        context.triggerAttach = system.noop;
    }

    function shouldTransition(context) {
        if (system.isString(context.transition)) {
            if (context.activeView) {
                if (context.activeView == context.child) {
                    return false;
                }

                if (!context.child) {
                    return true;
                }

                if (context.skipTransitionOnSameViewId) {
                    var currentViewId = context.activeView.getAttribute('data-view');
                    var newViewId = context.child.getAttribute('data-view');
                    return currentViewId != newViewId;
                }
            }

            return true;
        }

        return false;
    }

    function cloneNodes(nodesArray) {
        for (var i = 0, j = nodesArray.length, newNodesArray = []; i < j; i++) {
            var clonedNode = nodesArray[i].cloneNode(true);
            newNodesArray.push(clonedNode);
        }
        return newNodesArray;
    }

    function replaceParts(context){
        var parts = cloneNodes(context.parts);
        var replacementParts = composition.getParts(parts);
        var standardParts = composition.getParts(context.child);

        for (var partId in replacementParts) {
            var toReplace = standardParts[partId];
            if (!toReplace) {
                toReplace = $('[data-part="' + partId + '"]', context.child).get(0);
                if (!toReplace) {
                    system.log('Could not find part to override: ' + partId);
                    continue;
                }
            }

            toReplace.parentNode.replaceChild(replacementParts[partId], toReplace);
        }
    }

    function removePreviousView(context){
        var children = ko.virtualElements.childNodes(context.parent), i, len;

        if(!system.isArray(children)){
            var arrayChildren = [];
            for(i = 0, len = children.length; i < len; i++){
                arrayChildren[i] = children[i];
            }
            children = arrayChildren;
        }

        for(i = 1,len = children.length; i < len; i++){
            ko.removeNode(children[i]);
        }
    }

    function hide(view) {
        ko.utils.domData.set(view, visibilityKey, view.style.display);
        view.style.display = 'none';
    }

    function show(view) {
        var displayStyle = ko.utils.domData.get(view, visibilityKey);
        view.style.display = displayStyle === 'none' ? 'block' : displayStyle;
    }

    function hasComposition(element){
        var dataBind = element.getAttribute('data-bind');
        if(!dataBind){
            return false;
        }

        for(var i = 0, length = composeBindings.length; i < length; i++){
            if(dataBind.indexOf(composeBindings[i]) > -1){
                return true;
            }
        }

        return false;
    }

    /**
     * @class CompositionTransaction
     * @static
     */
    var compositionTransaction = {
        /**
         * Registers a callback which will be invoked when the current composition transaction has completed. The transaction includes all parent and children compositions.
         * @method complete
         * @param {function} callback The callback to be invoked when composition is complete.
         */
        complete: function (callback) {
            compositionCompleteCallbacks.push(callback);
        }
    };

    /**
     * @class CompositionModule
     * @static
     */
    composition = {
        /**
         * An array of all the binding handler names (includeing :) that trigger a composition.
         * @property {string} composeBindings
         * @default ['compose:']
         */
        composeBindings:composeBindings,
        /**
         * Converts a transition name to its moduleId.
         * @method convertTransitionToModuleId
         * @param {string} name The name of the transtion.
         * @return {string} The moduleId.
         */
        convertTransitionToModuleId: function (name) {
            return 'transitions/' + name;
        },
        /**
         * The name of the transition to use in all compositions.
         * @property {string} defaultTransitionName
         * @default null
         */
        defaultTransitionName: null,
        /**
         * Represents the currently executing composition transaction.
         * @property {CompositionTransaction} current
         */
        current: compositionTransaction,
        /**
         * Registers a binding handler that will be invoked when the current composition transaction is complete.
         * @method addBindingHandler
         * @param {string} name The name of the binding handler.
         * @param {object} [config] The binding handler instance. If none is provided, the name will be used to look up an existing handler which will then be converted to a composition handler.
         * @param {function} [initOptionsFactory] If the registered binding needs to return options from its init call back to knockout, this function will server as a factory for those options. It will receive the same parameters that the init function does.
         */
        addBindingHandler:function(name, config, initOptionsFactory){
            var key,
                dataKey = 'composition-handler-' + name,
                handler;

            config = config || ko.bindingHandlers[name];
            initOptionsFactory = initOptionsFactory || function(){ return undefined;  };

            handler = ko.bindingHandlers[name] = {
                init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    if(compositionCount > 0){
                        var data = {
                            trigger:ko.observable(null)
                        };

                        composition.current.complete(function(){
                            if(config.init){
                                config.init(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                            }

                            if(config.update){
                                ko.utils.domData.set(element, dataKey, config);
                                data.trigger('trigger');
                            }
                        });

                        ko.utils.domData.set(element, dataKey, data);
                    }else{
                        ko.utils.domData.set(element, dataKey, config);

                        if(config.init){
                            config.init(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                        }
                    }

                    return initOptionsFactory(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                },
                update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var data = ko.utils.domData.get(element, dataKey);

                    if(data.update){
                        return data.update(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                    }

                    if(data.trigger){
                        data.trigger();
                    }
                }
            };

            for (key in config) {
                if (key !== "init" && key !== "update") {
                    handler[key] = config[key];
                }
            }
        },
        /**
         * Gets an object keyed with all the elements that are replacable parts, found within the supplied elements. The key will be the part name and the value will be the element itself.
         * @method getParts
         * @param {DOMElement\DOMElement[]} elements The element(s) to search for parts.
         * @return {object} An object keyed by part.
         */
        getParts: function(elements, parts) {
            parts = parts || {};

            if (!elements) {
                return parts;
            }

            if (elements.length === undefined) {
                elements = [elements];
            }

            for (var i = 0, length = elements.length; i < length; i++) {
                var element = elements[i],
                    id;

                if (element.getAttribute) {
                    id = element.getAttribute(partAttributeName);
                    if (id) {
                        parts[id] = element;
                    }

                    if (element.hasChildNodes() && !hasComposition(element)) {
                        composition.getParts(element.childNodes, parts);
                    }
                }
            }

            return parts;
        },
        cloneNodes:cloneNodes,
        finalize: function (context, element) {
            if(context.transition === undefined) {
                context.transition = this.defaultTransitionName;
            }

            if(!context.child && !context.activeView){
                if (!context.cacheViews) {
                    ko.virtualElements.emptyNode(context.parent);
                }

                context.triggerAttach(context, element);
                endComposition(context, element);
            } else if (shouldTransition(context)) {
                var transitionModuleId = this.convertTransitionToModuleId(context.transition);

                system.acquire(transitionModuleId).then(function (transition) {
                    context.transition = transition;

                    transition(context).then(function () {
                        if (!context.cacheViews) {
                            if(!context.child){
                                ko.virtualElements.emptyNode(context.parent);
                            }else{
                                removePreviousView(context);
                            }
                        }else if(context.activeView){
                            var instruction = binder.getBindingInstruction(context.activeView);
                            if(instruction && instruction.cacheViews != undefined && !instruction.cacheViews){
                                ko.removeNode(context.activeView);
                            }else{
                                hide(context.activeView);
                            }
                        }

                        if (context.child) {
                            show(context.child);
                        }

                        context.triggerAttach(context, element);
                        endComposition(context, element);
                    });
                }).fail(function(err){
                    onError(context, 'Failed to load transition (' + transitionModuleId + '). Details: ' + err.message, element);
                });
            } else {
                if (context.child != context.activeView) {
                    if (context.cacheViews && context.activeView) {
                        var instruction = binder.getBindingInstruction(context.activeView);
                        if(!instruction || (instruction.cacheViews != undefined && !instruction.cacheViews)){
                            ko.removeNode(context.activeView);
                        }else{
                            hide(context.activeView);
                        }
                    }

                    if (!context.child) {
                        if (!context.cacheViews) {
                            ko.virtualElements.emptyNode(context.parent);
                        }
                    } else {
                        if (!context.cacheViews) {
                            removePreviousView(context);
                        }

                        show(context.child);
                    }
                }

                context.triggerAttach(context, element);
                endComposition(context, element);
            }
        },
        bindAndShow: function (child, element, context, skipActivation) {
            context.child = child;
            context.parent.__composition_context = context;

            if (context.cacheViews) {
                context.composingNewView = (ko.utils.arrayIndexOf(context.viewElements, child) == -1);
            } else {
                context.composingNewView = true;
            }

            tryActivate(context, function () {
                if (context.parent.__composition_context == context) {
                    delete context.parent.__composition_context;

                    if (context.binding) {
                        context.binding(context.child, context.parent, context);
                    }

                    if (context.preserveContext && context.bindingContext) {
                        if (context.composingNewView) {
                            if(context.parts){
                                replaceParts(context);
                            }

                            hide(child);
                            ko.virtualElements.prepend(context.parent, child);

                        binder.bindContext(context.bindingContext, child, context.model, context.as);
                        }
                    } else if (child) {
                        var modelToBind = context.model || dummyModel;
                        var currentModel = ko.dataFor(child);

                        if (currentModel != modelToBind) {
                            if (!context.composingNewView) {
                                ko.removeNode(child);
                                viewEngine.createView(child.getAttribute('data-view')).then(function(recreatedView) {
                                    composition.bindAndShow(recreatedView, element, context, true);
                                });
                                return;
                            }

                            if(context.parts){
                                replaceParts(context);
                            }

                            hide(child);
                            ko.virtualElements.prepend(context.parent, child);

                            binder.bind(modelToBind, child);
                        }
                    }

                    composition.finalize(context, element);
                } else {
                    endComposition(context, element);
                }
            }, skipActivation, element);
        },
        /**
         * Eecutes the default view location strategy.
         * @method defaultStrategy
         * @param {object} context The composition context containing the model and possibly existing viewElements.
         * @return {promise} A promise for the view.
         */
        defaultStrategy: function (context) {
            return viewLocator.locateViewForObject(context.model, context.area, context.viewElements);
        },
        getSettings: function (valueAccessor, element) {
            var value = valueAccessor(),
                settings = ko.utils.unwrapObservable(value) || {},
                activatorPresent = activator.isActivator(value),
                moduleId;

            if (system.isString(settings)) {
                if (viewEngine.isViewUrl(settings)) {
                    settings = {
                        view: settings
                    };
                } else {
                    settings = {
                        model: settings,
                        activate: !activatorPresent
                    };
                }

                return settings;
            }

            moduleId = system.getModuleId(settings);
            if (moduleId) {
                settings = {
                    model: settings,
                    activate: !activatorPresent
                };

                return settings;
            }

            if(!activatorPresent && settings.model) {
                activatorPresent = activator.isActivator(settings.model);
            }

            for (var attrName in settings) {
                if (ko.utils.arrayIndexOf(bindableSettings, attrName) != -1) {
                    settings[attrName] = ko.utils.unwrapObservable(settings[attrName]);
                } else {
                    settings[attrName] = settings[attrName];
                }
            }

            if (activatorPresent) {
                settings.activate = false;
            } else if (settings.activate === undefined) {
                settings.activate = true;
            }

            return settings;
        },
        executeStrategy: function (context, element) {
            context.strategy(context).then(function (child) {
                composition.bindAndShow(child, element, context);
            });
        },
        inject: function (context, element) {
            if (!context.model) {
                this.bindAndShow(null, element, context);
                return;
            }

            if (context.view) {
                viewLocator.locateView(context.view, context.area, context.viewElements).then(function (child) {
                    composition.bindAndShow(child, element, context);
                });
                return;
            }

            if (!context.strategy) {
                context.strategy = this.defaultStrategy;
            }

            if (system.isString(context.strategy)) {
                system.acquire(context.strategy).then(function (strategy) {
                    context.strategy = strategy;
                    composition.executeStrategy(context, element);
                }).fail(function (err) {
                    onError(context, 'Failed to load view strategy (' + context.strategy + '). Details: ' + err.message, element);
                });
            } else {
                this.executeStrategy(context, element);
            }
        },
        /**
         * Initiates a composition.
         * @method compose
         * @param {DOMElement} element The DOMElement or knockout virtual element that serves as the parent for the composition.
         * @param {object} settings The composition settings.
         * @param {object} [bindingContext] The current binding context.
         */
        compose: function (element, settings, bindingContext, fromBinding) {
            compositionCount++;

            if(!fromBinding){
                settings = composition.getSettings(function() { return settings; }, element);
            }

            if (settings.compositionComplete) {
                compositionCompleteCallbacks.push(function () {
                    settings.compositionComplete(settings.child, settings.parent, settings);
                });
            }

            compositionCompleteCallbacks.push(function () {
                if(settings.composingNewView && settings.model && settings.model.compositionComplete){
                    settings.model.compositionComplete(settings.child, settings.parent, settings);
                }
            });

            var hostState = getHostState(element);

            settings.activeView = hostState.activeView;
            settings.parent = element;
            settings.triggerAttach = triggerAttach;
            settings.bindingContext = bindingContext;

            if (settings.cacheViews && !settings.viewElements) {
                settings.viewElements = hostState.childElements;
            }

            if (!settings.model) {
                if (!settings.view) {
                    this.bindAndShow(null, element, settings);
                } else {
                    settings.area = settings.area || 'partial';
                    settings.preserveContext = true;

                    viewLocator.locateView(settings.view, settings.area, settings.viewElements).then(function (child) {
                        composition.bindAndShow(child, element, settings);
                    });
                }
            } else if (system.isString(settings.model)) {
                system.acquire(settings.model).then(function (module) {
                    settings.model = system.resolveObject(module);
                    composition.inject(settings, element);
                }).fail(function (err) {
                    onError(settings, 'Failed to load composed module (' + settings.model + '). Details: ' + err.message, element);
                });
            } else {
                composition.inject(settings, element);
            }
        }
    };

    ko.bindingHandlers.compose = {
        init: function() {
            return { controlsDescendantBindings: true };
        },
        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var settings = composition.getSettings(valueAccessor, element);
            if(settings.mode){
                var data = ko.utils.domData.get(element, compositionDataKey);
                if(!data){
                    var childNodes = ko.virtualElements.childNodes(element);
                    data = {};

                    if(settings.mode === 'inline'){
                        data.view = viewEngine.ensureSingleElement(childNodes);
                    }else if(settings.mode === 'templated'){
                        data.parts = cloneNodes(childNodes);
                    }

                    ko.virtualElements.emptyNode(element);
                    ko.utils.domData.set(element, compositionDataKey, data);
                }

                if(settings.mode === 'inline'){
                    settings.view = data.view.cloneNode(true);
                }else if(settings.mode === 'templated'){
                    settings.parts = data.parts;
                }

                settings.preserveContext = true;
            }

            composition.compose(element, settings, bindingContext, true);
        }
    };

    ko.virtualElements.allowedBindings.compose = true;

    return composition;
});

/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * Durandal events originate from backbone.js but also combine some ideas from signals.js as well as some additional improvements.
 * Events can be installed into any object and are installed into the `app` module by default for convenient app-wide eventing.
 * @module events
 * @requires system
 */
define('durandal/events',['durandal/system'], function (system) {
    var eventSplitter = /\s+/;
    var Events = function() { };

    /**
     * Represents an event subscription.
     * @class Subscription
     */
    var Subscription = function(owner, events) {
        this.owner = owner;
        this.events = events;
    };

    /**
     * Attaches a callback to the event subscription.
     * @method then
     * @param {function} callback The callback function to invoke when the event is triggered.
     * @param {object} [context] An object to use as `this` when invoking the `callback`.
     * @chainable
     */
    Subscription.prototype.then = function (callback, context) {
        this.callback = callback || this.callback;
        this.context = context || this.context;
        
        if (!this.callback) {
            return this;
        }

        this.owner.on(this.events, this.callback, this.context);
        return this;
    };

    /**
     * Attaches a callback to the event subscription.
     * @method on
     * @param {function} [callback] The callback function to invoke when the event is triggered. If `callback` is not provided, the previous callback will be re-activated.
     * @param {object} [context] An object to use as `this` when invoking the `callback`.
     * @chainable
     */
    Subscription.prototype.on = Subscription.prototype.then;

    /**
     * Cancels the subscription.
     * @method off
     * @chainable
     */
    Subscription.prototype.off = function () {
        this.owner.off(this.events, this.callback, this.context);
        return this;
    };

    /**
     * Creates an object with eventing capabilities.
     * @class Events
     */

    /**
     * Creates a subscription or registers a callback for the specified event.
     * @method on
     * @param {string} events One or more events, separated by white space.
     * @param {function} [callback] The callback function to invoke when the event is triggered. If `callback` is not provided, a subscription instance is returned.
     * @param {object} [context] An object to use as `this` when invoking the `callback`.
     * @return {Subscription|Events} A subscription is returned if no callback is supplied, otherwise the events object is returned for chaining.
     */
    Events.prototype.on = function(events, callback, context) {
        var calls, event, list;

        if (!callback) {
            return new Subscription(this, events);
        } else {
            calls = this.callbacks || (this.callbacks = {});
            events = events.split(eventSplitter);

            while (event = events.shift()) {
                list = calls[event] || (calls[event] = []);
                list.push(callback, context);
            }

            return this;
        }
    };

    /**
     * Removes the callbacks for the specified events.
     * @method off
     * @param {string} [events] One or more events, separated by white space to turn off. If no events are specified, then the callbacks will be removed.
     * @param {function} [callback] The callback function to remove. If `callback` is not provided, all callbacks for the specified events will be removed.
     * @param {object} [context] The object that was used as `this`. Callbacks with this context will be removed.
     * @chainable
     */
    Events.prototype.off = function(events, callback, context) {
        var event, calls, list, i;

        // No events
        if (!(calls = this.callbacks)) {
            return this;
        }

        //removing all
        if (!(events || callback || context)) {
            delete this.callbacks;
            return this;
        }

        events = events ? events.split(eventSplitter) : system.keys(calls);

        // Loop through the callback list, splicing where appropriate.
        while (event = events.shift()) {
            if (!(list = calls[event]) || !(callback || context)) {
                delete calls[event];
                continue;
            }

            for (i = list.length - 2; i >= 0; i -= 2) {
                if (!(callback && list[i] !== callback || context && list[i + 1] !== context)) {
                    list.splice(i, 2);
                }
            }
        }

        return this;
    };

    /**
     * Triggers the specified events.
     * @method trigger
     * @param {string} [events] One or more events, separated by white space to trigger.
     * @chainable
     */
    Events.prototype.trigger = function(events) {
        var event, calls, list, i, length, args, all, rest;
        if (!(calls = this.callbacks)) {
            return this;
        }

        rest = [];
        events = events.split(eventSplitter);
        for (i = 1, length = arguments.length; i < length; i++) {
            rest[i - 1] = arguments[i];
        }

        // For each event, walk through the list of callbacks twice, first to
        // trigger the event, then to trigger any `"all"` callbacks.
        while (event = events.shift()) {
            // Copy callback lists to prevent modification.
            if (all = calls.all) {
                all = all.slice();
            }

            if (list = calls[event]) {
                list = list.slice();
            }

            // Execute event callbacks.
            if (list) {
                for (i = 0, length = list.length; i < length; i += 2) {
                    list[i].apply(list[i + 1] || this, rest);
                }
            }

            // Execute "all" callbacks.
            if (all) {
                args = [event].concat(rest);
                for (i = 0, length = all.length; i < length; i += 2) {
                    all[i].apply(all[i + 1] || this, args);
                }
            }
        }

        return this;
    };

    /**
     * Creates a function that will trigger the specified events when called. Simplifies proxying jQuery (or other) events through to the events object.
     * @method proxy
     * @param {string} events One or more events, separated by white space to trigger by invoking the returned function.
     * @return {function} Calling the function will invoke the previously specified events on the events object.
     */
    Events.prototype.proxy = function(events) {
        var that = this;
        return (function(arg) {
            that.trigger(events, arg);
        });
    };

    /**
     * Creates an object with eventing capabilities.
     * @class EventsModule
     * @static
     */

    /**
     * Adds eventing capabilities to the specified object.
     * @method includeIn
     * @param {object} targetObject The object to add eventing capabilities to.
     */
    Events.includeIn = function(targetObject) {
        targetObject.on = Events.prototype.on;
        targetObject.off = Events.prototype.off;
        targetObject.trigger = Events.prototype.trigger;
        targetObject.proxy = Events.prototype.proxy;
    };

    return Events;
});

/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * The app module controls app startup, plugin loading/configuration and root visual display.
 * @module app
 * @requires system
 * @requires viewEngine
 * @requires composition
 * @requires events
 * @requires jquery
 */
define('durandal/app',['durandal/system', 'durandal/viewEngine', 'durandal/composition', 'durandal/events', 'jquery'], function(system, viewEngine, composition, Events, $) {
    var app,
        allPluginIds = [],
        allPluginConfigs = [];

    function loadPlugins(){
        return system.defer(function(dfd){
            if(allPluginIds.length == 0){
                dfd.resolve();
                return;
            }

            system.acquire(allPluginIds).then(function(loaded){
                for(var i = 0; i < loaded.length; i++){
                    var currentModule = loaded[i];

                    if(currentModule.install){
                        var config = allPluginConfigs[i];
                        if(!system.isObject(config)){
                            config = {};
                        }

                        currentModule.install(config);
                        system.log('Plugin:Installed ' + allPluginIds[i]);
                    }else{
                        system.log('Plugin:Loaded ' + allPluginIds[i]);
                    }
                }

                dfd.resolve();
            }).fail(function(err){
                system.error('Failed to load plugin(s). Details: ' + err.message);
            });
        }).promise();
    }

    /**
     * @class AppModule
     * @static
     * @uses Events
     */
    app = {
        /**
         * The title of your application.
         * @property {string} title
         */
        title: 'Application',
        /**
         * Configures one or more plugins to be loaded and installed into the application.
         * @method configurePlugins
         * @param {object} config Keys are plugin names. Values can be truthy, to simply install the plugin, or a configuration object to pass to the plugin.
         * @param {string} [baseUrl] The base url to load the plugins from.
         */
        configurePlugins:function(config, baseUrl){
            var pluginIds = system.keys(config);
            baseUrl = baseUrl || 'plugins/';

            if(baseUrl.indexOf('/', baseUrl.length - 1) === -1){
                baseUrl += '/';
            }

            for(var i = 0; i < pluginIds.length; i++){
                var key = pluginIds[i];
                allPluginIds.push(baseUrl + key);
                allPluginConfigs.push(config[key]);
            }
        },
        /**
         * Starts the application.
         * @method start
         * @return {promise}
         */
        start: function() {
            system.log('Application:Starting');

            if (this.title) {
                document.title = this.title;
            }

            return system.defer(function (dfd) {
                $(function() {
                    loadPlugins().then(function(){
                        dfd.resolve();
                        system.log('Application:Started');
                    });
                });
            }).promise();
        },
        /**
         * Sets the root module/view for the application.
         * @method setRoot
         * @param {string} root The root view or module.
         * @param {string} [transition] The transition to use from the previous root (or splash screen) into the new root.
         * @param {string} [applicationHost] The application host element or id. By default the id 'applicationHost' will be used.
         */
        setRoot: function(root, transition, applicationHost) {
            var hostElement, settings = { activate:true, transition: transition };

            if (!applicationHost || system.isString(applicationHost)) {
                hostElement = document.getElementById(applicationHost || 'applicationHost');
            } else {
                hostElement = applicationHost;
            }

            if (system.isString(root)) {
                if (viewEngine.isViewUrl(root)) {
                    settings.view = root;
                } else {
                    settings.model = root;
                }
            } else {
                settings.model = root;
            }

            function finishComposition() {
                if(settings.model) {
                    if (settings.model.canActivate) {
                        try {
                            var result = settings.model.canActivate();
                            if (result && result.then) {
                                result.then(function (actualResult) {
                                    if (actualResult) {
                                        composition.compose(hostElement, settings);
                                    }
                                }).fail(function (err) {
                                    system.error(err);
                                });
                            } else if (result) {
                                composition.compose(hostElement, settings);
                            }
                        } catch (er) {
                            system.error(er);
                        }
                    } else {
                        composition.compose(hostElement, settings);
                    }
                } else {
                    composition.compose(hostElement, settings);
                }
            }

            if(system.isString(settings.model)) {
                system.acquire(settings.model).then(function(module) {
                    settings.model = system.resolveObject(module);
                    finishComposition();
                }).fail(function(err) {
                    system.error('Failed to load root module (' + settings.model + '). Details: ' + err.message);
                });
            } else {
                finishComposition();
            }
        }
    };

    Events.includeIn(app);

    return app;
});

// Maps the files so Durandal knows where to find these.
require.config({
    wrapShim: true,
    baseUrl: 'app',
    paths: {
        'text': '../lib/text',
        'durandal': '../lib/durandal',
        "d3": "../lib/d3",
        'plugins': '../lib/durandal/plugins',
        'transitions': '../lib/durandal/transitions',
        "lodash": '../lib/lodash',
        "signalR": '../lib/jquery.signalr',
        "knockout-mapping": '../lib/knockout.mapping'//,
        //"moment": "../lib/moment"
        //"bootstrap-treeview": "../lib/bootstrap-treeview/src/js/bootstrap-treeview"
    }
});

// Durandal 2.x assumes no global libraries. It will ship expecting 
// Knockout and jQuery to be defined with requirejs. .NET 
// templates by default will set them up as standard script
// libs and then register them with require as follows: 
define('jquery', [],function() {
     return jQuery;
}); // of unknown reasons jQuery has to be wraped in a function!?
define('knockout', ko);

require(['durandal/app', 'durandal/viewLocator', 'durandal/system'],
    function (app, viewLocator, system) {

        // Enable debug message to show in the console 
        system.debug(true);

        app.title = 'Artskart 2';

        app.configurePlugins({
            router: true,
            widget: true,
            dialog: true
        });

        app.start().then(function () {
            // When finding a viewmodel module, replace the viewmodel string 
            // with view to find it partner view.
            // [viewmodel]s/sessions --> [view]s/sessions.html
            // Defaults to viewmodels/views/views. 
            // Otherwise you can pass paths for modules, views, partials
            viewLocator.useConvention();

            app.on('main:resized').then(function (elem) {
                if (console.log && elem) {
                    console.log("Main div resized! - New size: height: " + elem.clientHeight + " width: " + elem.clientWidth);
                }
            });

            //Show the app by setting the root view model for our application.
            app.setRoot('viewmodels/shell', 'entrance');
        });
    });

define("main", function(){});

define('services/adbFuncs',[], function () {
    "use strict";
    var
        createObject = function (o) {
            function F() { }
            F.prototype = o;
            return new F();
        },
        extendWithGoodParts = function () {
            var _slice = Array.prototype.slice;
            Function.prototype.method = function (name, func) {
                if (!this.prototype[name]) {
                    this.prototype[name] = func;
                    return this;
                }
            };

            if (typeof Object.create !== 'function') {
                //Object.create = function (o) {
                //    function F() { }
                //    F.prototype = o;
                //    return new F();
                //};
                Object.create = createObject;
            }
            Function.method('inherits', function (Parent) {
                this.prototype = new Parent();
                return this;
            });

            Object.method('superior', function (name) {
                var that = this,
                    method = that[name];
                return function () {
                    return method.apply(that, arguments);
                };
            });


            Function.method('curry', function () {
                var args = _slice.apply(arguments),
                    that = this;
                return function () {
                    return that.apply(null, args.concat(arguments));
                };
            });

            Function.method('bind', function (thisObj) {
                if (typeof this !== "function") {
                    // closest thing possible to the ECMAScript 5 internal IsCallable function
                    throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
                }
                var args = _slice.call(arguments, 1),
                    fToBind = this,
                    Noop = function () { },
                    fBound = function () {
                        return fToBind.apply(this instanceof Noop && thisObj
                                ? this
                                : thisObj,
                                args.concat(_slice.call(arguments)));
                    };

                Noop.prototype = this.prototype;
                fBound.prototype = new Noop();

                return fBound;
            });

            // returns a new function that calls the original function with its first argument set to this(!).
            Function.method('methodize', function () {
                if (!this._methodized) {
                    var __method = this;
                    this._methodized = function () {
                        return __method.apply(null, [this].concat(_slice.call(arguments)));
                    };
                }
                return this._methodized;
            });

            Function.method('functionize', function () {
                if (!this._functionized) {
                    var __method = this;
                    this._functionized = function () {
                        var args = _slice.call(arguments);
                        return __method.apply(args.shift(), args);
                    };
                }
                return this._functionized;
            });

            //var momoizer = function (memo, fundamental) {
            //    function shell(n) {
            //        var result = memo[n];
            //        if (typeof result !== 'number') {
            //            result = fundamental(shell, n);
            //            memo[n] = result;
            //        }
            //        return result;
            //    }
            //    return shell;
            //};

            Number.method('integer', function () {
                return Math[this < 0 ? 'ceil' : 'floor'](this);
            });

            Number.method('clamp', function (min, max) {
                return Math.min(Math.max(this, min), max);
            });

            String.method('trim', function () {
                return this.replace(/^\s+|\s+$/g, '');
            });

        },

        isArray = function (obj) {
            var type = Object.prototype.toString.call(obj);
            return (type === '[object Array]');
            // in future, for newer browsers, use one of
            // return Array.isArray(obj);
            // return (v instanceof Array);
        },
        contains = function (arr, s) {
            var r, i;
            r = false;
            i = arr.length;
            while (i--) {
                if (arr[i] === s) {
                    r = true;
                    i = 0;
                }
            }
            return r;
        },
        foreach = function (arr, action) {
            var i,
                l = arr.length;
            for (i = 0; i < l; i++) {
                action(arr[i], i);
            }
        },
        map = function (arr, transform) {
            var result = [];
            foreach(arr, function (item) {
                result.push(transform(item));
            });
            return result;
        },
        filter = function (arr, predicate) {
            var result = [];
            foreach(arr, function (item) {
                if (predicate(item)) {
                    result.push(item);
                }
            });
            return result;
        },
        filterEmpties = function (arr) {
            return filter(arr, function(item) {
                 return !!item;
            });
        },
        reduce = function (compare, acc, arr) {
            foreach(arr, function (item) {
                acc = compare(acc, item);
            });
            return acc;
        },

        // string functions 
        firstToUpperCase = function (str) {
            if (str) {
                return str.substr(0, 1).toUpperCase() + str.substr(1);
            }
            return "";
        },
        stringContainsAny = function (str, arr) {
            var i,
                arrlength = arr.length;
            for (i = 0; i < arrlength; i++) {
                if (str.indexOf(arr[i]) > -1) {
                    return true;
                }
            }
            return false;
        },

        isValidUrl = function(str) {
            var pattern = new RegExp('^(https?:\\/\\/)?' + // protocol
             '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|' + // domain name
             '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
             '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
             '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
             '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator
            return pattern.test(str);
        },
        // end string functions 

        getPropertyName = function (obj, caseInsensitiveName) {  // returns the first property name with correct case
            var
                name,
                oName,
                iName = caseInsensitiveName.toLowerCase();
            for (name in obj) {
                if (obj.hasOwnProperty(name)) {
                    oName = name.toLowerCase();
                    if (iName === oName) {
                        return name;
                    }
                }
            }
            return undefined;
        },
        // Warning: A problem with this (and the angular one) is that minification can make problems by renaming the function arguments!
        parameterNameList = function (func) {   // en bedre en her? : https://github.com/angular/angular.js/blob/master/src/auto/injector.js
            var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m,
                FN_ARG_SPLIT = /,/,
                FN_ARG = /^\s*(_?)(\S+?)\1\s*$/,
                STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg,
                args = [],
                funcText = func.toString().replace(STRIP_COMMENTS, ''),
                argDecl = funcText.match(FN_ARGS),
                r = argDecl[1].split(FN_ARG_SPLIT),
                a,
                pushArg = function(all, underscore, name) {
                     args.push(name);
                };
            for (a in r) {
                r[a].replace(FN_ARG, pushArg);
            }
            return args;
        },
        toggleArrayItem = function (array, item, onOff) { // the optional onOff just sets the item (no toggle)
            var isObservable = !!array.__ko_proto__,
                arr = isObservable ? array() : array,
                index = arr.indexOf(item),
                hit = index >= 0,
                arrayChanged = false,
                oO = onOff === undefined ? !hit : onOff;
            if (oO && !hit) {
                arr.push(item);
                arrayChanged = true;
            } else if (!oO && hit) {
                arr.splice(index, 1);
                arrayChanged = true;
            }
            if (isObservable && arrayChanged) {
                array.valueHasMutated();
            }
            return !hit; // returns true if the item is set, false when the item is removed
        },
        toDictionary = function (arr, keyName) { // that is: convert array to object
            var dict = {};
            keyName = keyName || "id";
            foreach(arr, function (item) {
                dict[item[keyName]] = item;
            });
            return dict;
        };

    
        function deleteNullProperties(obj, recurse) {
            var key,
                value,
                ownprop;
            for (key in obj) {
                ownprop = obj.hasOwnProperty(key);
                if (ownprop) {
                    value = obj[key];
                    if (value === null) {
                        delete obj[key];
                    } else if (recurse && typeof value === 'object') {
                        deleteNullProperties(value);   //recurse
                    }
                }
            }
        }
        // Check if the array has a term in a given language and return the number of the element in the array that has this language 
        function containsLanguage(nameList, lang) {
            var index = -1;
            for (var i = 0; i < nameList.length; i++) {
                if (nameList[i].Lang == lang) {
                    index = i;
                }
            }
            return index;
        };

    function getPopularName(taxon, language, replace) {
            var names = eval(taxon.PopularNames);
            var popularname = '';
            var missingname = replace ? (taxon.ScientificName || '') : '' ;

        if (names == undefined || names.length == 0) {
            if (taxon.PopularName != null) {
                // check if the taxon has a popular name
                popularname = firstToUpperCase(taxon.PopularName);
            } else {
                // if there are no popular names, show scientific name or an empty string
                    popularname = missingname;
                    }
            }
            else {
            if (language == 'nb-NO') {
                // check if there is a bokmal term; if not, return scientific name
                if (containsLanguage(names, 'nb-NO') >= 0) {
                    popularname = firstToUpperCase(names[containsLanguage(names, 'nb-NO')].Name || '');
                }
                else {
                    popularname = missingname;
                }
            }
            else if (language == 'nn-NO') {
                // check if there is a nynorsk term; if not, try to return bokmål and then scientific
                if (containsLanguage(names, 'nn-NO') >= 0) {
                    popularname = firstToUpperCase(names[containsLanguage(names, 'nn-NO')].Name || '');
                }
                else if (containsLanguage(names, 'nb-NO') >= 0) {
                    popularname = firstToUpperCase(names[containsLanguage(names, 'nb-NO')].Name || '');
                }
                else {
                    popularname = missingname;
                }
            }
            else if (language == 'se-NO') {
                // check if there is a sami term; if not, try to return bokmål and then scientific 
                if (containsLanguage(names, 'se-NO') >= 0) {
                    popularname = firstToUpperCase(names[containsLanguage(names, 'se-NO')].Name || '');
                }
                else if (containsLanguage(names, 'nb-NO') >= 0) {
                    popularname = firstToUpperCase(names[containsLanguage(names, 'nb-NO')].Name || '');
                }
                else {
                    popularname = missingname;
                }
            } else {
                // set scientific names if the GUI language is English
                popularname = missingname;
                }
            }
            
            return popularname;
        }

        return {
            extendWithGoodParts: extendWithGoodParts,
            createObject: createObject,
            isArray: isArray,
            contains: contains,
            foreach: foreach,
            filter: filter,
            map: map,
            reduce: reduce,
            filterEmpties: filterEmpties, 
            getPropertyName: getPropertyName,
            getParameterNameList: parameterNameList,
            toggleArrayItem: toggleArrayItem,
            toDictionary: toDictionary,
            deleteNullProperties: deleteNullProperties,
            firstToUpperCase: firstToUpperCase,
            stringContainsAny: stringContainsAny,
            isValidUrl: isValidUrl,
            getPopularName: getPopularName
        };
    });

/**
 * @license
 * lodash 4.0.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash -d -o ./lodash.js`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.0.1';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256,
      FLIP_FLAG = 512;

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

  /** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0x/i;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
      rsComboSymbolsRange = '\\u20d0-\\u20f0',
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsQuoteRange = '\\u2018\\u2019\\u201c\\u201d',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

  /** Used to match non-compound words composed of alphanumeric characters. */
  var reBasicWord = /[a-zA-Z0-9]+/g;

  /** Used to match complex or compound words. */
  var reComplexWord = RegExp([
    rsUpper + '?' + rsLower + '+(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsUpperMisc + '+(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
    rsUpper + '?' + rsLowerMisc + '+',
    rsUpper + '+',
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasComplexWord = /[a-z][A-Z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function',
    'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_',
    'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[mapTag] = cloneableTags[numberTag] =
  cloneableTags[objectTag] = cloneableTags[regexpTag] =
  cloneableTags[setTag] = cloneableTags[stringTag] =
  cloneableTags[symbolTag] = cloneableTags[uint8Tag] =
  cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] =
  cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `exports`. */
  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType) ? exports : null;

  /** Detect free variable `module`. */
  var freeModule = (objectTypes[typeof module] && module && !module.nodeType) ? module : null;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

  /** Detect free variable `self`. */
  var freeSelf = checkGlobal(objectTypes[typeof self] && self);

  /** Detect free variable `window`. */
  var freeWindow = checkGlobal(objectTypes[typeof window] && window);

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = (freeModule && freeModule.exports === freeExports) ? freeExports : null;

  /** Detect `this` as the global object. */
  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) || freeSelf || thisGlobal || Function('return this')();

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    var length = args ? args.length : 0;
    switch (length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * Creates a new array concatenating `array` with `other`.
   *
   * @private
   * @param {Array} array The first array to concatenate.
   * @param {Array} other The second array to concatenate.
   * @returns {Array} Returns the new concatenated array.
   */
  function arrayConcat(array, other) {
    var index = -1,
        length = array.length,
        othIndex = -1,
        othLength = other.length,
        result = Array(length + othLength);

    while (++index < length) {
      result[index] = array[index];
    }
    while (++othIndex < othLength) {
      result[index++] = other[othIndex];
    }
    return result;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[++resIndex] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    return !!array.length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * A specialized version of `_.includesWith` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * The base implementation of methods like `_.max` and `_.min` which accepts a
   * `comparator` to determine the extremum value.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The iteratee invoked per iteration.
   * @param {Function} comparator The comparator used to compare values.
   * @returns {*} Returns the extremum value.
   */
  function baseExtremum(array, iteratee, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      var value = array[index],
          current = iteratee(value);

      if (current != null && (computed === undefined
            ? current === current
            : comparator(current, computed)
          )) {
        var computed = current,
            result = value;
      }
    }
    return result;
  }

  /**
   * The base implementation of methods like `_.find` and `_.findKey`, without
   * support for iteratee shorthands, which iterates over `collection` using
   * `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @param {boolean} [retKey] Specify returning the key of the found element instead of the element itself.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFind(collection, predicate, eachFunc, retKey) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = retKey ? key : value;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define
   * the sort order of `array` and replaces criteria objects with their
   * corresponding values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` without support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the new array of key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing wrapper metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Checks if `value` is a global object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {null|Object} Returns `value` if it's a global object, else `null`.
   */
  function checkGlobal(value) {
    return (value && value.Object === Object) ? value : null;
  }

  /**
   * Compares values to sort them in ascending order.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function compareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * Used by `_.orderBy` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
   * specify an order of "desc" for descending or "asc" for ascending sort order
   * of corresponding values.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]|string[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = compareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * (order == 'desc' ? -1 : 1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is a host object in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
   */
  function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return value > -1 && value % 1 == 0 && value < length;
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to an array.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the converted array.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the converted array.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    if (!(string && reHasComplexSymbol.test(string))) {
      return string.length;
    }
    var result = reComplexSymbol.lastIndex = 0;
    while (reComplexSymbol.test(string)) {
      result++;
    }
    return result;
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return string.match(reComplexSymbol);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;

    /** Built-in constructor references. */
    var Date = context.Date,
        Error = context.Error,
        Math = context.Math,
        RegExp = context.RegExp,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = context.Array.prototype,
        objectProto = context.Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = context.Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Reflect = context.Reflect,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        clearTimeout = context.clearTimeout,
        enumerate = Reflect ? Reflect.enumerate : undefined,
        getPrototypeOf = Object.getPrototypeOf,
        getOwnPropertySymbols = Object.getOwnPropertySymbols,
        iteratorSymbol = typeof (iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        setTimeout = context.setTimeout,
        splice = arrayProto.splice;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = Object.keys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var Map = getNative(context, 'Map'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to detect maps and sets. */
    var mapCtorString = Map ? funcToString.call(Map) : '',
        setCtorString = Set ? funcToString.call(Set) : '';

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = Symbol ? symbolProto.valueOf : undefined,
        symbolToString = Symbol ? symbolProto.toString : undefined;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chaining. Methods that operate on and return arrays, collections, and
     * functions can be chained together. Methods that retrieve a single value or
     * may return a primitive value will automatically end the chain sequence and
     * return the unwrapped value. Otherwise, the value must be unwrapped with
     * `_#value`.
     *
     * Explicit chaining, which must be unwrapped with `_#value` in all cases,
     * may be enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization to merge iteratee calls; this avoids the creation
     * of intermediate arrays and can greatly reduce the number of iteratee executions.
     * Sections of a chain sequence qualify for shortcut fusion if the section is
     * applied to an array of at least two hundred elements and any iteratees
     * accept only one argument. The heuristic for whether a section qualifies
     * for shortcut fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`,
     * `at`, `before`, `bind`, `bindAll`, `bindKey`, `chain`, `chunk`, `commit`,
     * `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`, `curry`,
     * `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`, `difference`,
     * `differenceBy`, `differenceWith`, `drop`, `dropRight`, `dropRightWhile`,
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flip`, `flow`,
     * `flowRight`, `fromPairs`, `functions`, `functionsIn`, `groupBy`, `initial`,
     * `intersection`, `intersectionBy`, `intersectionWith`, `invert`, `invokeMap`,
     * `iteratee`, `keyBy`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`,
     * `matches`, `matchesProperty`, `memoize`, `merge`, `mergeWith`, `method`,
     * `methodOf`, `mixin`, `negate`, `nthArg`, `omit`, `omitBy`, `once`, `orderBy`,
     * `over`, `overArgs`, `overEvery`, `overSome`, `partial`, `partialRight`,
     * `partition`, `pick`, `pickBy`, `plant`, `property`, `propertyOf`, `pull`,
     * `pullAll`, `pullAllBy`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`,
     * `reject`, `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`,
     * `shuffle`, `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`,
     * `takeRight`, `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`,
     * `toArray`, `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`,
     * `unary`, `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`,
     * `unset`, `unshift`, `unzip`, `unzipWith`, `values`, `valuesIn`, `without`,
     * `wrap`, `xor`, `xorBy`, `xorWith`, `zip`, `zipObject`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `endsWith`, `eq`,
     * `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`,
     * `findLast`, `findLastIndex`, `findLastKey`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayLike`, `isArrayLikeObject`, `isBoolean`,
     * `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`, `isError`,
     * `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMatch`, `isMatchWith`,
     * `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`, `isObject`, `isObjectLike`,
     * `isPlainObject`, `isRegExp`, `isSafeInteger`, `isString`, `isUndefined`,
     * `isTypedArray`, `join`, `kebabCase`, `last`, `lastIndexOf`, `lowerCase`,
     * `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `min`, `minBy`,
     * `noConflict`, `noop`, `now`, `pad`, `padEnd`, `padStart`, `parseInt`,
     * `pop`, `random`, `reduce`, `reduceRight`, `repeat`, `result`, `round`,
     * `runInContext`, `sample`, `shift`, `size`, `snakeCase`, `some`, `sortedIndex`,
     * `sortedIndexBy`, `sortedLastIndex`, `sortedLastIndexBy`, `startCase`,
     * `startsWith`, `subtract`, `sum`, `sumBy`, `template`, `times`, `toLower`,
     * `toInteger`, `toLength`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`,
     * `trim`, `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`,
     * `upperCase`, `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an hash object.
     *
     * @private
     * @returns {Object} Returns the new hash object.
     */
    function Hash() {}

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(hash, key) {
      return hashHas(hash, key) && delete hash[key];
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @param {Object} hash The hash to query.
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(hash, key) {
      if (nativeCreate) {
        var result = hash[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @param {Object} hash The hash to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(hash, key) {
      return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     */
    function hashSet(hash, key, value) {
      hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function MapCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.clear();
      while (++index < length) {
        var entry = values[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapClear() {
      this.__data__ = { 'hash': new Hash, 'map': Map ? new Map : [], 'string': new Hash };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapDelete(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map['delete'](key) : assocDelete(data.map, key);
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapGet(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashGet(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map.get(key) : assocGet(data.map, key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashHas(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map.has(key) : assocHas(data.map, key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache object.
     */
    function mapSet(key, value) {
      var data = this.__data__;
      if (isKeyable(key)) {
        hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
      } else if (Map) {
        data.map.set(key, value);
      } else {
        assocSet(data.map, key, value);
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a set cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.push(values[index]);
      }
    }

    /**
     * Checks if `value` is in `cache`.
     *
     * @private
     * @param {Object} cache The set cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function cacheHas(cache, value) {
      var map = cache.__data__;
      if (isKeyable(value)) {
        var data = map.__data__,
            hash = typeof value == 'string' ? data.string : data.hash;

        return hash[value] === HASH_UNDEFINED;
      }
      return map.has(value);
    }

    /**
     * Adds `value` to the set cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var map = this.__data__;
      if (isKeyable(value)) {
        var data = map.__data__,
            hash = typeof value == 'string' ? data.string : data.hash;

        hash[value] = HASH_UNDEFINED;
      }
      else {
        map.set(value, HASH_UNDEFINED);
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function Stack(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.clear();
      while (++index < length) {
        var entry = values[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = { 'array': [], 'map': null };
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocDelete(array, key) : data.map['delete'](key);
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocGet(array, key) : data.map.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocHas(array, key) : data.map.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache object.
     */
    function stackSet(key, value) {
      var data = this.__data__,
          array = data.array;

      if (array) {
        if (array.length < (LARGE_ARRAY_SIZE - 1)) {
          assocSet(array, key, value);
        } else {
          data.array = null;
          data.map = new MapCache(array);
        }
      }
      var map = data.map;
      if (map) {
        map.set(key, value);
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Removes `key` and its value from the associative array.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function assocDelete(array, key) {
      var index = assocIndexOf(array, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = array.length - 1;
      if (index == lastIndex) {
        array.pop();
      } else {
        splice.call(array, index, 1);
      }
      return true;
    }

    /**
     * Gets the associative array value for `key`.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function assocGet(array, key) {
      var index = assocIndexOf(array, key);
      return index < 0 ? undefined : array[index][1];
    }

    /**
     * Checks if an associative array value for `key` exists.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function assocHas(array, key) {
      return assocIndexOf(array, key) > -1;
    }

    /**
     * Gets the index at which the first occurrence of `key` is found in `array`
     * of key-value pairs.
     *
     * @private
     * @param {Array} array The array to search.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Sets the associative array `key` to `value`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     */
    function assocSet(array, key, value) {
      var index = assocIndexOf(array, key);
      if (index < 0) {
        array.push([key, value]);
      } else {
        array[index][1] = value;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function assignInDefaults(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * This function is like `assignValue` except that it doesn't assign `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (typeof key == 'number' && value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if ((!eq(objValue, value) ||
            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) ||
          (value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          isNil = object == null,
          length = paths.length,
          result = Array(length);

      while (++index < length) {
        result[index] = isNil ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, customizer, key, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          if (isHostObject(value)) {
            return object ? value : {};
          }
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return copySymbols(value, baseAssign(result, value));
          }
        } else {
          return cloneableTags[tag]
            ? initCloneByTag(value, tag, isDeep)
            : (object ? value : {});
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        assignValue(result, key, baseClone(subValue, isDeep, customizer, key, value, stack));
      });
      return isArr ? result : copySymbols(value, result);
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new function.
     */
    function baseConforms(source) {
      var props = keys(source),
          length = props.length;

      return function(object) {
        if (object == null) {
          return !length;
        }
        var index = length;
        while (index--) {
          var key = props[index],
              predicate = source[key],
              value = object[key];

          if ((value === undefined && !(key in Object(object))) || !predicate(value)) {
            return false;
          }
        }
        return true;
      };
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(prototype) {
        if (isObject(prototype)) {
          object.prototype = prototype;
          var result = new object;
          object.prototype = undefined;
        }
        return result || {};
      };
    }());

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an array
     * of `func` arguments.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support for
     * excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, isDeep, isStrict, result) {
      result || (result = []);

      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index];
        if (isArrayLikeObject(value) &&
            (isStrict || isArray(value) || isArguments(value))) {
          if (isDeep) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, isDeep, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forIn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return object == null ? object : baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = isKey(path, object) ? [path + ''] : baseToPath(path);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[path[index++]];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
      // that are composed entirely of index properties, return `false` for
      // `hasOwnProperty` checks of them.
      return hasOwnProperty.call(object, key) ||
        (typeof object == 'object' && key in object && getPrototypeOf(object) === null);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        caches[othIndex] = !comparator && (iteratee || array.length >= 120)
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          length = array.length,
          seen = caches[0];

      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
          var othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      if (!isKey(path, object)) {
        path = baseToPath(path);
        object = parent(object, path);
        path = last(path);
      }
      var func = object == null ? object : object[path];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {boolean} [bitmask] The bitmask of comparison flags.
     *  The bitmask may be composed of the following flags:
     *     1 - Unordered comparison
     *     2 - Partial comparison
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = getTag(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = getTag(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag && !isHostObject(object),
          othIsObj = othTag == objectTag && !isHostObject(other),
          isSameTag = objTag == othTag;

      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag, equalFunc, customizer, bitmask);
      }
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
      if (!isPartial) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, bitmask, stack);
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack,
              result = customizer ? customizer(objValue, srcValue, key, object, source, stack) : undefined;

          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      var type = typeof value;
      if (type == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (type == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @type Function
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      return nativeKeys(Object(object));
    }

    /**
     * The base implementation of `_.keysIn` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      object = object == null ? object : Object(object);

      var result = [];
      for (var key in object) {
        result.push(key);
      }
      return result;
    }

    // Fallback for IE < 9 with es6-shim.
    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
      baseKeysIn = function(object) {
        return iteratorToArray(enumerate(object));
      };
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        var key = matchData[0][0],
            value = matchData[0][1];

        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === value &&
            (value !== undefined || (key in Object(object)));
        };
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(path, srcValue) {
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      var props = (isArray(source) || isTypedArray(source)) ? undefined : keysIn(source);
      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer ? customizer(object[key], srcValue, (key + ''), object, source, stack) : undefined;
          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      });
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue) || stack.get(objValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, (key + ''), object, source, stack) : undefined,
          isCommon = newValue === undefined;

      if (isCommon) {
        newValue = srcValue;
        if (isArray(srcValue) || isTypedArray(srcValue)) {
          if (isArray(objValue)) {
            newValue = srcIndex ? copyArray(objValue) : objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else {
            newValue = baseClone(srcValue);
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = baseClone(srcValue);
          }
          else {
            newValue = srcIndex ? baseClone(objValue) : objValue;
          }
        }
        else {
          isCommon = false;
        }
      }
      stack.set(srcValue, newValue);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1,
          toIteratee = getIteratee();

      iteratees = arrayMap(iteratees.length ? iteratees : Array(1), function(iteratee) {
        return toIteratee(iteratee);
      });

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property names.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, props) {
      object = Object(object);
      return arrayReduce(props, function(result, key) {
        if (key in object) {
          result[key] = object[key];
        }
        return result;
      }, {});
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key) {
        if (predicate(value, key)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAll`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values) {
      return basePullAllBy(array, values);
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAllBy(array, values, iteratee) {
      var index = -1,
          length = values.length,
          seen = array;

      if (iteratee) {
        seen = arrayMap(array, function(value) { return iteratee(value); });
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = baseIndexOf(seen, computed, fromIndex)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (lastIndex == length || index != previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          }
          else if (!isKey(index, array)) {
            var path = baseToPath(index),
                object = parent(array, path);

            if (object != null) {
              delete object[last(path)];
            }
          }
          else {
            delete array[index];
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments to numbers.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the new array of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      path = isKey(path, object) ? [path + ''] : baseToPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = path[index];
        if (isObject(nested)) {
          var newValue = value;
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;
            if (newValue === undefined) {
              newValue = objValue == null ? (isIndex(path[index + 1]) ? [] : {}) : objValue;
            }
          }
          assignValue(nested, key, newValue);
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsUndef = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            isDef = computed !== undefined,
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsNull) {
          setLow = isReflexive && isDef && (retHighest || computed != null);
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || isDef);
        } else if (computed == null) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array) {
      return baseSortedUniqBy(array);
    }

    /**
     * The base implementation of `_.sortedUniqBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniqBy(array, iteratee) {
      var index = 0,
          length = array.length,
          value = array[0],
          computed = iteratee ? iteratee(value) : value,
          seen = computed,
          resIndex = 0,
          result = [value];

      while (++index < length) {
        value = array[index],
        computed = iteratee ? iteratee(value) : value;

        if (!eq(computed, seen)) {
          seen = computed;
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toPath` which only converts `value` to a
     * path if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the property path array.
     */
    function baseToPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = isKey(path, object) ? [path + ''] : baseToPath(path);
      object = parent(object, path);
      var key = last(path);
      return (object != null && has(object, key)) ? delete object[key] : true;
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var index = -1,
          length = arrays.length;

      while (++index < length) {
        var result = result
          ? arrayPush(
              baseDifference(result, arrays[index], iteratee, comparator),
              baseDifference(arrays[index], result, iteratee, comparator)
            )
          : arrays[index];
      }
      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
    }

    /**
     * Creates a clone of `buffer`.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneBuffer(buffer) {
      var Ctor = buffer.constructor,
          result = new Ctor(buffer.byteLength),
          view = new Uint8Array(result);

      view.set(new Uint8Array(buffer));
      return result;
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map) {
      var Ctor = map.constructor;
      return arrayReduce(mapToArray(map), addMapEntry, new Ctor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var Ctor = regexp.constructor,
          result = new Ctor(regexp.source, reFlags.exec(regexp));

      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set) {
      var Ctor = set.constructor;
      return arrayReduce(setToArray(set), addSetEntry, new Ctor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return Symbol ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = typedArray.buffer,
          Ctor = typedArray.constructor;

      return new Ctor(isDeep ? cloneBuffer(buffer) : buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders) {
      var holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          leftIndex = -1,
          leftLength = partials.length,
          result = Array(leftLength + argsLength);

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
      while (argsLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders) {
      var holdersIndex = -1,
          holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          rightIndex = -1,
          rightLength = partials.length,
          result = Array(argsLength + rightLength);

      while (++argsIndex < argsLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        result[offset + holders[holdersIndex]] = args[argsIndex++];
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object) {
      return copyObjectWith(source, props, object);
    }

    /**
     * This function is like `copyObject` except that it accepts a function to
     * customize copied values.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObjectWith(source, props, object, customizer) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index],
            newValue = customizer ? customizer(object[key], source[key], key, object, source) : source[key];

        assignValue(object, key, newValue);
      }
      return object;
    }

    /**
     * Copies own symbol properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var result = initializer ? initializer() : {};
        iteratee = getIteratee(iteratee);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, iteratee(value), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, iteratee(value), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return rest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = typeof customizer == 'function' ? (length--, customizer) : undefined;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBaseWrapper(func, bitmask, thisArg) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = reHasComplexSymbol.test(string) ? stringToArray(string) : undefined,
            chr = strSymbols ? strSymbols[0] : string.charAt(0),
            trailing = strSymbols ? strSymbols.slice(1).join('') : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string)), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors.
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurryWrapper(func, bitmask, arity) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var length = arguments.length,
            index = length,
            args = Array(length),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func,
            placeholder = wrapper.placeholder;

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        return length < arity
          ? createRecurryWrapper(func, bitmask, createHybridWrapper, placeholder, undefined, args, holders, undefined, undefined, arity - length)
          : apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return rest(function(funcs) {
        funcs = baseFlatten(funcs);

        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
          isFlip = bitmask & FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtorWrapper(func);

      function wrapper() {
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (partials) {
          args = composeArgs(args, partials, holders);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight);
        }
        if (isCurry || isCurryRight) {
          var placeholder = wrapper.placeholder,
              argsHolders = replaceHolders(args, placeholder);

          length -= argsHolders.length;
          if (length < arity) {
            return createRecurryWrapper(func, bitmask, createHybridWrapper, placeholder, thisArg, args, argsHolders, argPos, ary, arity - length);
          }
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && args.length > 1) {
          args.reverse();
        }
        if (isAry && ary < args.length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new invoker function.
     */
    function createOver(arrayFunc) {
      return rest(function(iteratees) {
        iteratees = arrayMap(baseFlatten(iteratees), getIteratee());
        return rest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(string, length, chars) {
      length = toInteger(length);

      var strLength = stringSize(string);
      if (!length || strLength >= length) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars === undefined ? ' ' : (chars + '');

      var result = repeat(chars, nativeCeil(padLength / stringSize(chars)));
      return reHasComplexSymbol.test(chars)
        ? stringToArray(result).slice(0, padLength).join('')
        : result.slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toNumber(start);
        start = start === start ? start : 0;
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toNumber(end) || 0;
        }
        step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder to replace.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & CURRY_FLAG,
          newArgPos = argPos ? copyArray(argPos) : undefined,
          newsHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

      if (!(bitmask & CURRY_BOUND_FLAG)) {
        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
      }
      var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, arity],
          result = wrapFunc.apply(undefined, newData);

      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return result;
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = toInteger(precision);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && new Set([1, 2]).size === 2) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask of wrapper flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func),
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] == null
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == BIND_FLAG) {
        var result = createBaseWrapper(func, bitmask, thisArg);
      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
        result = createCurryWrapper(func, bitmask, arity);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
        result = createPartialWrapper(func, bitmask, thisArg, partials);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} [stack] Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var index = -1,
          isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked) {
        return stacked == other;
      }
      var result = true;
      stack.set(array, other);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (isUnordered) {
          if (!arraySome(other, function(othValue) {
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);
              })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask) {
      switch (tag) {
        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object) ? other != +other : object == +other;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);

          // Recursively compare objects (susceptible to call stack limits).
          return (isPartial || object.size == other.size) &&
            equalFunc(convert(object), convert(other), customizer, bitmask | UNORDERED_COMPARE_FLAG);

        case symbolTag:
          return !!Symbol && (symbolValueOf.call(object) == symbolValueOf.call(other));
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : baseHas(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      return result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the appropriate "iteratee" function. If the `_.iteratee` method is
     * customized this function returns the custom method, otherwise it returns
     * `baseIteratee`. If arguments are provided the chosen function is invoked
     * with them and its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = toPairs(object),
          length = result.length;

      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = object == null ? undefined : object[key];
      return isNative(value) ? value : undefined;
    }

    /**
     * Creates an array of the own symbol properties of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = getOwnPropertySymbols || function() {
      return [];
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function getTag(value) {
      return objectToString.call(value);
    }

    // Fallback for IE 11 providing `toStringTag` values for maps and sets.
    if ((Map && getTag(new Map) != mapTag) || (Set && getTag(new Set) != setTag)) {
      getTag = function(value) {
        var result = objectToString.call(value),
            Ctor = result == objectTag ? value.constructor : null,
            ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';

        if (ctorString) {
          if (ctorString == mapCtorString) {
            return mapTag;
          }
          if (ctorString == setCtorString) {
            return setTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      if (object == null) {
        return false;
      }
      var result = hasFunc(object, path);
      if (!result && !isKey(path)) {
        path = baseToPath(path);
        object = parent(object, path);
        if (object != null) {
          path = last(path);
          result = hasFunc(object, path);
        }
      }
      return result || (isLength(object && object.length) && isIndex(path, object.length) &&
        (isArray(object) || isString(object) || isArguments(object)));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      var Ctor = object.constructor;
      return baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Creates an array of index keys for `object` values of arrays,
     * `arguments` objects, and strings, otherwise `null` is returned.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array|null} Returns index keys, else `null`.
     */
    function indexKeys(object) {
      var length = object ? object.length : undefined;
      return (isLength(length) && (isArray(object) || isString(object) || isArguments(object)))
        ? baseTimes(length, String)
        : null;
    }

    /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (typeof value == 'number') {
        return true;
      }
      return !isArray(value) &&
        (reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
          (object != null && value in Object(object)));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return type == 'number' || type == 'boolean' ||
        (type == 'string' && value !== '__proto__') || value == null;
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * modify function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * combined case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);

      var isCombo =
        (srcBitmask == ARY_FLAG && (bitmask == CURRY_FLAG)) ||
        (srcBitmask == ARY_FLAG && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : copyArray(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : copyArray(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : copyArray(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : copyArray(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = copyArray(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     * @returns {*} Returns the value to assign.
     */
    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);
      }
      return objValue;
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length == 1 ? object : get(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    function stringToPath(string) {
      var result = [];
      toString(string).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    }

    /**
     * Converts `value` to an array-like object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the array-like object.
     */
    function toArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Converts `value` to a function if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Function} Returns the function.
     */
    function toFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=0] The length of each chunk.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size) {
      size = nativeMax(toInteger(size), 0);

      var length = array ? array.length : 0;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = -1,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[++resIndex] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    var concat = rest(function(array, values) {
      if (!isArray(array)) {
        array = array == null ? [] : [Object(array)];
      }
      values = baseFlatten(values);
      return arrayConcat(array, values);
    });

    /**
     * Creates an array of unique `array` values not included in the other
     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([3, 2, 1], [4, 2]);
     * // => [3, 1]
     */
    var difference = rest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, false, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);
     * // => [3.1, 1.3]
     *
     * // using the `_.property` iteratee shorthand
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = rest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, false, true), getIteratee(iteratee))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = rest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, false, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // using the `_.matches` iteratee shorthand
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // using the `_.property` iteratee shorthand
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // using the `_.matches` iteratee shorthand
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // using the `_.property` iteratee shorthand
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // using the `_.matches` iteratee shorthand
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // using the `_.property` iteratee shorthand
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate) {
      return (array && array.length)
        ? baseFindIndex(array, getIteratee(predicate, 3))
        : -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // using the `_.matches` iteratee shorthand
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // using the `_.property` iteratee shorthand
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate) {
      return (array && array.length)
        ? baseFindIndex(array, getIteratee(predicate, 3), true)
        : -1;
    }

    /**
     * Creates an array of flattened values by running each element in `array`
     * through `iteratee` and concating its result to the other mapped values.
     * The iteratee is invoked with three arguments: (value, index|key, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(array, iteratee) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(arrayMap(array, getIteratee(iteratee, 3))) : [];
    }

    /**
     * Flattens `array` a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]]
     */
    function flatten(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array) : [];
    }

    /**
     * This method is like `_.flatten` except that it recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, true) : [];
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs ? pairs.length : 0,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the offset
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
     * performs a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      fromIndex = toInteger(fromIndex);
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all of the provided
     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     *
     * _.intersection([2, 1], [4, 2], [1, 2]);
     * // => [2]
     */
    var intersection = rest(function(arrays) {
      var mapped = arrayMap(arrays, toArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of shared values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [2.1]
     *
     * // using the `_.property` iteratee shorthand
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = rest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, toArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = rest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, toArrayLikeObject);

      if (comparator === last(mapped)) {
        comparator = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array ? nativeJoin.call(array, separator) : '';
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = (index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)) + 1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    var pull = rest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pullAll(array, [2, 3]);
     * console.log(array);
     * // => [1, 1]
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to to generate the criterion
     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAllBy(array, values, getIteratee(iteratee))
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified individually or in arrays.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    var pullAt = rest(function(array, indexes) {
      indexes = arrayMap(baseFlatten(indexes), String);

      var result = baseAt(array, indexes);
      basePullAt(array, indexes.sort(compareAscending));
      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @category Array
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array ? nativeReverse.call(array) : array;
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of [`Array#slice`](https://mdn.io/Array/slice)
     * to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 5], 4);
     * // => 0
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };
     *
     * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));
     * // => 1
     *
     * // using the `_.property` iteratee shorthand
     * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([1, 1, 2, 2], 2);
     * // => 2
     */
    function sortedIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5], 4);
     * // => 1
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * // using the `_.property` iteratee shorthand
     * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([1, 1, 2, 2], 2);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.2]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniqBy(array, getIteratee(iteratee))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with three
     * arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // using the `_.matches` iteratee shorthand
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // using the `_.property` iteratee shorthand
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // using the `_.matches` iteratee shorthand
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // using the `_.property` iteratee shorthand
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all of the provided arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2, 1], [4, 2], [1, 2]);
     * // => [2, 1, 4]
     */
    var union = rest(function(arrays) {
      return baseUniq(baseFlatten(arrays, false, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [2.1, 1.2, 4.3]
     *
     * // using the `_.property` iteratee shorthand
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = rest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, false, true), getIteratee(iteratee));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = rest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseUniq(baseFlatten(arrays, false, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length)
        ? baseUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // using the `_.property` iteratee shorthand
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length)
        ? baseUniq(array, getIteratee(iteratee))
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      return (array && array.length)
        ? baseUniq(array, undefined, comparator)
        : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all provided values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    var without = rest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([2, 1], [4, 2]);
     * // => [1, 4]
     */
    var xor = rest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [1.2, 4.3]
     *
     * // using the `_.property` iteratee shorthand
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = rest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = rest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = rest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property names and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} [props=[]] The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(props, values) {
      var index = -1,
          length = props ? props.length : 0,
          valsLength = values ? values.length : 0,
          result = {};

      while (++index < length) {
        baseSet(result, props[index], index < valsLength ? values[index] : undefined);
      }
      return result;
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = rest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method chaining enabled.
     * The result of such method chaining must be unwrapped with `_#value`.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * invoked with one argument; (value). The purpose of this method is to "tap into"
     * a method chain in order to perform operations on intermediate results within
     * the chain.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths of elements to pick,
     *  specified individually or in arrays.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     *
     * _(['a', 'b', 'c']).at(0, 2).value();
     * // => ['a', 'c']
     */
    var wrapperAt = rest(function(paths) {
      paths = baseFlatten(paths);
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * This method is the wrapper version of `_.flatMap`.
     *
     * @name flatMap
     * @memberOf _
     * @category Seq
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _([1, 2]).flatMap(duplicate).value();
     * // => [1, 1, 2, 2]
     */
    function wrapperFlatMap(iteratee) {
      return this.map(iteratee).flatten();
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({ 'func': thru, 'args': [reverse], 'thisArg': undefined });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` iteratee shorthand
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.every(users, ['active', false]);
     * // => true
     *
     * // using the `_.property` iteratee shorthand
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three arguments:
     * (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // using the `_.matches` iteratee shorthand
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // using the `_.property` iteratee shorthand
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three arguments:
     * (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // using the `_.matches` iteratee shorthand
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // using the `_.property` iteratee shorthand
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    function find(collection, predicate) {
      predicate = getIteratee(predicate, 3);
      if (isArray(collection)) {
        var index = baseFindIndex(collection, predicate);
        return index > -1 ? collection[index] : undefined;
      }
      return baseFind(collection, predicate, baseEach);
    }

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, predicate) {
      predicate = getIteratee(predicate, 3);
      if (isArray(collection)) {
        var index = baseFindIndex(collection, predicate, true);
        return index > -1 ? collection[index] : undefined;
      }
      return baseFind(collection, predicate, baseEachRight);
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior use `_.forIn` or `_.forOwn`
     * for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(value) {
     *   console.log(value);
     * });
     * // => logs `1` then `2`
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' then 'b' (iteration order is not guaranteed)
     */
    function forEach(collection, iteratee) {
      return (typeof iteratee == 'function' && isArray(collection))
        ? arrayEach(collection, iteratee)
        : baseEach(collection, toFunction(iteratee));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => logs `2` then `1`
     */
    function forEachRight(collection, iteratee) {
      return (typeof iteratee == 'function' && isArray(collection))
        ? arrayEachRight(collection, iteratee)
        : baseEachRight(collection, toFunction(iteratee));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of elements responsible for generating the key.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // using the `_.property` iteratee shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string it's checked
     * for a substring of `value`, otherwise [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it's
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = rest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keyData = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(keyData, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(keyData, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`,
     * `invert`, `parseInt`, `random`, `range`, `rangeRight`, `slice`, `some`,
     * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`,
     * and `words`
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the `_.property` iteratee shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} [iteratees=[_.identity]] The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // sort by `user` in ascending order and by `age` in descending order
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // using the `_.matches` iteratee shorthand
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // using the `_.property` iteratee shorthand
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not provided the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * });
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // using the `_.matches` iteratee shorthand
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // using the `_.property` iteratee shorthand
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getIteratee(predicate, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var array = isArrayLike(collection) ? collection : values(collection),
          length = array.length;

      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=0] The number of elements to sample.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n) {
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      n = baseClamp(toInteger(n), 0, length);
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sampleSize(collection, MAX_ARRAY_LENGTH);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        var result = collection.length;
        return (result && isString(collection)) ? stringSize(collection) : result;
      }
      return keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` iteratee shorthand
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.some(users, ['active', false]);
     * // => true
     *
     * // using the `_.property` iteratee shorthand
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} [iteratees=[_.identity]]
     *  The iteratees to sort by, specified individually or in arrays.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, function(o) { return o.user; });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.sortBy(users, 'user', function(o) {
     *   return Math.floor(o.age / 10);
     * });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    var sortBy = rest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees.length = 1;
      }
      return baseOrderBy(collection, baseFlatten(iteratees), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = Date.now;

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // using placeholders
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = rest(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bind.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // using placeholders
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = rest(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bindKey.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide an options object to indicate whether `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent calls
     * to the debounced function return the result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it's invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when clicked, debouncing subsequent calls
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // cancel a trailing debounced invocation
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          leading = false,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxWait = 'maxWait' in options && nativeMax(toNumber(options.maxWait) || 0, wait);
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        lastCalled = 0;
        args = maxTimeoutId = thisArg = timeoutId = trailingCall = undefined;
      }

      function complete(isCalled, id) {
        if (id) {
          clearTimeout(id);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (isCalled) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = undefined;
          }
        }
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function flush() {
        if ((timeoutId && trailingCall) || (maxTimeoutId && trailing)) {
          result = func.apply(thisArg, args);
        }
        cancel();
        return result;
      }

      function maxDelayed() {
        complete(trailing, timeoutId);
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0 || remaining > maxWait;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = undefined;
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    var defer = rest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    var delay = rest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrapper(func, FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // modifying the result cache
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // replacing `_.memoize.Cache`
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with arguments transformed by
     * corresponding `transforms`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms] The functions to transform
     * arguments, specified individually or in arrays.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, square, doubled);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = rest(function(func, transforms) {
      transforms = arrayMap(baseFlatten(transforms), getIteratee());

      var funcsLength = transforms.length;
      return rest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // using placeholders
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = rest(function(func, partials) {
      var holders = replaceHolders(partials, partial.placeholder);
      return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // using placeholders
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = rest(function(func, partials) {
      var holders = replaceHolders(partials, partialRight.placeholder);
      return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified individually or in arrays.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = rest(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, array);
          case 1: return func.call(this, args[0], array);
          case 2: return func.call(this, args[0], args[1], array);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * // with a Promise
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function(array) {
        return apply(func, this, array);
      };
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide an options object to indicate whether
     * `func` should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // cancel a trailing throttled invocation
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, { 'leading': leading, 'maxWait': wait, 'trailing': trailing });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return partial(wrapper, value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      return baseClone(value, false, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, true);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      return baseClone(value, true, customizer);
    }

    /**
     * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    function gt(value, other) {
      return value > other;
    }

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    function gte(value, other) {
      return value >= other;
    }

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null &&
        !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && objectToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objectToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is empty. A value is considered empty unless it's an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      return (!isObjectLike(value) || isFunction(value.splice))
        ? !size(value)
        : !keys(value).length;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are **not** supported.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which is
     * invoked to compare values. If `customizer` returns `undefined` comparisons are
     * handled by the method instead. The `customizer` is invoked with up to six arguments:
     * (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      return isObjectLike(value) &&
        typeof value.message == 'string' && objectToString.call(value) == errorTag;
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MAX_VALUE);
     * // => true
     *
     * _.isFinite(3.14);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 8 which returns 'object' for typed array constructors, and
      // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
      var tag = isObject(value) ? objectToString.call(value) : '';
      return tag == funcTag || tag == genTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      // Avoid a V8 JIT bug in Chrome 19-20.
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined` comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(funcToString.call(value));
      }
      return isObjectLike(value) &&
        (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && objectToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
        return false;
      }
      var proto = objectProto;
      if (typeof value.constructor == 'function') {
        proto = getPrototypeOf(value);
      }
      if (proto === null) {
        return true;
      }
      var Ctor = proto.constructor;
      return (typeof Ctor == 'function' &&
        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return isObject(value) && objectToString.call(value) == regexpTag;
    }

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    function lt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    function lte(value, other) {
      return value <= other;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (iteratorSymbol && value[iteratorSymbol]) {
        return iteratorToArray(value[iteratorSymbol]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3');
     * // => 3
     */
    function toInteger(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      var remainder = value % 1;
      return value === value ? (remainder ? value - remainder : value) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3);
     * // => 3
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3');
     * // => 3
     */
    function toNumber(value) {
      if (isObject(value)) {
        var other = isFunction(value.valueOf) ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3');
     * // => 3
     */
    function toSafeInteger(value) {
      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    }

    /**
     * Converts `value` to a string if it's not one. An empty string is returned
     * for `null` and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (value == null) {
        return '';
      }
      if (isSymbol(value)) {
        return Symbol ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source objects to the destination
     * object. Source objects are applied from left to right. Subsequent sources
     * overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.c = 3;
     * }
     *
     * function Bar() {
     *   this.e = 5;
     * }
     *
     * Foo.prototype.d = 4;
     * Bar.prototype.f = 6;
     *
     * _.assign({ 'a': 1 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3, 'e': 5 }
     */
    var assign = createAssigner(function(object, source) {
      copyObject(source, keys(source), object);
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * function Bar() {
     *   this.d = 4;
     * }
     *
     * Foo.prototype.c = 3;
     * Bar.prototype.e = 5;
     *
     * _.assignIn({ 'a': 1 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer` which
     * is invoked to produce the assigned values. If `customizer` returns `undefined`
     * assignment is handled by the method instead. The `customizer` is invoked
     * with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObjectWith(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer` which
     * is invoked to produce the assigned values. If `customizer` returns `undefined`
     * assignment is handled by the method instead. The `customizer` is invoked
     * with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObjectWith(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths of elements to pick,
     *  specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     *
     * _.at(['a', 'b', 'c'], 0, 2);
     * // => ['a', 'c']
     */
    var at = rest(function(object, paths) {
      return baseAt(object, baseFlatten(paths));
    });

    /**
     * Creates an object that inherits from the `prototype` object. If a `properties`
     * object is provided its own enumerable properties are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own and inherited enumerable properties of source objects to the
     * destination object for all destination properties that resolve to `undefined`.
     * Source objects are applied from left to right. Once a property is set,
     * additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = rest(function(args) {
      args.push(undefined, assignInDefaults);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
     * // => { 'user': { 'name': 'barney', 'age': 36 } }
     *
     */
    var defaultsDeep = rest(function(args) {
      args.push(undefined, mergeDefaults);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // using the `_.matches` iteratee shorthand
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // using the `_.property` iteratee shorthand
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // using the `_.matches` iteratee shorthand
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // using the `_.property` iteratee shorthand
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);
    }

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The iteratee is invoked with three arguments:
     * (value, key, object). Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', then 'c' (iteration order is not guaranteed)
     */
    function forIn(object, iteratee) {
      return object == null ? object : baseFor(object, toFunction(iteratee), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'
     */
    function forInRight(object, iteratee) {
      return object == null ? object : baseForRight(object, toFunction(iteratee), keysIn);
    }

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The iteratee is invoked with three arguments:
     * (value, key, object). Iteratee functions may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' then 'b' (iteration order is not guaranteed)
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, toFunction(iteratee));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, toFunction(iteratee));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     * var other = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b.c');
     * // => true
     *
     * _.hasIn(object, ['a', 'b', 'c']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiVal` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiVal] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     *
     * // with `multiVal`
     * _.invert(object, true);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function invert(object, multiVal, guard) {
      return arrayReduce(keys(object), function(result, key) {
        var value = object[key];
        if (multiVal && !guard) {
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }
        else {
          result[value] = key;
        }
        return result;
      }, {});
    }

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = rest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      var isProto = isPrototype(object);
      if (!(isProto || isArrayLike(object))) {
        return baseKeys(object);
      }
      var indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      for (var key in object) {
        if (baseHas(object, key) &&
            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(isProto && key == 'constructor')) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      var index = -1,
          isProto = isPrototype(object),
          props = baseKeysIn(object),
          propsLength = props.length,
          indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      while (++index < propsLength) {
        var key = props[index];
        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * property of `object` through `iteratee`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[iteratee(value, key, object)] = value;
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // using the `_.property` iteratee shorthand
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[key] = iteratee(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own and inherited enumerable properties of source
     * objects into the destination object, skipping source properties that resolve
     * to `undefined`. Array and plain object properties are merged recursively.
     * Other objects and value types are overridden by assignment. Source objects
     * are applied from left to right. Subsequent sources overwrite property
     * assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined` merging is handled by the
     * method instead. The `customizer` is invoked with seven arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property names to omit, specified
     *  individually or in arrays..
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = rest(function(object, props) {
      if (object == null) {
        return {};
      }
      props = arrayMap(baseFlatten(props), String);
      return basePick(object, baseDifference(keysIn(object), props));
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that `predicate`
     * doesn't return truthy for.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      predicate = getIteratee(predicate, 2);
      return basePickBy(object, function(value, key) {
        return !predicate(value, key);
      });
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property names to pick, specified
     *  individually or in arrays.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = rest(function(object, props) {
      return object == null ? {} : basePick(object, baseFlatten(props));
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      return object == null ? {} : basePickBy(object, getIteratee(predicate, 2));
    }

    /**
     * This method is like `_.get` except that if the resolved value is a function
     * it's invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      if (!isKey(path, object)) {
        path = baseToPath(path);
        var result = get(object, path);
        object = parent(object, path);
      } else {
        result = object == null ? undefined : object[path];
      }
      if (result === undefined) {
        result = defaultValue;
      }
      return isFunction(result) ? result.call(object) : result;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.setWith({ '0': { 'length': 2 } }, '[0][1][2]', 3, Object);
     * // => { '0': { '1': { '2': 3 }, 'length': 2 } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable key-value pairs for `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    function toPairs(object) {
      return baseToPairs(object, keys(object));
    }

    /**
     * Creates an array of own and inherited enumerable key-value pairs for `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 1]] (iteration order is not guaranteed)
     */
    function toPairsIn(object) {
      return baseToPairs(object, keysIn(object));
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The iteratee is invoked with four arguments:
     * (accumulator, value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * });
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getIteratee(iteratee, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object ? baseValues(object, keys(object)) : [];
    }

    /**
     * Creates an array of the own and inherited enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? baseValues(object, keysIn(object)) : [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toNumber(start) || 0;
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toNumber(end) || 0;
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are floats,
     * a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toNumber(lower) || 0;
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toNumber(upper) || 0;
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = typeof target == 'string' ? target : (target + '');

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in IE < 9, they can break out of
     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = stringSize(string);
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = nativeFloor(mid),
          rightLength = nativeCeil(mid);

      return createPadding('', leftLength, chars) + string + createPadding('', rightLength, chars);
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      return string + createPadding(string, length, chars);
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      return createPadding(string, length, chars) + string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#x15.1.2.2)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = toString(string).replace(reTrim, '');
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      string = toString(string);
      n = toInteger(n);

      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the new array of string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      return toString(string).split(separator, limit);
    }

    /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + capitalize(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = baseClamp(toInteger(position), 0, string.length);
      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, assignInDefaults);

      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar');
     * // => '--foo-bar'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar');
     * // => '--FOO-BAR'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrim, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars);

      return strSymbols.slice(charsStartIndex(strSymbols, chrSymbols), charsEndIndex(strSymbols, chrSymbols) + 1).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrimEnd, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string);
      return strSymbols.slice(0, charsEndIndex(strSymbols, stringToArray(chars)) + 1).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrimStart, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string);
      return strSymbols.slice(charsStartIndex(strSymbols, stringToArray(chars))).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? toString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (reHasComplexSymbol.test(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? strSymbols.slice(0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // avoid throwing errors for invalid selectors
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = rest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind,
     *  specified individually or in arrays.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, 'onClick');
     * jQuery(element).on('click', view.onClick);
     * // => logs 'clicked docs' when clicked
     */
    var bindAll = rest(function(object, methodNames) {
      arrayEach(baseFlatten(methodNames), function(key) {
        object[key] = bind(object[key], object);
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` invoking the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.constant(true),                _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs ? pairs.length : 0,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return rest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, true));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Creates a function that returns the result of invoking the provided
     * functions with the `this` binding of the created function, where each
     * successive invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the provided functions from right to left.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name the created callback returns the
     * property value for a given element. If `func` is an object the created
     * callback returns `true` for elements that contain the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // create custom iteratee shorthands
     * _.iteratee = _.wrap(_.iteratee, function(callback, func) {
     *   var p = /^(\S+)\s*([<>])\s*(\S+)$/.exec(func);
     *   return !p ? callback(func) : function(object) {
     *     return (p[2] == '>' ? object[p[1]] > p[3] : object[p[1]] < p[3]);
     *   };
     * });
     *
     * _.filter(users, 'age > 36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function iteratee(func) {
      return (isObjectLike(func) && !isArray(func))
        ? matches(func)
        : baseIteratee(func);
    }

    /**
     * Creates a function that performs a deep partial comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that performs a deep partial comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invokeMap(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    var method = rest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = rest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = (isObject(options) && 'chain' in options) ? options.chain : true,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Util
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that returns its nth argument.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.nthArg(1);
     *
     * func('a', 'b', 'c');
     * // => 'b'
     */
    function nthArg(n) {
      n = toInteger(n);
      return function() {
        return arguments[n];
      };
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments provided
     * to the created function and returns their results.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} iteratees The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over(Math.max, Math.min);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments provided to the created function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} predicates The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery(Boolean, isFinite);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments provided to the created function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} predicates The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome(Boolean, isFinite);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(true));
     * // => [true, true, true, true]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = toFunction(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     *
     * var path = ['a', 'b', 'c'],
     *     newPath = _.toPath(path);
     *
     * console.log(newPath);
     * // => ['a', 'b', 'c']
     *
     * console.log(path === newPath);
     * // => false
     */
    function toPath(value) {
      return isArray(value) ? arrayMap(value, String) : stringToPath(value);
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      var result;
      if (augend !== undefined) {
        result = augend;
      }
      if (addend !== undefined) {
        result = result === undefined ? addend : (result + addend);
      }
      return result;
    }

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey
     * `undefined` is returned.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, gt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // using the `_.property` iteratee shorthand
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee), gt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return sum(array) / (array ? array.length : 0);
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey
     * `undefined` is returned.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, lt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // using the `_.property` iteratee shorthand
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee), lt)
        : undefined;
    }

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    function subtract(minuend, subtrahend) {
      var result;
      if (minuend !== undefined) {
        result = minuend;
      }
      if (subtrahend !== undefined) {
        result = result === undefined ? subtrahend : (result - subtrahend);
      }
      return result;
    }

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : undefined;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // using the `_.property` iteratee shorthand
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee))
        : undefined;
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Avoid inheriting from `Object.prototype` when possible.
    Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;

    // Add functions to the `MapCache`.
    MapCache.prototype.clear = mapClear;
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `SetCache`.
    SetCache.prototype.push = cachePush;

    // Add functions to the `Stack` cache.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({ 'size': nativeMin(n, MAX_ARRAY_LENGTH), 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({ 'iteratee': getIteratee(iteratee, 3), 'type': type });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = rest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      predicate = getIteratee(predicate, 3);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Map minified function names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.flatMap = wrapperFlatMap;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    if (iteratorSymbol) {
      lodash.prototype[iteratorSymbol] = wrapperToIterator;
    }
    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Expose lodash on the free variable `window` or `self` when available. This
  // prevents errors in cases where lodash is loaded by a script tag in the presence
  // of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch for more details.
  (freeWindow || freeSelf || {})._ = _;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define('lodash',[],function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

define('services/config',[],
    function () {
        var rooturl = '',
            dataAdmRootUrl = document.location.href.indexOf("artskart.artsdatabanken.no") > 0 ? '/appapi/api/' : '//test.artsdatabanken.no/artskartwebapi2/api/',
            //dataAdmRootUrl = 'http://localhost:11901/api/',
            signalrRootUrl = document.location.href.indexOf("artskart.artsdatabanken.no") > 0 ? '/appapi/signalR/' : '//test.artsdatabanken.no/artskartwebapi2/signalR/',
            //signalrRootUrl = 'http://localhost:11901/signalr',
            redListBaseUrl = 'https://artsdatabanken.no/Rodliste2015/rodliste2015/Norge/',
            alienListBaseUrl = 'https://databank.artsdatabanken.no/FremmedArt2012/N',
            taxonBaseUrl = 'http://artsdatabanken.no/taxon/',
            bokmarkRouteParameters = '/:guid',

            proxyRootUrl = '/NinProxy/',
            asiWebRoot = '/ASIWeb/',
            t = "0.6", // polygon fill-transparency
            rc = "0.5", // redlist dots fill-transparency

            config = {
                rooturl: rooturl,
                url: rooturl + 'Observation/',
                apiurl: dataAdmRootUrl + 'geolocation/',
                bookmarkurl: window.location.protocol + "//" + window.location.host + window.location.pathname + '#bookmark/',
                dataAdmApiUrl: dataAdmRootUrl + 'data/',
                exportAdmApiUrl: dataAdmRootUrl + 'export/',
                mediaProxyUrl: dataAdmRootUrl + 'mediaProxy/Media/',
                apiwmsUrl: dataAdmRootUrl + 'raster/wms',
                vernProxyUrl: 'https://kart.miljodirektoratet.no/arcgis/services/vern/mapserver/WMSServer?', //dataAdmRootUrl + 'WmsCache/VernProxy/?',
                signalrRootUrl: signalrRootUrl,
                logourl: rooturl + 'content/images/logoer/',
                contributorUrl: 'https://artsdatabanken.no/artskart/bidragsytere?Key=1435226523',
                reportAdress: 'artskart@artsdatabanken.no',
                reportAdressArtsObs: 'support@artsobservasjoner.no',
                factSheetBaseUrl: '//faktaark.naturbase.no/Vern?id=',
                redListBaseUrl: redListBaseUrl,
                alienListBaseUrl: alienListBaseUrl,
                taxonBaseUrl:taxonBaseUrl,
                proxyurl: proxyRootUrl + '?url=',
                newUserUrl: asiWebRoot + 'UserSystem/AnonymousUsers/NewUser.aspx',
                forgotPasswordUrl: asiWebRoot + 'UserSystem/AnonymousUsers/PasswordRecovery.aspx',
                bk: 'Arsdg61hH_oq3wpWqNcV_TSUpaJhQOPQJMz5YG2TOaRsafB1FQSXlMU1-VxVfSOP', // bing-key registrert på Stein - but not non-profit....
                dev: true, // for nd token
                defaultMapZoom: 3,
                defaultMapCenter: '427864,7623020',
                initialBaseMapLayer: "NiB",
                maxListItems: 10,
                maxMobileListItems: 3,
                maxMobileListShowPages: 3,
                maxListShowPages: 9,
                maxExportItems: 500000,
                bookmarkLocalStorageKey: 'ADB/artskart bookmarks',
                exportStatusesLocalStorageKey: 'ADB/artskart exportStatuses',
                bookmarkThumbSize: 64,
                mapTokenStorageKey: 'ADB/artskart ND token',
                minYear: 1700,
                maxYear: (new Date).getFullYear() + 1,
                minCoordinatePrecision: 0,
                maxCoordinatePrecision: 10000,

                // Show centerpoints instead of polygons if zoom < loadCenterPointLimit
                loadCenterPointLimit: 11,
                maxShowObservations: 100000,
                // Add bounding box to filter if zoom > useBoundingBoxLimit
                gridBoundingBoxLimit: 9,
                useBoundingBoxLimit: 10,


                routeInfo: [
                    { id: 'map', name: "routeMapName", title: "routeMapTitle", moduleId: 'viewmodels/mapOl3', visible: true },
                    { id: 'list', name: "routeListName", title: "routeListTitle", moduleId: 'viewmodels/listView', visible: true },
                    { id: 'statistics', name: "routeStatName", title: "routeStatTitle", moduleId: 'viewmodels/statistics', visible: true },
                    { id: 'gallery', name: "routeGalleryName", title: "routeGalleryTitle", moduleId: 'viewmodels/gallery', visible: true },
                    //,{ id: 'import', name: "Import", title: "Import av kartlegginger og miljøvariabelkart (krever innlogging)", moduleId: 'viewmodels/import', visible: true },
                    { id: 'bookmark', name: "routeBookmarkName", title: "routeBookmarkTitle", moduleId: 'viewmodels/bookmark', visible: false, specialRouteParameters: bokmarkRouteParameters },
                    { id: 'exportStatus', name: "routeExportStatusName", title: "RouteExportStatusTitle", moduleId: 'viewmodels/exportStatus', visible: true}
                ],

                // Bruker NE som null-verdi. Er det riktig?
                filterGroupCounts: {},
                behaviorMappingNo: ['Ukjent', 'Forflytting', 'Næringssøkende', 'Død', 'Stasjonær', undefined, 'Reproduksjon', 'Mulig reproduksjon'],
                behaviorMappingEn: ['Unknown', 'Moving', 'Feeding', 'Dead', 'Stationary', undefined, 'Reproductive', 'Possible Reproductive'],
                imgMappingNo: [undefined, 'Vis funn med bilde', 'Vis funn uten bilde'],
                imgMappingEn: [undefined, 'Show observations with pictures', 'Show observations without pictures'],
                foundMappingNo: [undefined, 'Vis "ikke funnet" funn', 'Vis reelle funn'],
                foundMappingEn: [undefined, 'Taxon recorded as absent', 'Taxon recorded as present'],
                notRecoveredMappingNo: [undefined, 'Vis "ikke gjenfunnet" funn', 'Ikke vis "ikke gjenfunnet" funn'],
                notRecoveredMappingEn: [undefined, 'Occurrences not recovered"', 'Occurrences recovered"'],
                validMappingNo: [undefined, 'Vis validerte funn', 'Ikke vis validerte funn'],
                validMappingEn: [undefined, 'Verified observations', 'Observations not verified'],
                unsureIdMappingNo: [undefined, 'Vis usikker artsbestemmelse', 'Vis sikker artsbestemmelse'],
                unsureIdMappingEn: [undefined, 'Uncertain identifications', 'Certain identification'],
                spontanMappingNo: [undefined, 'Vis uspontan', 'Vis ikke uspontan'],
                spontanMappingEn: [undefined, 'Unspontanious occurrences', 'Spontaneous occurrences'],
                consMappingNo: [undefined, 'Vis fredete arter', 'Vis prioriterte arter'],
                consMappingEn: [undefined, 'fredet', 'prioritized'],
                tagMappingNo: ['Ukjent', 'Uspontan', 'Usikker artsbestemmelse', 'Validert', 'Har bilde', 'Ikke funnet', 'Ikke gjenfunnet'],
                tagMappingEn: ['Unknown', 'Unspontaneous', 'Uncertain identification', 'Verified observations', 'Has picture', 'Absent', 'Not recovered'],
                monthsMappingNo: [undefined, 'Januar', 'Februar', 'Mars', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Desember'],
                monthsMappingEn: [undefined, 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                basisOfRecordMappingNo: ['Ukjent', 'Belagt funn', 'Observasjon', undefined, undefined, 'Sakkyndig vurdering', 'Litteratur', undefined, undefined, undefined, 'Fossil', 'Maskinobservasjon', 'Levende individ', 'Innsamlet materiale', 'Menneskelig observasjon', 'Kadaverundersøkelse'],
                basisOfRecordMappingEn: ['Unknown', 'Preserved specimen', 'Observation', undefined, undefined, 'Assessment', 'Literature', undefined, undefined, undefined, 'Fossil Specimen', 'Machine Observation', 'Living Specimen', 'Material Sample', 'Human Observation', 'Carcass Observation'],
                categoryMapping: ['NE', 'NE', 'NA', 'NR', 'NK', 'LO', 'PH', 'HI', 'SE', 'LC', 'DD', 'NT', 'VU', 'EN', 'CR', 'RE'],
                categoryRedlistCodeMapping: [undefined, 'NE', 'NA', undefined, undefined, undefined, undefined, undefined, undefined, 'LC', 'DD', 'NT', 'VU', 'EN', 'CR', 'RE'],
                categoryNameMappingNo: ['Ukjent', 'Ikke vurdert (NE)', 'Ikke egnet (NA)', 'Ikke vurdert (NR)', 'Ingen kjent risiko (NK)', 'Lav risiko (LO)', 'Potensielt høy risiko (PH)', 'Høy risiko (HI)', 'Svært høy risiko (SE)', 'Livskraftig (LC)', 'Datamangel (DD)', 'Nær truet (NT)', 'Sårbar (VU)', 'Sterkt truet (EN)', 'Kritisk truet (CR)', 'Regionalt utdødd (RE)'],
                categoryNameMappingEn: ['Unknown', 'Not evaluated (NE)', 'Not applicable (NA)', 'Not risk-assessed (NR)', 'No known impact (NK)', 'Low impact (LO)', 'Pot. high impact (PH)', 'High impact (HI)', 'Severe impact (SE)', 'Least concern (LC)', 'Data deficient (DD)', 'Near threatened (NT)', 'Vulnerable (VU)', 'Endangered (EN)', 'Critically endangered(CR)', 'Regionally extinct (RE)'],
                categoryIconMapping: ['redlist', 'redlist', 'redlist', 'alien', 'alien', 'alien', 'alien', 'alien', 'alien', 'redlist', 'redlist', 'redlist', 'redlist', 'redlist', 'redlist', 'extinct'],
                regionallyAssessedScientificIds: [1931, 48629, 119764, 42610, 42633, 42635, 42675, 43040, 43044, 42681, 42631, 4823],
                regionallyAssessedUrls: // Same order as the ids
                    ['https://artsdatabanken.no/Fab2018/N/2888'
                    ,'https://artsdatabanken.no/Fab2018/N/2885'
                    ,'https://artsdatabanken.no/Fab2018/N/2970'
                    ,'https://artsdatabanken.no/Fab2018/N/2792'
                    ,'https://artsdatabanken.no/Fab2018/N/2794'
                    ,'https://artsdatabanken.no/Fab2018/N/2795'
                    ,'https://artsdatabanken.no/Fab2018/N/2797'
                    ,'https://artsdatabanken.no/Fab2018/N/3049'
                    ,'https://artsdatabanken.no/Fab2018/N/3048'
                    ,'https://artsdatabanken.no/Fab2018/N/2793'
                    ,'https://artsdatabanken.no/Fab2018/N/2796'
                    ,'https://artsdatabanken.no/Fab2018/N/2889'
                ],

                categoryColors: Object.freeze({
                    XX: {
                        "color": "GhostWhite"
                    },
                    NE: {   // Redlist
                        "color": "rgba(209, 211, 212, " + rc + ")"
                    },
                    NA: {   // AlienSpecies
                        "color": "rgba(147, 149, 152, " + rc + ")"
                    },
                    NR: {   // AlienSpecies
                        "color": "rgba(255, 255, 255, " + rc + ")"
                    },
                    NK: {   // AlienSpecies
                        "color": "rgba(155, 169, 99, " + rc + ")"
                    },
                    LO: {   // AlienSpecies
                        "color": "rgba(94, 164, 161, " + rc + ")"
                    },
                    PH: {   // AlienSpecies
                        "color": "rgba(24, 90, 108, " + rc + ")"
                    },
                    HI: {   // AlienSpecies
                        "color": "rgba(27, 56, 111, " + rc + ")"
                    },
                    SE: {   // AlienSpecies
                        "color": "rgba(94, 48, 99, " + rc + ")"
                    },
                    LC: {   // Redlist
                        "color": "rgba(96, 190, 178, " + rc + ")"
                    },
                    DD: {   // Redlist
                        "color": "rgba(247, 165, 32, " + rc + ")"
                    },
                    NT: {   // Redlist
                        "color": "rgba(237, 108, 38, " + rc + ")"
                    },
                    VU: {   // Redlist
                        "color": "rgba(233, 79, 51, " + rc + ")"
                    },
                    EN: {   // Redlist
                        "color": "rgba(216, 15, 39, " + rc + ")"
                    },
                    CR: {   // Redlist
                        "color": "rgba(153, 25, 26, " + rc + ")"
                    },
                    RE: {   // Redlist
                        "color": "rgba(90, 91, 93, " + rc + ")"
                    }
                }),

                // Polygon style definitions:
                //"colors": [array of rgba-colors],
                //"style": "solid"|"squares"|"stripes",
                //"strokeStyle": "solid|"dash",
                //"strokeColor": "rgba color for the polygon line,
                //"strokeWidth": 2  // thickness
                //"strokePattern": [4, 4], // dash pattern if dash
                cartographyColors: Object.freeze({
                    UNKN: {
                        "colors": ["rgba(26, 227, 28, " + t + ")"],
                        "style": "solid",
                        "strokeStyle": "solid"
                    },
                    MOSA: {
                        "colors": ["rgba(255, 255, 255, " + t + ")", "rgba(0, 0, 0, " + t + ")"],
                        "style": "squares",
                        "strokeStyle": "solid"
                    },
                    NA_T: {
                        "colors": ["rgba(65, 171, 93, " + t + ")"],
                        "style": "solid",
                        "strokeStyle": "solid"
                    },
                    NA_V: {
                        "colors": ["rgba(255, 255, 255, " + t + ")", "rgba(66, 146, 198, " + t + ")"],
                        "style": "stripes",
                        "strokeStyle": "solid"
                    },
                    NA_L: {
                        "colors": ["rgba(115, 115, 115, " + t + ")"],
                        "style": "solid",
                        "strokeStyle": "solid"
                    },
                    NA_F: {
                        "colors": ["rgba(66, 146, 198, " + t + ")"],
                        "style": "solid",
                        "strokeStyle": "solid"
                    },
                    NA_M: {
                        "colors": ["rgba(189, 189, 189, " + t + ")"],
                        "style": "solid",
                        "strokeStyle": "solid"
                    },
                    NA_H: {
                        "colors": ["rgba(33, 113, 181, " + t + ")"],
                        "style": "solid",
                        "strokeStyle": "solid"
                    },
                    NA_I: {
                        "colors": ["rgba(255,255,255," + t + ")"],
                        "style": "solid",
                        "strokeStyle": "dash",
                        "strokeColor": "rgba(66, 146, 198, " + t + ")",
                        "strokePattern": [4, 4],
                        "strokeWidth": 2
                    }
                })
            };

        return config;
    });


define('services/resource',["knockout", 'durandal/app'],
    function (ko, app) {
        "use strict";
        var title = "Resource",
            norwegian = {
                // system
                code: "No",
                norwegian: "Norsk",
                english: "Engelsk",
                warningServerUnavailable: "Får ikke kontakt med server!",
                warningLoadRecords: "Kunne ikke laste observasjonspunkter!",
                warningLoadRecordDetails: "Kunne ikke laste observasjonsdetaljer!",
                warningLoadArea: "Kunne ikke hente områdepolygon!",
                notImplemented: "Denne funksjonaliteten er foreløpig ikke ferdig implementert.",

            warningIllegalToken: "NB! Kunne ikke hente gyldig token for Norge Digitalt. Enkelte bakgrunnskart er defor ikke tilgjengelige.",
            warningLayerUnavailable: "Dette bakgrunnskartet er dessverre ikke tilgjengelig pga ugyldig eller manglende Norge Digitalt token.",
            hideWarning: "Skjul feilmeldingen",
            clickHideWarning: "Klikk skjuler feilmeldingen",
            yes: "Ja",
            no: "Nei",
            unknown: "Ukjent",
            about: "Om Artskart",
            aboutUrl: "http://www.artsdatabanken.no/Pages/229607",
            // bookmark.html
            loadingBookmarkStatus: "Laster utvalg fra bokmerke..",
            // gallery.html
            loadingGalleryStatus: "Laster galleriet..",
            galleryCountStatus1: "Utvalget har ",
            galleryCountStatus2: " observasjoner med bilder.",
            galleryNothingStatus: "Utvalget inneholder ingen observasjoner med bilder.",
            galleryLoadMore: "Last flere bilder",
            galleryLoadingMore: "Laster flere bilder...",
            // galleryToolbar.html
            licenseInfoTitle: "Lisensinfo",
            licenseInfoUrl: "http://www.artsdatabanken.no/Pages/229607",
            // legend.html
            showCategoryLegend: "Kategori",
            showSpeciesLegend: "Arter",
            showPrecisionLegend: "Presisjon",
            reLegendTitle: "1. Regionalt utdødd",
            crLegendTitle: "2. Kritisk truet",
            enLegendTitle: "3. Sterkt truet",
            vuLegendTitle: "4. Sårbar",
            ntLegendTitle: "5. Nær truet",
            ddLegendTitle: "6. Datamangel",
            lcLegendTitle: "7. Livskraftig",
            naLegendTitle: "13. Ikke egnet",
            neLegendTitle: "14. Ikke vurdert",
            nrLegendTitle: "15. Ikke vurdert",
            seLegendTitle: "8. Svært høy risiko",
            hiLegendTitle: "9. Høy risiko",
            phLegendTitle: "10. Potensielt høy risiko",
            loLegendTitle: "11. Lav risiko",
            nkLegendTitle: "12. Ingen kjent risiko",
            legendRedlistHeader: "Norsk rødliste for arter",
            legendAlienSpeciesHeader: "Fremmede arter i Norge",
            legendHelpText1: "Størrelsen på sirklene i kartet symboliserer antall observasjoner i punktet.",
            legendHelpText2: "Fargen på sirkelen angir den høyeste kategorien i punktet, ikke antall observasjoner av arter i den høyeste kategorien.",
            legendHelpText3: "Kategoriene er rangert fra 1-13, som vist over hvor 1, regionalt utdødd, representerer den høyeste kategorien. Med unntak av karplanter, er ikke lavere taksonomiske nivå enn art vurdert for Rødlista eller «Svartelista». Funn rapportert på lavere nivå (f.eks. underart) får i Artskart samme kategori som arten.",
            legendHelpText4: "I Norsk rødliste for arter gis kategorien ikke egnet NA til arter som ikke reproduserer fast i Norge (gjester) og til fremmede arter. De fleste fremmede arter har både kategoriene NA i Norsk rødliste for arter, og en risikokategori i Fremmede arter i Norge. I de tilfelle hvor en art både er vurdert som NA i Norsk rødliste for arter og har en kategori i Fremmede arter i Norge, er det fremmedartskategorien som rangeres høyest.",
            legendSpeciesHeader: "Tegnforklaring arter",
            legendSpeciesHelpText1: "Inntil 20 ulike arter vises.",
            legendSpeciesHelpText2: "Dersom det er flere arter på samme lokasjon, vises et eget symbol.",
            legendPrecisionHeader: "Tegnforklaring koordinatpresisjon",
            legendPrecisionHelpText1: "Skalaen er trinnløs, her vises bare noen eksempel.",
            legendPrecisionHelpText2: "Koordinatpresisjonen er knyttet til lokasjon, ikke observasjon.",
            // listToolbar.html
            exportEnabledTitle: "Eksporter utvalget",
            exportDisabledTitle: "Utvalget er for stort for eksport (>",
            exportDisabledTitle2: "Del opp utvalget i flere deler.",
            exportTitle: "Eksport",
            exportExcelTitle: "Eksporter i MS Excel-format",
            exportCsvTitle: "Eksporter i .csv-format",
            exportExcelName: "MS Excel",
            exportCsvName: ".csv",
            exportVerbatimTitle: "Eksporter originaldata",
            exportVerbatimName: "Original",
            exportInfoUrl: "http://www.artsdatabanken.no/Pages/233436",
            exportInfoTitle: "Info om eksport",
            // listView.html
            listCountStatus: " observasjoner i utvalget",
            columnInstitution: "Institusjon",
            columnCollection: "Samling",
            categoryCollection: "Kategori",
            columnScientificName: "Vit. navn",
            columnScientificNameAuthor: "Autor",
            columnPopularName: "Norsk navn",
            columnTaxonGroup: "Artsgruppe",
            columnCollector: "Finner/Samler",
            columnCollected: "Funndato",
            columnLocality: "Lokalitet",
            columnPresicion: "Presisjon",
            columnMunicipality: "Kommune",
            columnCounty: "Fylke",
            columnCount: "Antall",
            columnBasisOfRecord: "Funntype",
            columnBehavior: "Aktivitet",
            columnIdentifiedBy: "Artsbestemt av",
            columnVerified: "Validert",
            columnDetails: "Vis detaljer",
            detailsText: "Detaljer",
            listPageStatusText1: "Side ",
            listPageStatusText2: ". Totalt ",
            listPageStatusText3: " observasjoner i ditt utvalg.",
            //pager.html
            showFirstPageTitle: "Vis første side",
            fastBackwardsTitle: "Hopp bakover",
            showPreviousPageTitle: "Vis forrige side",
            showNextPageTitle: "Vis neste side",
            fastForwardsTitle: "Hopp fremover",
            showLastPageTitle: "Vis siste side",
            showPageTitle: "Vis side ",
            // mainPanel.html
            copyLinkHelpTextWin: "Kopier denne lenken ved å markere den og trykke CTRL+C",
            closeButtonTitle: "Lukk",
            toggleLeftMenuButtonTitle: "Veksle meny",
            mainDropdownTitle: "Velg innhold i hovedvindu",
            // siteInfo.html
            welcomeHeader: "Velkommen til tjenesten Artskart",
            aboutHeader: "Om Artskart",
            aboutText1: "Artsdatabanken og ",
            aboutGbifText: "GBIF-Norge",
            aboutGbifUrl: "https://www.gbif.no/",
            aboutText2: " har laget denne tjenesten for å formidle stedfestet artsinformasjon fra ulike dataeiere. Her kan du se hvor arter er funnet eller observert. Du kan se hvilke arter som er funnet innenfor et geografisk område, et fylke eller en kommune. De fleste arter er ikke fullstendig kartlagt, og arter kan ha forsvunnet fra lokaliteten de har blitt rapportert på.",
            aboutMoreUrl: "http://artsdatabanken.no/artskart/om?Key=1435226523",
            contributorsTitle: "Bidragsytere",
            contributorsUrl: "http://artsdatabanken.no/artskart/bidragsytere?Key=1435226523",
            guidelinesTitle: "Retningslinjer for bruk og sitering",
            guidelinesUrl: "http://artsdatabanken.no/Pages/233436?Key=1435226523",
            pictureLicencingTitle: "Kort om bruk av bilder",
            pictureLicencingUrl: "http://artsdatabanken.no/Pages/229607?Key=1435226523",
            qualityOfDataTitle: "Kvalitetssikring og foredling av dataene",
            qualityOfDataUrl: "http://artsdatabanken.no/Pages/233743",
            dataFormatTitle: "Dataformat og nedlasting",
            dataFormatUrl: "http://artsdatabanken.no/Pages/233748",
            contactText1: "Har du innspill eller spørsmål til Artskart karttjenesten kan du sende e-post til ",
            contactText2: ". Om du har spørsmål knyttet til konkrete funn kan du også ta kontakt direkte med institusjonen som står som eier av funnet.",
            feedTitle: "Kunngjøringer",
            feedErrorMessage: "Kunne ikke laste rss-feed!",
            // statistics.html
            makingStatisticsStatus: "Lager statistikk for ditt utvalg..",
            showStatisticsStatus1: "Viser statistikk for ditt utvalg på ",
            showStatisticsStatus2: "  observasjoner.",
            noStatisticsToShow: "Utvalget inneholder ingen observasjoner.",
            statInstitutionHeader: "Institusjoner",
            statSpeciesHeader: "Arter",
            statTaxonGroupHeader: "Artsgrupper",
            statOtherHeader: "Egenskaper",
            statColumnInstitution: "Institusjon",
            statColumnCount: "Antall observasjoner",
            statColumnDistinct: "Antall unike arter",
            statColumnScientificName: "Vitenskapelig navn",
            statColumnCategory: "Kategori",
            statColumnAuthor: "Autor",
            statColumnPopularName: "Norsk navn",
            statColumnCumulativeCount: "% av totalt antall observasjoner",
            statCumulativeCount: "Kumulativ telling: ",
            statShowMore: "Vis flere...",
            statShowAll: "Vis alle",
            statShowEmptyYears: "Vis også år uten observasjoner",
            statRedHeader: "Rødlistekategorier",
            statBlackHeader: "Fremmedartskategorier",
            statColumnPercent: "%",
            statColumnBasisOfRecord: "Funntype",
            statColumnBehavior: "Aktivitet",
            statColumnMonth: "Pr måned",
            statColumnTags: "Annet",
            statColumnTaxonGroups: "Artsgrupper",
            statYearHeader: "Antall per år",
            statColumnYear: "År",
            statTotalText1: "Totalt ",
            statTotalText2: " år med observasjoner",
            statTotalText3: " taksoner",
            yearChartYAxisText: "Antall",
            yearChartYAxisTitle: "Antall observasjoner",
            yearChartBarTitle1: "Observert i ",
            yearChartBarTitle2: " % av utvalg",
            //nav.js
            routeMapName: "Kart",
            routeMapTitle: "Vis utvalg i kart",
            routeListName: "Liste",
            routeListTitle: "Vis utvalg i liste",
            routeStatName: "Statistikk",
            routeStatTitle: "Vis statistikk for utvalget",
            routeGalleryName: "Galleri",
            routeGalleryTitle: "Vis galleri basert på utvalg",
            routeBookmarkName: "Bokmerke",
            routeBookmarkTitle: "Gjenopprett side fra bokmerke",
            routeExportStatusName: "Eksportjobber",
            routeExportStatusTitle: "Vis status på fileksportjobber",

            // treeview.js
            taxonGroups: "Artsgrupper",
            categories: "Rødliste- og fremmedartskategori",
            basisOfRecords: "Funntype",
            behaviors: "Aktivitet",
            institutions: "Institusjoner",
            months: "Måneder",
            other: "Annet",
            images: "Med/uten bilde",
            foundStatus: "Funnet/ikke funnet",
            notRecoveredStatus: "Gjenfunnet/ikke gjenfunnet",
            valid: "Valideringsstatus",
            unsureIdentification: "Sikker/usikker artsbestemmelse",
            spontanious: "Spontan/uspontan",
            conservationStatus: "Fredede/Prioriterte arter",
            popularNameMenu: "Populærnavn",
            scientificNameMenu: "Vitenskapelig navn",
            // maptoolbar.html
            zoomToCurrentLocationTooltip: "Posisjonen din",
            drawPolygonTooltip: "Tegn et omriss rundt ditt interesseområde for å bruke dette som geografisk filter",
            backgroundLayersTooltip: "Vis tilgjengelige bakgrunnslag",
            showMapLayersPlaceholder: "Vis tilgjengelige kartlag",
            shareLinkTitle: "Del lenke",
            showLegendTitle: "Vis/Velg tegnforklaring",
            changeLanguageTitle: "Endre språk",
            createBookmarkTitle: "Lag et bokmerke for gjeldende filter og utsnitt",
            openBookmarkTitle: "Gå til bokmerke",
            removeBookmarkTitle: "Fjern bokmerke",
            zoomToLocationWatermark: "Søk i Norgeskart, sted/gbn...",
            locationHint: "Tast inn stedsnavn eller kombinasjon av kommunenummer, gårdsnummer og bruksnummer (f.eks. 1101-1/2)",
            // mapOl3.js
            olAttribution: "Info om kartlagene",
            olZoomIn: "Zoom inn",
            olZoomOut: "Zoom ut",
            olFullScreenFalse: "Veksle fullskjermskart",
            olFullScreenTrue: "Veksle fullskjermskart",
            olRotateReset: "Tilbakestill rotasjon",
            // leftpanel.html
            mainUrl: "http://www.artsdatabanken.no",
            mainTitle: "Artskart",
            notificationsTooltip: "Antall nye nyhetssaker siste 14 dager er ",
            tabAboutTitle: "Om",
            tabSearchTitle: "Søk",
            tabDetailsTitle: "Detaljer",
            tabSymbolsTitle: "Symboler",
            // featureinfo.html
            showExternalTaxonInfo: "Vis taksoninfo på Artsdatabankens nettside", 
            noSelectionhelpText: "Ingen observasjon er valgt. Gjør et valg i kartet eller i listevisningen for å se detaljer.",
            showMainFeatures: "Vis utvalg",
            showAllFeatures: "Vis alt",
            showOriginalFeatures: "Original",
            removeLocationFromFilter: "Fjern lokalitet fra filteret",
            addLocationToFilter: "Vis kun valgte lokalitet",
            showPreviousObservation: "Vis forrige observasjon",
            showNextObservation: "Vis neste observasjon",
            reCategoryTitle: "Regionalt utdødd (RE), Norsk rødliste for arter",
            crCategoryTitle: "Kritisk truet (CR), Norsk rødliste for arter",
            enCategoryTitle: "Sterkt truet (EN), Norsk rødliste for arter",
            vuCategoryTitle: "Sårbar (VU), Norsk rødliste for arter",
            ntCategoryTitle: "Nær truet (NT), Norsk rødliste for arter",
            ddCategoryTitle: "Datamangel (D), Norsk rødliste for arter",
            lcCategoryTitle: "Livskraftig (LC), Norsk rødliste for arter",
            redlisted: "Rødlistet",
            threatened: "Truet",
            seCategoryTitle: "Svært høy risiko (SE), Fremmede arter i Norge",
            hiCategoryTitle: "Høy risiko (HI), Fremmede arter i Norge",
            phCategoryTitle: "Potensielt høy risiko (PH), Fremmede arter i Norge",
            loCategoryTitle: "Lav risiko (LO), Fremmede arter i Norge",
            nkCategoryTitle: "Ingen kjent risiko (NK), Fremmede arter i Norge",
            alienSpecies: "Fremmedart",
            regionallyAssessed: "Arten er regionalt vurdert som fremmed",
            taxonHeader: "Taksonomi",
            popularNameTitle: "Populærnavn:",
            taxonGroupTitle: "Artsgruppe:",
            scientificNameShortTitle: "Vit. navn",
            scientificNameTitle: "Vitenskapelig navn",
            scientificNameAuthorTitle: "Autor:",
            matchedScientificNameShortTitle: "Rapportert som:",
            matchedScientificNameTitle: "Synonymt vitenskapelig navn brukt på funnet",
            observationHeader: "Funnopplysninger",
            dateCollectedTitle: "Funndato:",
            collectorTitle: "Finner/samler:",
            yearIdentifiedTitle: "Bestemmelsesdato:",
            identifiedByTitle: "Artsbestemt av:",
            unspontaneousTitle: "Uspontan:",
            identificationTitle: "Usikker artsbestemmelse:",
            absentTitle: "Ikke funnet:",
            notRecoveredTitle: "Ikke gjenfunnet:",
            verifiedTitle: "Validert:",
            basisOfRecordTitle: "Funntype:",
            individualCountTitle: "Antall:",
            sexTitle: "Kjønn:",
            behaviorTitle: "Aktivitet:",
            okologiTitle: "Økologi:",
            habitatTitle: "Habitat:",
            substratTitle: "Substrat:",
            hasPicturesTitle: "Bilde(r):",
            rightsHolderTitle: "Rettighetshaver:",
            licenseTitle: "Lisens:",
            georeferenceHeader: "Georeferanse",
            latitudeTitle: "Breddegrad:",
            longitudeTitle: "Lengdegrad:",
            coordinatePrecisionTitle: "Koordinatpresisjon (m):",
            utmSoneTitle: "UTM-sone:",
            utmEastTitle: "UTM øst:",
            utmNorthTitle: "UTM nord:",
            mgrsFromTitle: "MGRS fra:",
            mgrsToTitle: "MGRS til:",
            coordinateSourceTitle: "Koordinatkilde:",
            elevationSourceTitle: "Høydedatakilde:",
            placeHeader: "Sted",
            countryTitle: "Land:",
            countyTitle: "Fylke:",
            municipalityTitle: "Kommune:",
            conservationAreaTitle: "Verneområde:",
            localityTitle: "Stedsnavn:",
            databaseDetailsHeader: "Databaseinformasjon",
            dateLastModifiedTitle: "Dato sist endret:",
            institutionNameTitle: "Institusjon: ",
            collectionTitle: "Samling: ",
            datasetTitle: "Prosjekt:",
            catalogNumberTitle: "Katalognummer: ",
            observationIdTitle: "Observasjons-id:",
            nodeIdTitle: "Artskartnode:",
            otherHeader: "Annet",
            occurrenceIdTitle: "OccurrenceId: ",
            minimumElevationTitle: "Minimum høyde:",
            maximumElevationTitle: "Maksimum høyde:",
            minimumDepthTitle: "Minimum dybde:",
            maximumDepthTitle: "Maksimum dybde:",
            notesTitle: "Notater:",
            collectingMethodTitle: "Metode:",
            protectedSpeciesTitle: "Skjermet funn:",
            urlTitle: "URL:",
            dynamicPropertiesTitle: "Dynamiske egenskaper:",
            feedbackObservationText: "Gi tilbakmelding på denne observasjonen",
            feedbackMailSubject1: "Angående observasjonen ",
            feedbackBody1: "Jeg kontakter dere angående denne observasjonen: ",
            feedbackBody2: "<Beskriv problemet her>",
            // treeview.html
            searchTitle: "Søk",
            searchBoundsTooltip: "Begrens utvalget ved å velge en art eller ved å definere et geografisk interesseområde",
            removeBoundsTooltip: "Fjern valgte interesseområde",
            zoomToPolygonTooltip: "Gå til valgte interesseområde",
            reducedObservationCountTooltip: "Antall observasjoner med gjeldende avgrensning",
            showHelpText: "Vis hjelpetekst",
            boundsHelpText: "Her kan du avgrense/klippe datamengden til det området du er interessert i.",
            simpleSearchTitle: "Enkelt søk",
            simpleSearchPlaceholder: "Søk på arter",
            includeSubTaxons: "Inkluder underliggende taksa",
            includeSubTaxonsTooltip: "Inkluder underliggende taksa ved søk på arter",
            taxonTreeHelpText: "Høyreklikk i treet for å bytte mellom populærnavn og vitenskapelige navn.",
            toggleScientificNames: "Klikk for å bytte mellom populærnavn og vitenskapelige navn",
            searchAreaPlaceholder: "Søk fylke, kommune, verneområde",
            speciesTreeTitle: "Artstre",
            languageChoiceTitle: "Bytt mellom bokmål, nynorsk og engelsk",            
            filterTitle: "Filter",
            filterTooltip: "Tematisk avgrensning av observasjonene utifra typer og variabler",
            filterCountTooltip: "Antall observasjoner i gjeldende utvalg",
            removeFilterTooltip: "Nullstill gjeldende observasjons-filter",
            filterHelpText: "Her ser du observasjonene som finnes innenfor ditt valgte område. Du kan filtrere utvalget ved hjelp av menyen.",
            advancedTitle: "Avansert",
            advancedTooltip: "Avanserte valg",
            advancedCountTooltip: "Antall observasjoner i gjeldende utvalg",
            removeAdvancedTooltip: "Nullstill gjeldene observasjons-filter",
            advancedHelpText: "Alle funn er knyttet til en samling, f.eks. har NHMs lavherbarium samlingsnavnet 'Lav'. Flere institusjoner kan bruke samme samlingsnavn. Et funn kan knyttes til et eller flere prosjekt eller 'datasett'. Funn fra et prosjekt kan knyttes til flere samlinger. Prosjektnavnet beskriver ofte formålet med kartleggingen. Ikke alle funn er knyttet til et prosjekt. Katalognummer er det interne nummeret til et funn eller belegg i en samling. Alle funn har unike nummer i en samling.",
            foundYearLabel: "Funn-år",
            foundYearTooltip: "Funn år fra-til. Bruk piltaster for finjusteringer",
            foundYearFrom: "Årstall fra ",
            foundYearTo: " til ",
            precisionLabel: "Koordinatpresisjon",
            precisionTooltip: "Koordinatpresisjon i meter fra-til. Bruk piltaster for finjusteringer",
            precisionFrom: "Koordinatpresisjon fra ",
            precisionTo: " til ",
            precisionUnit: " m",
            searchProjectPlaceholder: "Søk prosjekt",
            searchCollectionPlaceholder: "Søk samling",
            searchCatalogNumberPlaceholder: "Søk katalognummer",
            releaseInfoHead: "Versjon",
            // Layer names
            greyMap: "Gråtonekart",
            topo2: "Landkart",
            sjokart: "Sjøkart",
            europa: "Europakart",
            grunnkart: "Norges grunnkart",
            terreng: "Terreng",
            testRaster: "testRasterDescription",
            nibwmts: "Flyfoto",
            svalbard: "Svalbard",
            janMayen: "Jan Mayen",
            NiN: "Naturkartlegginger",
            NiNLandskap: "Landskapstyper",
            admGrenser: "Administrative grenser",
            vern: "Verneområder",
            bioseksjoner: "Bioklimatiske seksjoner 2017",
            biosoner: "Bioklimatiske soner 2017",
            openCycleMap: "Open Cycle Map",
            openStreetMap: "Open Street Map",
            road: "Bing Veikart",
            aerialWithLabels: "Bing Hybrid",
            // exportFileView
            exportJobId: "Eksport id",
            exportFilename: "Filnavn",
            exportFileSize: "Filstørrelse",
            deleteExport: "Slett eksport",
            exportExportJobStarted: "Jobb startet",
            exportExportJobFinished: "Jobb utført",
            fileExportProgress: "Framgang",
            exportStatusText: "Status",
            exportFileLink: "Lenke",
            exportDownload: "Last ned fil",
            removeExportStatus: "Fjern",
            exportStatusCreated: "Eksporterer ...",
            exportStatusProcessing: "Eksporter ...",
            exportStatusCompleted: "Utført",
            exportStatusFailed: "Feilet"
            },
            norwegian_no = {
                // system
                code: "No",
                norwegian_no: "Nynorsk",
                english: "Engelsk",
                warningServerUnavailable: "Får ikkje kontakt med tenar!",
                warningLoadRecords: "Kunne ikkje laste observasjonspunkt!",
                warningLoadRecordDetails: "Kunne ikkje laste observasjonsdetaljar!",
                warningLoadArea: "Kunne ikkje hente områdepolygon!",
                notImplemented: "Denne funksjonaliteten er førebels ikkje utforma.",

                warningIllegalbillett: "NB! Kunne ikkje hente godkjent billett for Norge Digitalt. Enkelte bakgrunnskart er difor ikkje tilgjengelege.",
                warningLayerUnavailable: "Dette bakgrunnskartet er diverre ikkje tilgjengeleg grunna ugyldig eller manglande billett til Norge Digitalt.",
                hideWarning: "Løyn feilmeldinga",
                clickHideWarning: "Klikk Løyner feilmeldinga",
                yes: "Ja",
                no: "Nei",
                unknown: "Ukjent",
                about: "Om Artskart",
                aboutUrl: "http://www.artsdatabanken.no/Pages/229607",
                // bookmark.html
                loadingBookmarkStatus: "Lastar utval frå bokmerke..",
                // gallery.html
                loadingGalleryStatus: "Lastar galleriet..",
                galleryCountStatus1: "Utvalet har ",
                galleryCountStatus2: " observasjonar med bilete.",
                galleryNothingStatus: "Utvalet inneheld ingen observasjonar med bilete.",
                galleryLoadMore: "Last fleire bilete",
                galleryLoadingMore: "Lastar fleire bilete...",
                // galleryToolbar.html
                licenseInfoTitle: "Lisensinfo",
                licenseInfoUrl: "http://www.artsdatabanken.no/Pages/229607",
                // legend.html
                showCategoryLegend: "Kategori",
                showSpeciesLegend: "Arter",
                showPrecisionLegend: "Presisjon",
                reLegendTitle: "1. Regionalt utdøydd",
                crLegendTitle: "2. Kritisk truga",
                enLegendTitle: "3. Sterkt truga",
                vuLegendTitle: "4. Sårbar",
                ntLegendTitle: "5. Nær truga",
                ddLegendTitle: "6. Datamangel",
                lcLegendTitle: "7. Livskraftig",
                naLegendTitle: "13. Ikkje egna",
                neLegendTitle: "14. Ikkje vurdert",
                nrLegendTitle: "15. Ikkje vurdert",
                seLegendTitle: "8. Svært høg risiko",
                hiLegendTitle: "9. Høg risiko",
                phLegendTitle: "10. Potensielt høg risiko",
                loLegendTitle: "11. Låg risiko",
                nkLegendTitle: "12. Ingen kjent risiko",
                legendRedlistHeader: "Norsk raudliste for arter",
                legendAlienSpeciesHeader: "Framande arter i Noreg",
                legendHelpText1: "Storleiken på sirklane i kartet symboliserer talet på observasjonar i punktet.",
                legendHelpText2: "Fargen på sirkelen viser den høgste kategorien i punktet, ikkje talet på observasjonar av arter i den høgste kategorien.",
                legendHelpText3: "Kategoriane er rangert frå 1-13, som vist over der 1. Regionalt utdøydd, representerer den høgste kategorien. Med unntak av karplanter, er ikkje lågare taksonomiske nivå enn art vurdert for Raudlista for arter eller Framandartslista. Funn rapportert på lågare nivå (f.eks. underart) får i Artskart same kategori som arten.",
                legendHelpText4: "I Norsk raudliste for arter vert kategorien Ikkje egna NA brukt om arter som ikkje reproduserer fast i Noreg (gjester) og til framande arter. Dei fleste framande arter har både kategoriane NA i Norsk raudliste for arter, og ein risikokategori i framande arter i Noreg. I de tilfelle der ein art både er vurdert som NA i Norsk raudliste for arter og har ein kategori i Framande arter i Noreg, er det framandartskategorien som vert rangert høgast.",
                legendSpeciesHeader: "Teikntyding arter",
                legendSpeciesHelpText1: "Inntil 20 ulike arter vert vist.",
                legendSpeciesHelpText2: "Dersom det er fleire arter på same lokasjon, visest eige symbol.",
                legendPrecisionHeader: "Teikntyding koordinatpresisjon",
                legendPrecisionHelpText1: "Skalaen er trinnlaus, her visest berre nokre døme.",
                legendPrecisionHelpText2: "Koordinatpresisjonen er knytta til lokasjon, ikkje observasjon.",
                // listToolbar.html
                exportEnabledTitle: "Eksportér utvalet",
                exportDisabledTitle: "Utvalet er for stort for eksport (>",
                exportDisabledTitle2: "Del opp utvalet i fleire deler.",
                exportTitle: "Eksport",
                exportExcelTitle: "Eksportér i MS Excel-format",
                exportCsvTitle: "Eksportér i .csv-format",
                exportExcelName: "MS Excel",
                exportCsvName: ".csv",
                exportVerbatimTitle: "Eksportér originaldata",
                exportVerbatimName: "Original",
                exportInfoUrl: "http://www.artsdatabanken.no/Pages/233436",
                exportInfoTitle: "Info om eksport",
                // listView.html
                listCountStatus: " observasjonar i utvalet",
                columnInstitution: "Institusjon",
                columnCollection: "Samling",
                categoryCollection: "Kategori",
                columnScientificName: "Vit. navn",
                columnScientificNameAuthor: "Autor",
                columnPopularName: "Norsk navn",
                columnTaxonGroup: "Artsgruppe",
                columnCollector: "Finnar/Samlar",
                columnCollected: "Funndato",
                columnLocality: "Lokalitet",
                columnPresicion: "Presisjon",
                columnMunicipality: "Kommune",
                columnCounty: "Fylke",
                columnCount: "Antal",
                columnBasisOfRecord: "Funntype",
                columnBehavior: "Aktivitet",
                columnIdentifiedBy: "Artsbestemt av",
                columnVerified: "Validert",
                columnDetails: "Vis detaljar",
                detailsText: "Detaljar",
                listPageStatusText1: "Side ",
                listPageStatusText2: ". Totalt ",
                listPageStatusText3: " observasjonar i ditt utval.",
                //pager.html
                showFirstPageTitle: "Vis første side",
                fastBackwardsTitle: "Hopp bakover",
                showPreviousPageTitle: "Vis førre side",
                showNextPageTitle: "Vis neste side",
                fastForwardsTitle: "Hopp framover",
                showLastPageTitle: "Vis siste side",
                showPageTitle: "Vis side ",
                // mainPanel.html
                copyLinkHelpTextWin: "Kopier denne lenka ved å markere ho og trykke CTRL+C",
                closeButtonTitle: "Lukk",
                toggleLeftMenuButtonTitle: "Veksle meny",
                mainDropdownTitle: "Velg innhald i hovudvindauge",
                // siteInfo.html
                welcomeHeader: "Velkomen til tenesta Artskart",
                aboutHeader: "Om Artskart",
                aboutText1: "Artsdatabanken og ",
                aboutGbifText: "GBIF-Norge",
                aboutGbifUrl: "https://www.gbif.no/",
                aboutText2: " har laga denne tenesta for å formidle geografisk stadfesta artsinformasjon frå ulike dataeigarar. Her kan du sjå kvar arter er funne eller observert. Du kan sjå kva arter som er funne innafor eit geografisk område, eit fylke eller ei kommune. Dei fleste arter er ikkje fullstendig kartlagt, og arter kan ha forsvunne frå lokaliteten dei har vore rapportert på tidlegare.",
                aboutMoreUrl: "http://artsdatabanken.no/artskart/om?Key=1435226523",
                contributorsTitle: "Bidragsytarar",
                contributorsUrl: "http://artsdatabanken.no/artskart/bidragsytere?Key=1435226523",
                guidelinesTitle: "Retningsliner for bruk og sitering",
                guidelinesUrl: "http://artsdatabanken.no/Pages/233436?Key=1435226523",
                pictureLicencingTitle: "Kort om bruk av bilete",
                pictureLicencingUrl: "http://artsdatabanken.no/Pages/229607?Key=1435226523",
                qualityOfDataTitle: "Kvalitetssikring og forbetring av dataene",
                qualityOfDataUrl: "http://artsdatabanken.no/Pages/233743",
                dataFormatTitle: "Dataformat og nedlasting",
                dataFormatUrl: "http://artsdatabanken.no/Pages/233748",
                contactText1: "Har du forslag eller spørsmål til tenesta Artskart kan du sende e-post til ",
                contactText2: ". Om du har spørsmål knytta til konkrete funn kan du også ta kontakt direkte med institusjonen som står som eigar av funnet.",
                feedTitle: "Kunngjeringar",
                feedErrorMessage: "Kunne ikkje laste rss-feed!",
                // statistics.html
                makingStatisticsStatus: "Lagar statistikk for ditt utval..",
                showStatisticsStatus1: "Viser statistikk for ditt utval på ",
                showStatisticsStatus2: "  observasjonar.",
                noStatisticsToShow: "Utvalet inneheld ingen observasjonar.",
                statInstitutionHeader: "Institusjonar",
                statSpeciesHeader: "Arter",
                statTaxonGroupHeader: "Artsgrupper",
                statOtherHeader: "Eigenskaper",
                statColumnInstitution: "Institusjon",
                statColumnCount: "Talet på observasjonar",
                statColumnDistinct: "Talet på unike arter",
                statColumnScientificName: "Vitskapleg navn",
                statColumnCategory: "Kategori",
                statColumnAuthor: "Autor",
                statColumnPopularName: "Norsk navn",
                statColumnCumulativeCount: "% av det totalet talet på observasjonar",
                statCumulativeCount: "Kumulativ teljing: ",
                statShowMore: "Vis fleire...",
                statShowAll: "Vis alle",
                statShowEmptyYears: "Vis også år utan observasjonar",
                statRedHeader: "Raudlistekategoriar",
                statBlackHeader: "Framandartskategoriar",
                statColumnPercent: "%",
                statColumnBasisOfRecord: "Funntype",
                statColumnBehavior: "Aktivitet",
                statColumnMonth: "Pr månad",
                statColumnTags: "Anna",
                statColumnTaxonGroups: "Artsgrupper",
                statYearHeader: "Antal per år",
                statColumnYear: "År",
                statTotalText1: "Totalt ",
                statTotalText2: " år med observasjonar",
                statTotalText3: " takson",
                yearChartYAxisText: "Antal",
                yearChartYAxisTitle: "Antal observasjonar",
                yearChartBarTitle1: "Observert i ",
                yearChartBarTitle2: " % av utval",
                //nav.js
                routeMapName: "Kart",
                routeMapTitle: "Vis utval i kart",
                routeListName: "Liste",
                routeListTitle: "Vis utval i liste",
                routeStatName: "Statistikk",
                routeStatTitle: "Vis statistikk for utvalet",
                routeGalleryName: "Galleri",
                routeGalleryTitle: "Vis galleri basert på utval",
                routeBookmarkName: "Bokmerke",
                routeBookmarkTitle: "Gjenopprett side frå bokmerke",
                routeExportStatusName: "Eksportjobbar",
                routeExportStatusTitle: "Vis status på fileksportjobbar",

                // treeview.js
                taxonGroups: "Artsgrupper",
                categories: "Raudliste- og framandartskategori",
                basisOfRecords: "Funntype",
                behaviors: "Aktivitet",
                institutions: "Institusjonar",
                months: "Månader",
                other: "Anna",
                images: "Med/utan bilete",
                foundStatus: "Funne/ikkje funne",
                notRecoveredStatus: "Gjenfunne/ikkje gjenfunne",
                valid: "Valideringsstatus",
                unsureIdentification: "Sikker/usikker artsbestemming",
                spontanious: "Spontan/uspontan",
                conservationStatus: "Freda/Prioriterte arter",
                popularNameMenu: "Populærnavn",
                scientificNameMenu: "Vitskapleg navn",
                // maptoolbar.html
                zoomToCurrentLocationTooltip: "Posisjonen din",
                drawPolygonTooltip: "Teikn eit omriss rundt ditt interesseområde for å bruke dette som geografisk filter",
                backgroundLayersTooltip: "Vis tilgjengelege bakgrunnslag",
                showMapLayersPlaceholder: "Vis tilgjengelege kartlag",
                shareLinkTitle: "Del lenke",
                showLegendTitle: "Vis/Vel teikntyding",
                changeLanguageTitle: "Endre språk",
                createBookmarkTitle: "Lag eit bokmerke for gjeldande filter og utsnitt",
                openBookmarkTitle: "Gå til bokmerke",
                removeBookmarkTitle: "Fjern bokmerke",
                zoomToLocationWatermark: "Søk i Norgeskart, stad/gbn...",
                locationHint: "Skriv inn stadnamn eller kombinasjon av kommunenummer, gardsnummer og bruksnummer (t.d. 1101-1/2)",
                // mapOl3.js
                olAttribution: "Info om kartlaga",
                olZoomIn: "Zoom inn",
                olZoomOut: "Zoom ut",
                olFullScreenFalse: "Veksle fullskjermskart",
                olFullScreenTrue: "Veksle fullskjermskart",
                olRotateReset: "Tilbakestill rotasjon",
                // leftpanel.html
                mainUrl: "http://www.artsdatabanken.no",
                mainTitle: "Artskart",
                notificationsTooltip: "Talet på nye nyhendesaker siste 14 dagar er ",
                tabAboutTitle: "Om",
                tabSearchTitle: "Søk",
                tabDetailsTitle: "Detaljar",
                tabSymbolsTitle: "Symbol",
                // featureinfo.html
                showExternalTaxonInfo: "Vis taksoninfo på Artsdatabanken si nettside",
                noSelectionhelpText: "Ingen observasjon er vald. Gjer eit val i kartet eller i listevisinga for å sjå detaljar.",
                showMainFeatures: "Vis utval",
                showAllFeatures: "Vis alt",
                showOriginalFeatures: "Original",
                removeLocationFromFilter: "Fjern lokalitet frå filteret",
                addLocationToFilter: "Vis berre vald lokalitet",
                showPreviousObservation: "Vis forrige observasjon",
                showNextObservation: "Vis neste observasjon",
                reCategoryTitle: "Regionalt utdøydd (RE), Norsk raudliste for arter",
                crCategoryTitle: "Kritisk truga (CR), Norsk raudliste for arter",
                enCategoryTitle: "Sterkt truga (EN), Norsk raudliste for arter",
                vuCategoryTitle: "Sårbar (VU), Norsk raudliste for arter",
                ntCategoryTitle: "Nær truga (NT), Norsk raudliste for arter",
                ddCategoryTitle: "Datamangel (D), Norsk raudliste for arter",
                lcCategoryTitle: "Livskraftig (LC), Norsk raudliste for arter",
                redlisted: "Raudlista",
                threatened: "Truga",
                seCategoryTitle: "Svært høg risiko (SE), Framande arter i Noreg",
                hiCategoryTitle: "Høg risiko (HI), Framande arter i Noreg",
                phCategoryTitle: "Potensielt høg risiko (PH), Framande arter i Noreg",
                loCategoryTitle: "låg risiko (LO), Framande arter i Noreg",
                nkCategoryTitle: "Ingen kjend risiko (NK), Framande arter i Noreg",
                alienSpecies: "Framandart",
                regionallyAssessed: "Arten er regionalt vurdert som framand",
                taxonHeader: "Taksonomi",
                popularNameTitle: "Populærnavn:",
                taxonGroupTitle: "Artsgruppe:",
                scientificNameShortTitle: "Vit. navn",
                scientificNameTitle: "Vitskapleg navn",
                scientificNameAuthorTitle: "Autor:",
                matchedScientificNameShortTitle: "Rapportert som::",
                matchedScientificNameTitle: "Synonymt vitskapleg navn brukt på funnet",
                observationHeader: "Funnopplysningar",
                dateCollectedTitle: "Funndato:",
                collectorTitle: "Finnar/samlar:",
                yearIdentifiedTitle: "Bestemmingsdato:",
                identifiedByTitle: "Artsbestemt av:",
                unspontaneousTitle: "Uspontan:",
                identificationTitle: "Usikker artsbestemmelse:",
                absentTitle: "Ikke funnet:",
                notRecoveredTitle: "Ikke gjenfunnet:",
                verifiedTitle: "Validert:",
                basisOfRecordTitle: "Funntype:",
                individualCountTitle: "Antal:",
                sexTitle: "Kjønn:",
                behaviorTitle: "Aktivitet:",
                okologiTitle: "Økologi:",
                habitatTitle: "Habitat:",
                substratTitle: "Substrat:",
                hasPicturesTitle: "Bilete:",
                rightsHolderTitle: "Eigarrett:",
                licenseTitle: "Lisens:",
                georeferenceHeader: "Georeferanse",
                latitudeTitle: "Breiddegrad:",
                longitudeTitle: "Lengdegrad:",
                coordinatePrecisionTitle: "Koordinatpresisjon (m):",
                utmSoneTitle: "UTM-sone:",
                utmEastTitle: "UTM aust:",
                utmNorthTitle: "UTM nord:",
                mgrsFromTitle: "MGRS frå:",
                mgrsToTitle: "MGRS til:",
                coordinateSourceTitle: "Koordinatkjelde:",
                elevationSourceTitle: "Høgdedatakjelde:",
                placeHeader: "Stad",
                countryTitle: "Land:",
                countyTitle: "Fylke:",
                municipalityTitle: "Kommune:",
                conservationAreaTitle: "Verneområde:",
                localityTitle: "Stadnavn:",
                databaseDetailsHeader: "Databaseinformasjon",
                dateLastModifiedTitle: "Dato sist endra:",
                institutionNameTitle: "Institusjon: ",
                collectionTitle: "Samling: ",
                datasetTitle: "Prosjekt:",
                catalogNumberTitle: "Katalognummer: ",
                observationIdTitle: "ObservasjonsID:",
                nodeIdTitle: "Artskartnode:",
                otherHeader: "Annet",
                occurrenceIdTitle: "OccurrenceID: ",
                minimumElevationTitle: "Minimum høgde:",
                maximumElevationTitle: "Maksimum høgde:",
                minimumDepthTitle: "Minimum djup:",
                maximumDepthTitle: "Maksimum djup:",
                notesTitle: "Notat:",
                collectingMethodTitle: "Metode:",
                protectedSpeciesTitle: "Skjerma funn:",
                urlTitle: "URL:",
                dynamicPropertiesTitle: "Dynamiske eigenskapar:",
                feedbackObservationText: "Gje melding tilbake på denne observasjonen",
                feedbackMailSubject1: "Om observasjonen ",
                feedbackBody1: "Eg kontaktar dykk om denne observasjonen: ",
                feedbackBody2: "<Skriv om problemet her>",
                // treeview.html
                searchTitle: "Søk",
                searchBoundsTooltip: "Avgrens utvalet ved å velgje ein art eller ved å definere eit geografisk interesseområde",
                removeBoundsTooltip: "Fjern det valde interesseområdet",
                zoomToPolygonTooltip: "Gå til det valde interesseområdet",
                reducedObservationCountTooltip: "Talet på observasjonar med gjeldande avgrensing",
                showHelpText: "Vis hjelpetekst",
                boundsHelpText: "Her kan du avgrense datamengda til det området du er interessert i.",
                simpleSearchTitle: "Enkelt søk",
                simpleSearchPlaceholder: "Søk på arter",
                includeSubTaxons: "Inkludér underliggjande taksa",
                includeSubTaxonsTooltip: "Inkludér underliggjande taksa ved søk på arter",
                taxonTreeHelpText: "Høgreklikk i treet for å byte mellom populærnavn og vitskapelege navn.",
                toggleScientificNames: "Klikk for å byte mellom populærnavn og vitskapelege navn",
                searchAreaPlaceholder: "Søk fylke, kommune, verneområde",
                speciesTreeTitle: "Artstre",
                languageChoiceTitle: "Byt mellom bokmål, nynorsk og engelsk",
                filterTitle: "Filter",
                filterTooltip: "Tematisk avgrensing av observasjonene ut frå typar og variablar",
                filterCountTooltip: "Talet på observasjonar i gjeldande utval",
                removeFilterTooltip: "Nullstill gjeldande observasjons-filter",
                filterHelpText: "Her ser du observasjonane som fins innanfor ditt valde område. Du kan filtrere utvalet ved hjelp av menyen.",
                advancedTitle: "Avansert",
                advancedTooltip: "Avanserte val",
                advancedCountTooltip: "Talet på observasjonar i gjeldande utval",
                removeAdvancedTooltip: "Nullstill gjeldande observasjons-filter",
                advancedHelpText: "Alle funn er knytta til ei samling, f.eks. har NHMs lavherbarium samlingsnavnet 'lav'. Fleire institusjonar kan bruke same samlingsnavn. Eit funn kan knyttast til eit eller fleire prosjekt eller 'datasett'. Funn frå eit prosjekt kan knyttast til fleire samlingar. Prosjektnavnet skildrar ofte formålet med kartlegginga. Ikkje alle funn er knytta til eit prosjekt. Katalognummer er det interne nummeret til eit funn eller belegg i ei samling. Alle funn har unike nummer i ein samling.",
                foundYearLabel: "Funn-år",
                foundYearTooltip: "Funn år frå-til. Bruk piltastar for finjusteringar",
                foundYearFrom: "Årstall frå ",
                foundYearTo: " til ",
                precisionLabel: "Koordinatpresisjon",
                precisionTooltip: "Koordinatpresisjon i meter frå-til. Bruk piltaster for finjusteringar",
                precisionFrom: "Koordinatpresisjon frå ",
                precisionTo: " til ",
                precisionUnit: " m",
                searchProjectPlaceholder: "Søk prosjekt",
                searchCollectionPlaceholder: "Søk samling",
                searchCatalogNumberPlaceholder: "Søk katalognummer",
                releaseInfoHead: "Versjon",
                // Layer names
                greyMap: "Gråtonekart",
                topo2: "Landkart",
                sjokart: "Sjøkart",
                europa: "Europakart",
                grunnkart: "Norges grunnkart",
                terreng: "Terreng",
                testRaster: "testRasterDescription",
                nibwmts: "Flyfoto",
                svalbard: "Svalbard",
                janMayen: "Jan Mayen",
                NiN: "Naturkartleggingar",
                NiNLandskap: "Landskapstypar",
                admGrenser: "Administrative grenser",
                vern: "Verneområde",
                bioseksjoner: "Bioklimatiske seksjonar 2017",
                biosoner: "Bioklimatiske soner 2017",
                openCycleMap: "Open Cycle Map",
                openStreetMap: "Open Street Map",
                road: "Bing Veikart",
                aerialWithLabels: "Bing Hybrid",
                // exportFileView
                exportJobId: "Eksport id",
                exportFilename: "Filnavn",
                exportFileSize: "Filstørrelse",
                deleteExport: "Slett eksport",
                exportExportJobStarted: "Jobb starta",
                exportExportJobFinished: "Jobb utført",
                fileExportProgress: "Framgang",
                exportStatusText: "Status",
                exportFileLink: "Lenke",
                exportDownload: "Last ned fil",
                removeExportStatus: "Fjern",
                exportStatusCreated: "Eksporterer ...",
                exportStatusProcessing: "Eksportér ...",
                exportStatusCompleted: "Utført",
                exportStatusFailed: "Feilet"
            },
            english = {
            // system
            code: "En",
            norwegian: "Norwegian",
            english: "English",
            warningServerUnavailable: "Server unavailable!",
            warningLoadRecords: "Could not load records!",
            warningLoadRecordDetails: "Could not load record details!",
            warningLoadArea: "Could not load area polygon!",
            notImplemented: "This view is not yet implemented.",

            warningIllegalToken: "NB! Could not find valid token for Norge digitalt. Consequently, some maps are not available.",
            warningLayerUnavailable: "This map layer is unfortunately not available due to missing Norge digitalt token.",
            hideWarning: "Hide warning",
            clickHideWarning: "Click to hide warning",
            yes: "Yes",
            no: "No",
            unknown: "Unknown",
            about: "About Artskart",
            aboutUrl: "http://www.artsdatabanken.no/Pages/229607",
            // bookmark.html
            loadingBookmarkStatus: "Loading filter from bookmark..",
            // gallery.html
            loadingGalleryStatus: "Loading gallery..",
            galleryCountStatus1: "Current selection has ",
            galleryCountStatus2: " records with pictures.",
            galleryNothingStatus: "Current selection has no records with pictures.",
            galleryLoadMore: "Load more pictures",
            galleryLoadingMore: "Loading images...",
            // galleryToolbar.html
            licenseInfoTitle: "License info",
            licenseInfoUrl: "http://www.artsdatabanken.no/Pages/229607",
            // legend.html
            showCategoryLegend: "Categories",
            showSpeciesLegend: "Species",
            showPrecisionLegend: "Precision",
            reLegendTitle: "1. Regionally Extinct",
            crLegendTitle: "2. Critically Endangered",
            enLegendTitle: "3. Endangered",
            vuLegendTitle: "4. Vulnerable",
            ntLegendTitle: "5. Near Threatened",
            ddLegendTitle: "6. Data Deficient",
            lcLegendTitle: "7. Least Concern",
            naLegendTitle: "13. Not assessed",
            neLegendTitle: "14. Not evaluated",
            seLegendTitle: "8. Severe impact",
            hiLegendTitle: "9. High impact",
            phLegendTitle: "10. Potentially high impact",
            loLegendTitle: "11. Low impact",
            nkLegendTitle: "12. No known impact",
            nrLegendTitle: "15. Not risk-assessed",
            legendRedlistHeader: "Norwegian Red List for Species",
            legendAlienSpeciesHeader: "Alien species in Norway",
            legendHelpText1: "The size of the circles indicates the number of observations at the locality.",
            legendHelpText2: "The color of the circles represents the highest Red List or Alien Species List category at the locality.",
            legendHelpText3: "The categories are ranked from 1-13, as shown above where 1, Regionally Extinct, represents the «highest» category. Observations of lower taxonomic rank than species,  such as  subspecies, will inherit the category of the species.",
            legendHelpText4: "Species not reproducing regurarely in Norway (vagrants) and introduced species is assignes the category NA (Not Applicalble). Most introduced species are assessed both as NA for the Norwegian Red List, and has an category in the “Alien Species in Norway - with the Norwegian Alien Species List 2012”. In event a species both is assessed as NA and has a Alien Species List category, the Alien Species List category is ranked highest.",
            legendSpeciesHeader: "Species legend",
            legendSpeciesHelpText1: "Legend for a maximum of 20 species is shown.",
            legendSpeciesHelpText2: "When there are more than a single species at a location, a special symbol is shown.",
            legendPrecisionHeader: "Legend for coordinate precision",
            legendPrecisionHelpText1: "The scale is continous, only examples shown here.",
            legendPrecisionHelpText2: "The coordinate precision is related to the locality, not the individual observartion.",
            // listToolbar.html
            exportEnabledTitle: "Export selection",
            exportDisabledTitle: "Selection is too large for export (>",
            exportDisabledTitle2: "Try to divide the selection in multiple parts..",
            exportTitle: "Export",
            exportExcelTitle: "Export using MS Excel format",
            exportCsvTitle: "Export using .csv format",
            exportExcelName: "MS Excel",
            exportCsvName: ".csv",
            exportVerbatimTitle: "Export verbatim",
            exportVerbatimName: "Original",
            exportInfoUrl: "http://www.artsdatabanken.no/Pages/233436",
            exportInfoTitle: "Info about export",
            // listView.html
            listCountStatus: " records in selection",
            columnInstitution: "Institution",
            columnCollection: "Collection",
            categoryCollection: "Category",
            columnScientificName: "Sci. name",
            columnScientificNameAuthor: "Author",
            columnPopularName: "Norwegian name",
            columnTaxonGroup: "Taxon group",
            columnCollector: "Collector",
            columnCollected: "Date collected",
            columnLocality: "Locality",
            columnPresicion: "Precision",
            columnMunicipality: "Municipality",
            columnCounty: "County",
            columnCount: "Count",
            columnBasisOfRecord: "Basis of record",
            columnBehavior: "Behavior",
            columnIdentifiedBy: "Identified by",
            columnVerified: "Verified",
            columnDetails: "Show details",
            detailsText: "Details",
            listPageStatusText1: "Page ",
            listPageStatusText2: ". There is a total of ",
            listPageStatusText3: " records in your selection.",
            //pager.html
            showFirstPageTitle: "Show first page",
            fastBackwardsTitle: "Fast backwards",
            showPreviousPageTitle: "Show previous page",
            showNextPageTitle: "Show next page",
            fastForwardsTitle: "Fast forwards",
            showLastPageTitle: "Show last page",
            showPageTitle: "Show page ",
            // mainPanel.html
            copyLinkHelpTextWin: "To copy the link, mark it and then press CTRL+C",
            closeButtonTitle: "Close",
            toggleLeftMenuButtonTitle: "Toggle menu",
            mainDropdownTitle: "Select content of main window",
            // siteInfo.html
            welcomeHeader: "Welcome to Species Map",
            aboutHeader: "About Species Map",
            aboutText1: "The Norwegian Biodiversity Information Centre (NBIC) and ",
            aboutGbifText: "GBIF Norway",
            aboutGbifUrl: "https://www.gbif.no/",
            aboutText2: " have jointly developed this service for distributing information about species observations. With this service you can see where species have been found or observed. You can search an area, state or municipality.",
            aboutMoreUrl: "http://www.artsdatabanken.no/Pages/244843",
            contributorsTitle: "Contributors",
            contributorsUrl: "https://artsdatabanken.no/Pages/240260",
            guidelinesTitle: "Instructions for use",
            guidelinesUrl: "https://artsdatabanken.no/Pages/240424",
            pictureLicencingTitle: "Image licensing",
            pictureLicencingUrl: "https://artsdatabanken.no/Pages/240431",
            qualityOfDataTitle: "Quality control and improvement",
            qualityOfDataUrl: "https://artsdatabanken.no/Pages/240486",
            dataFormatTitle: "Data format and downloads",
            dataFormatUrl: "https://artsdatabanken.no/Pages/241505",
            contactText1: "If you have suggestions for improvement or questions about the Species Map service, please email us at ",
            contactText2: ". For queries about specific observations, please contact the data owner directly.",
            feedTitle: "News",
            feedErrorMessage: "Could not load rss-feed!",
            // statistics.html
            makingStatisticsStatus: "Generating statistics, please wait..",
            showStatisticsStatus1: "Statistics based on your selection of ",
            showStatisticsStatus2: "  records.",
            noStatisticsToShow: "Selection contains no records.",
            statInstitutionHeader: "Institutions",
            statSpeciesHeader: "Species",
            statTaxonGroupHeader: "Taxon groups",
            statOtherHeader: "Properties",
            statColumnInstitution: "Institution",
            statColumnCount: "Record count",
            statColumnDistinct: "Distinct species",
            statColumnScientificName: "Scientific name",
            statColumnCategory: "Category",
            statColumnAuthor: "Author",
            statColumnPopularName: "Norwegian name",
            statColumnCumulativeCount: "% of the total",
            statCumulativeCount: "Cumulative count: ",
            statShowMore: "Show more...",
            statShowAll: "Show all",
            statShowEmptyYears: "Show years without observations",
            statRedHeader: "Red List categories",
            statBlackHeader: "Alien Species List categories",
            statColumnPercent: "%",
            statColumnBasisOfRecord: "Basis of record",
            statColumnBehavior: "Behavior",
            statColumnMonth: "Per month",
            statColumnTags: "Tags",
            statColumnTaxonGroups: "Taxon groups",
            statYearHeader: "Species / year",
            statColumnYear: "Year",
            statTotalText1: "A total of ",
            statTotalText2: " years",
            statTotalText3: " taxons",
            yearChartYAxisText: "Count",
            yearChartYAxisTitle: "Number of observations",
            yearChartBarTitle1: "Observed in ",
            yearChartBarTitle2: " % of selection",
            //nav.js
            routeMapName: "Map",
            routeMapTitle: "Show selection on map",
            routeListName: "List",
            routeListTitle: "Show selection as list",
            routeStatName: "Statistics",
            routeStatTitle: "Show statistics for selection",
            routeGalleryName: "Gallery",
            routeGalleryTitle: "Show a picture gallery based on selection",
            routeBookmarkName: "Bookmark",
            routeBookmarkTitle: "Restore page from a bookmark",
            routeExportStatusName: "Export jobs",
            routeExportStatusTitle: "Show file export jobs status",
            // treeview.js
            taxonGroups: "Taxon groups",
            categories: "Categories",
            basisOfRecords: "Basis of record",
            behaviors: "Behaviors",
            institutions: "Institutions",
            months: "Months",
            other: "Other",
            images: "Pictures",
            foundStatus: "Found",
            notRecoveredStatus: "Not recovered",
            valid: "Verified observations",
            unsureIdentification: "Unsure identification",
            spontanious: "Spontaneous",
            conservationStatus: "Conservation",
            popularNameMenu: "Norwegian name",
            scientificNameMenu: "Scientific name",
            // maptoolbar.html
            zoomToCurrentLocationTooltip: "Zoom to current location",
            drawPolygonTooltip: "Draw a polygon to use it as a spatial filter",
            backgroundLayersTooltip: "Show available base layers",
            showMapLayersPlaceholder: "Show available map layers",
            shareLinkTitle: "Share link",
            showLegendTitle: "Show/choose legend",
            changeLanguageTitle: "Change language",
            createBookmarkTitle: "Create bookmark for current extent and filter",
            openBookmarkTitle: "Go to bookmark",
            removeBookmarkTitle: "Remove bookmark",
            zoomToLocationWatermark: "Zoom to location...",
            locationHint: "Type a location name or a property number (eg. 1101-1/2)",
            // mapOl3.js
            olAttribution: "Attribution",
            olZoomIn: "Zoom in",
            olZoomOut: "Zoom out",
            olFullScreenFalse: "Toggle full screen",
            olFullScreenTrue: "Toggle full screen",
            olRotateReset: "Reset rotation",
            // leftpanel.html
            mainUrl: "//www.biodiversity.no/",    
            mainTitle: "Species Map",
            notificationsTooltip: "The number of the new notifications during the last 14 days is ",
            tabAboutTitle: "About",
            tabSearchTitle: "Search",
            tabDetailsTitle: "Details",
            tabSymbolsTitle: "Symbols",
            // featureinfo.html
            showExternalTaxonInfo: "Show more taxon info",
            noSelectionhelpText: "Click on an observation to see details",
            showMainFeatures: "Show main",
            showAllFeatures: "Show all",
            showOriginalFeatures: "Verbatim",
            removeLocationFromFilter: "Remove location from filter",
            addLocationToFilter: "Show just this location",
            showPreviousObservation: "Show previous observation",
            showNextObservation: "Show next observation",
            reCategoryTitle: "Regionally Extinct (RE), The Norwegian Red List for Species",
            crCategoryTitle: "Critically Endangered (CR), The Norwegian Red List for Species",
            enCategoryTitle: "Endangered  (EN), The Norwegian Red List for Species",
            vuCategoryTitle: "Vulnerable (VU), The Norwegian Red List for Species",
            ntCategoryTitle: "Near Threatened (NT), The Norwegian Red List for Species",
            ddCategoryTitle: "Data Deficient (D), The Norwegian Red List for Species",
            lcCategoryTitle: "Least Concern (LC), The Norwegian Red List for Species",
            redlisted: "Redlisted",
            threatened: "Threatened",
            seCategoryTitle: "Severe impact (SE), The Norwegian Alien Species List",
            hiCategoryTitle: "High impact (HI), The Norwegian Alien Species List",
            phCategoryTitle: "Potentially high impact (PH), The Norwegian Alien Species List",
            loCategoryTitle: "Low impact (LO), The Norwegian Alien Species List",
            nkCategoryTitle: "No known impact (NK), The Norwegian Alien Species List",
            alienSpecies: "Alien species",
            regionallyAssessed: "The species is regionally assessed as alien",
            taxonHeader: "Taxon",
            popularNameTitle: "Norwegian name:",
            taxonGroupTitle: "Taxon group:",
            scientificNameShortTitle: "Sci. name",
            scientificNameTitle: "Scientific name",
            matchedScientificNameShortTitle: "Reported as:",
            matchedScientificNameTitle: "Synonymous scientific name used on record",
            scientificNameAuthorTitle: "Author:",
            observationHeader: "Record",
            dateCollectedTitle: "Date collected:",
            collectorTitle: "Collector:",
            yearIdentifiedTitle: "Event date:",
            identifiedByTitle: "Identified by:",
            unspontaneousTitle: "Unspontaneous:",
            identificationTitle: "Uncertain identification:",
            absentTitle: "Absent:",
            notRecoveredTitle: "Not recovered:",
            verifiedTitle: "Verified:",
            basisOfRecordTitle: "Basis of record:",
            individualCountTitle: "Individual count:",
            sexTitle: "Sex:",
            behaviorTitle: "Behavior:",
            okologiTitle: "Ecology:",
            habitatTitle: "Habitate:",
            substratTitle: "Substrate:",
            hasPicturesTitle: "Picture(s):",
            rightsHolderTitle: "Rightsholder:",
            licenseTitle: "License:",
            georeferenceHeader: "Georeference",
            latitudeTitle: "Latitude:",
            longitudeTitle: "Longitude:",
            coordinatePrecisionTitle: "Coordinate precision(m):",
            utmSoneTitle: "UTM-zone:",
            utmEastTitle: "UTM east:",
            utmNorthTitle: "UTM north:",
            mgrsFromTitle: "MGRS from:",
            mgrsToTitle: "MGRS to:",
            coordinateSourceTitle: "Coordinate source:",
            elevationSourceTitle: "Elevation source:",
            placeHeader: "Location",
            countryTitle: "Country:",
            countyTitle: "County:",
            municipalityTitle: "Municipality:",
            conservationAreaTitle: "Conservation area:",
            localityTitle: "Location name:",
            databaseDetailsHeader: "Database details",
            dateLastModifiedTitle: "Date last modified:",
            institutionNameTitle: "Institution:",
            collectionTitle: "Collection:",
            datasetTitle: "Data set:",
            catalogNumberTitle: "Catalogue number:",
            observationIdTitle: "Observation id:",
            nodeIdTitle: "Artskartnode:",
            otherHeader: "Other",
            occurrenceIdTitle: "Occurrence id:",
            minimumElevationTitle: "Minimum elevation:",
            maximumElevationTitle: "Maximum elevation:",
            minimumDepthTitle: "Minimum depth:",
            maximumDepthTitle: "Maximum depth:",
            notesTitle: "Notes:",
            collectingMethodTitle: "Collecting method:",
            protectedSpeciesTitle: "Locality data withheld:",
            urlTitle: "URL:",
            dynamicPropertiesTitle: "Dynamic properties:",
            feedbackObservationText: "Give feedback on this observation",
            feedbackMailSubject1: "Regarding the observation ",
            feedbackBody1: "Regarding the observation... ",
            feedbackBody2: "<Describe the problem here>",
            // treeview.html
            searchTitle: "Search",
            searchBoundsTooltip: "Limit the search result by adding a species or a geographic area.",
            removeBoundsTooltip: "Clear search",
            zoomToPolygonTooltip: "Zoom to selected area of interest",
            reducedObservationCountTooltip: "Number of observations within the current selection",
            showHelpText: "Show help text",
            boundsHelpText: "Limit the search result by adding species or geographical areas",
            simpleSearchTitle: "Simple search",
            simpleSearchPlaceholder: "Search species",
            includeSubTaxons: "Include sub taxons",
            includeSubTaxonsTooltip: "Include sub taxons in search results",
            taxonTreeHelpText: "Right click in the tree to switch between showing scientific names and Norwegian names.",
            toggleScientificNames: "Click to switch between showing scientific and Norwegian names",
            searchAreaPlaceholder: "Search county, municipality, conservation areas",
            speciesTreeTitle: "Tree view",
            languageChoiceTitle: "Change language to Norwegian or English",
            filterTitle: "Filter",
            filterTooltip: "Filter selection based on observation- or species properties",
            filterCountTooltip: "Number of observations in current selection",
            removeFilterTooltip: "Reset current observations filter",
            filterHelpText: "Filter selection based on observation- or species properties.",
            advancedTitle: "Advanced",
            advancedTooltip: "Advanced filtering",
            advancedCountTooltip: "Number of observations in current selection",
            removeAdvancedTooltip: "Clear current advanced filter",
            advancedHelpText: "Search name of project (datasetName), collection or catalogue number.",
            foundYearLabel: "Years",
            foundYearTooltip: "From year / to year. Use arrow keys for small adjustments",
            foundYearFrom: "Years from ",
            foundYearTo: " to ",
            precisionLabel: "Coordinate precision",
            precisionTooltip: "Coordinate precision in meter from/to. Use arrow keys for small adjustments",
            precisionFrom: "Coordinate precision from ",
            precisionTo: " to ",
            precisionUnit: " m",
            searchProjectPlaceholder: "Search project",
            searchCollectionPlaceholder: "Search collection",
            searchCatalogNumberPlaceholder: "Search catalogue number",
            releaseInfoHead: "Release",
            // Layer names
            greyMap: "Greyscale map",
            topo2: "Topographic map",
            sjokart: "Nautical map",
            europa: "Europakart",
            grunnkart: "Norges grunnkart",
            terreng: "Terrain",
            testRaster: "testRasterDescription",
            nibwmts: "Aerial photography",
            svalbard: "Svalbard",
            janMayen: "Jan Mayen",
            NiN: "Naturkartlegginger",
            NiNLandskap: "Landskapstyper",
            admGrenser: "Administrative boundaries",
            vern: "Protected areas",
            bioseksjoner: "Bioclimatic sections 2017",
            biosoner: "Bioclimatic zones 2017",
            openCycleMap: "Open Cycle Map",
            openStreetMap: "Open Street Map",
            road: "Bing road map",
            aerialWithLabels: "Bing Hybrid",
            // exportStatus
            exportJobId: "Export id",
            exportFilename: "File name",
            exportFileSize: "File size",
            deleteExport: "Delete eksport",
            exportExportJobStarted: "Job started",
            exportExportJobFinished: "Job finished",
            fileExportProgress: "Progress",
            exportStatusText: "Status",
            exportFileLink: "Link",
            exportDownload: "Download file",
            removeExportStatus: "Remove",
            exportStatusCreated: "Exporting ...",
            exportStatusProcessing: "Exporting ...",
            exportStatusCompleted: "Completed",
            exportStatusFailed: "Failed"
        },
        
        selectedLanguage = ko.observable(norwegian),

            vm = {
                setLanguage: function (lang) {                    
                    if (lang == 'nb-NO') {
                        selectedLanguage(norwegian); 
                    } else if (lang == 'nn-NO') {
                        selectedLanguage(norwegian_no);
                    } else if (lang == 'EN') {
                        selectedLanguage(english);
                    }
                    app.trigger('resource:languageChanged', selectedLanguage().Code);
                },
            res: selectedLanguage 
        };

        return vm;

    });

define('services/application',['knockout', 'lodash', 'services/config','durandal/app', 'services/resource'/*, 'moment'*/],
    function (ko, _, conf, app, resource/*, moment*/) {
        "use strict";
        var currFeature =
        {
            data: null,
            metadata: null
        };

        var ExportStatus = function (data) {
            var self = this;            
            self.jobId = ko.observable(data.ExportJobId);
            self.backgroundJobId = ko.observable(data.BackgroundJobId);
            self.filter = ko.observable(data.Filter);
            //self.exportName = ko.observable(data.ExportName);
            self.status = ko.observable(data.status || 0);
            self.progress = ko.observable(data.progress || 0);
            self.link = ko.computed(function() {
                return conf.exportAdmApiUrl + "Files/" + self.jobId();
            });
            //self.jobStarted = ko.observable("");
            self.jobFinished = ko.observable(data.jobFinished);
            self.fileSize = ko.observable(data.FileSize ? data.FileSize : 0);
            self.downloadIsActive = ko.computed(function () {
                return self.status() === 2;
            });
            self.statusText = ko.computed(function() {
                if (self.status() === 0) return resource.res().exportStatusCreated;
                if (self.status() === 1) return resource.res().exportStatusProcessing;
                if (self.status() === 2) return resource.res().exportStatusCompleted;
                if (self.status() === 3) return resource.res().exportStatusFailed;
            });
            self.jobFinishedAsString = ko.computed(function () {
                if (!self.jobFinished()) return "";
                //return moment(self.jobFinished()).format('DD.MM.YYYY HH:mm:ss');
                return formatTimestamp(self.jobFinished());
            });
        };
        var SerializableExportStatus = function(vmExportstatus) {
            var self = this;
            self.ExportJobId = vmExportstatus.jobId();
            self.BackgroundJobId = vmExportstatus.backgroundJobId();
            self.status = vmExportstatus.status();
            self.progress = vmExportstatus.progress();
            //self.jobStarted = vmExportstatus.jobStarted();
            self.jobFinished = vmExportstatus.jobFinished();
            self.FileSize = vmExportstatus.fileSize();
            self.Filter = vmExportstatus.filter();
        };

        //var saveJob = function (exportJob) {
        //    var persistedJobs = JSON.parse(window.localStorage.getItem(conf.exportStatusesLocalStorageKey));
        //    if (!persistedJobs) {
        //        persistedJobs = [];
        //    }
        //    persistedJobs.push(exportJob);
        //    window.localStorage.setItem(conf.exportStatusesLocalStorageKey, JSON.stringify(persistedJobs));
        //    // den nye eksportjobben består av bare to parametre
        //};

        var formatTimestamp = function(date) {
            var d = new Date(date),
                month = '' + (d.getMonth() + 1),
                day = '' + d.getDate(),
                year = d.getFullYear(),
                hour = d.getHours(),
                min = d.getMinutes(),
                sec = d.getSeconds();

            if (month.length < 2) month = '0' + month;
            if (day.length < 2) day = '0' + day;
            if (hour.length < 2) hour = '0' + hour;
            if (min.length < 2) min = '0' + min;
            if (sec.length < 2) sec = '0' + sec;

            return [year, month, day].join('-') + ' ' + [hour, min, sec].join(':');
        };

        var footerWarning = ko.observable(false);
        var footerWarningText = ko.observable("");
        var setFooterWarning = function (text) {
            footerWarning(text.length > 0);
            footerWarningText(text);
        };
        var showAbout = function() {
            app.trigger("showAboutPage:trigger");
        };
        var showLegend = function () {
            app.trigger("showLegendPage:trigger");
        };
        var locationName = ko.observable("Enkeltlokasjon");
        var ndToken = ko.observable();
        var ndWorking = false;
        var requestNdToken = function () {
            if (ndWorking) return;
            ndWorking = true;
            var url = 'https://www.norgeskart.no/ws/gkt.py'; //conf.apiurl + 'token/getToken'; //'https://www.norgeskart.no/ws/gkt.py';
            $.get(url, function (data) {
                var parts = data.split('"');
                var t = {
                    value: parts[1],
                    expires: new Date().getTime() + 60 * 60 * 1000,
                    when: Date.now()
                };
                ndToken(t.value);
                window.localStorage.setItem(conf.mapTokenStorageKey, JSON.stringify(t));
                ndWorking = false;
            });
        };

        var stringifyArray = function (theArray, totalNodes) {
            if (theArray.length === totalNodes) {
                return "";
            }
            var arrayString = JSON.stringify(theArray);
            arrayString = arrayString.substr(1, arrayString.length - 2);
            return arrayString;
        };

        var getNdToken = function () {
            var now = Date.now();
            var token = JSON.parse(window.localStorage.getItem(conf.mapTokenStorageKey));
            if (token) {
                ndToken(token.value);
                console.debug("token.expires:" + token.expires);
                console.log(new Date(now + 10 * 60 * 1000));
                if (token.value && token.expires && token.expires > (now + 10 * 60 * 1000)) {
                    console.log("% Valid token loaded from localstorage: " + JSON.stringify(token));
                    return token;
                }
                else if (!token.when || token.when < (now - 60 * 1000)) { // Limit retries to once every minute.
                    console.log("% Token is old");
                    requestNdToken();
                }
            }
            return false; // Return false, because the value will be recomputed when the ajax call is done anyway.
        };
        var initToken = ko.computed(function () {
            var token = getNdToken(), now = Date.now();
            console.debug("check if we need fetching token. Token:" + token);
            if (!token || !token.value || (token.expires && token.expires < (now + 10 * 60 * 1000))) {
                console.debug("fetching token");
                requestNdToken();
            }
            // if(!token) console.error("No valid token");
            return token ? token.value : "";
        });

        var connection = $.hubConnection(conf.signalrRootUrl, { useDefaultPath: false });
        connection.logging = true;

        var exportMonitor = connection.createHubProxy('exportmonitor');

        exportMonitor.on("progress", function (jobId, progress) {
            console.log("exportMonitor: progress");
            var updateJob = ko.utils.arrayFirst(vm.exportStatusList(), function(element) {
                 return element.jobId() === jobId;
            });
            if (updateJob) {
                // oppdaterer VM
                updateJob.progress(progress);
                updateJob.status(1);
                vm.saveExportStatusList();
            }
            
            
            //var persistedJobs = JSON.parse(window.localStorage.getItem(conf.exportStatusesLocalStorageKey));
            //var job = persistedJobs.find(function (element) {
            //    return element.ExportJobId === jobId;
            //});
            //if (job) {
            //    // localstorage
            //    job.status = 1;
            //}
            //window.localStorage.setItem(conf.exportStatusesLocalStorageKey, JSON.stringify(persistedJobs));
        });

        exportMonitor.on("completed", function(jobId, jobFinished, link, size) {
                console.log("Job " + jobId + " completed at " + jobFinished);
                var updateJob = ko.utils.arrayFirst(vm.exportStatusList(),
                    function(element) {
                        return element.jobId() === jobId;
                    });
            if (updateJob) {
                // VM lista
                    updateJob.progress(100);
                    updateJob.status(2);
                    updateJob.jobFinished(jobFinished);
                    updateJob.fileSize(size);
                    //updateJob.link(link);
                    vm.saveExportStatusList();
                }
            
            //    var persistedJobs = JSON.parse(window.localStorage.getItem(conf.exportStatusesLocalStorageKey));
            //    var job = persistedJobs.find(function (element) {
            //        return element.ExportJobId === jobId;
            //    });
            //if (job) {
            //    // localstorage
            //        job.progress = 100;
            //        job.status = 2;
            //        job.jobFinished = jobFinished;
            //        job.link = link;
            //        job.fileSize = size;
            //    }

            //window.localStorage.setItem(conf.exportStatusesLocalStorageKey, JSON.stringify(persistedJobs));
            // oppdater localstorage
        });
        exportMonitor.on("failed", function (jobId, jobFinished) {
            console.log("Job " + jobId + " failed at " + jobFinished);
            var updateJob = ko.utils.arrayFirst(vm.exportStatusList(),
                function (element) {
                    return element.jobId() === jobId;
                });
            if (updateJob) {
                // VM lista
                updateJob.progress(100);
                updateJob.status(3);
                updateJob.jobFinished(jobFinished);
                updateJob.fileSize(0);
                //updateJob.link(link);
                vm.saveExportStatusList();
            }
        });

        //notfound
        exportMonitor.on("notfound", function (jobId) {
            console.log("Job " + jobId + " not found on server");
            
            var updateJob = ko.utils.arrayFirst(vm.exportStatusList(),
                function (element) {
                    return element.jobId() === jobId;
                });
            if (updateJob) {
                vm.exportStatusList.remove(updateJob);
                vm.saveExportStatusList();
            }
        });


        var start = function() {
            try {
                connection.start().done(function() {
                    console.log('Hub has started');
                });
            } catch (err) {
                console.log(err);
                setTimeout(() => start(), 5000);
            }
        };

        start();
        
        var currentFeature = function (data, metadata) {
            currFeature.data = data;
            currFeature.metadata = metadata;
        },

            viewportState = {
                zoom: ko.observable(conf.defaultMapZoom),
                center: ko.observable(conf.defaultMapCenter),
                background: ko.observable(conf.initialBaseMapLayer),
                id: ko.observable()
            },
            filter = {
                TaxonIds: ko.observableArray([]),
                NodeIds: ko.observableArray([]),
                AreaIds: ko.observableArray([]),
                TaxonGroupIds: ko.observableArray([]),
                IncludeSubTaxonIds: ko.observable(true),
                Months: ko.observableArray([]),
                Categories: ko.observableArray([]),
                BasisOfRecords: ko.observableArray([]),
                Behaviors: ko.observableArray([]),
                InstitutionIds: ko.observableArray([]),
                CollectionIds: ko.observableArray([]),
                CatalogNumbers: ko.observableArray([]),
                Img: ko.observableArray([]),   // har/har ikke bilde..
                Found: ko.observableArray([2]), // funnet/ikke funnet
                NotRecovered: ko.observableArray([]), // gjenfunnet/ikke gjenfunnet
                Valid: ko.observableArray([]), // validert/ikke validert
                UnsureId: ko.observableArray([]), // sikker/usikker artsbestemmelse
                Spontan: ko.observableArray([]), // Spontan/uspontan
                Cons: ko.observableArray([]), // fredet/prioritert art
                CenterPoints: ko.observable(false),
                Geometry: ko.observable(""),
                BoundingBox: ko.observable(""),
                EpsgCode: ko.observable("32633"),
                IndexFrom: ko.observable(0),
                IndexTo: ko.observable(25),
                GroupBy: ko.observable(""),
                Style: ko.observable(1),
                LocationId: ko.observable(0),
                YearFrom: ko.observable(0),
                YearTo: ko.observable(0),
                CoordinatePrecisionFrom: ko.observable(0),
                CoordinatePrecisionTo: ko.observable(0),
                ForceRefreshToggle: ko.observable(false)    // used to force refresh of polygons
            },
            // TODO: Refactor the different filter-copies
            saveableFilter = function () {
                return {
                    Name: "The Great Filter",
                    ViewportZoom: viewportState.zoom(),
                    ViewportCenter: viewportState.center(),
                    ViewportBackground: viewportState.background(),
                    TaxonIds: filter.TaxonIds,
                    NodeIds: filter.NodeIds,
                    AreaIds: filter.AreaIds,
                    TaxonGroupIds: filter.TaxonGroupIds,
                    IncludeSubTaxonIds: filter.IncludeSubTaxonIds,
                    Months: filter.Months,
                    Categories: filter.Categories,
                    BasisOfRecords: filter.BasisOfRecords,
                    Behaviors: filter.Behaviors,
                    InstitutionIds: filter.InstitutionIds,
                    CollectionIds: filter.CollectionIds,
                    CatalogNumbers: filter.CatalogNumbers,
                    Img: filter.Img,
                    Found: filter.Found,
                    NotRecovered: filter.NotRecovered,
                    Valid: filter.Valid,
                    UnsureId: filter.UnsureId,
                    Spontan: filter.Spontan,
                    Cons: filter.Cons,
                    Geometry: filter.Geometry,
                    EpsgCode: filter.EpsgCode,
                    IndexFrom: filter.IndexFrom,
                    IndexTo: filter.IndexTo,
                    GroupBy: filter.GroupBy,
                    Style: filter.Style,
                    LocationId: filter.LocationId,
                    YearFrom: filter.YearFrom,
                    YearTo: filter.YearTo,
                    CoordinatePrecisionFrom: filter.CoordinatePrecisionFrom,
                    CoordinatePrecisionTo: filter.CoordinatePrecisionTo
                };
            },

            listFilter = function () {
                return {
                    TaxonIds: filter.TaxonIds,
                    AreaIds: filter.AreaIds,
                    NodeIds: filter.NodeIds,
                    TaxonGroupIds: [stringifyArray(filter.TaxonGroupIds(), conf.filterGroupCounts.TaxonGroupIds)],
                    IncludeSubTaxonIds: filter.IncludeSubTaxonIds,
                    Months: [stringifyArray(filter.Months(), conf.filterGroupCounts.Months)],
                    Categories: [stringifyArray(filter.Categories(), conf.filterGroupCounts.Categories)],
                    BasisOfRecords: [stringifyArray(filter.BasisOfRecords(), conf.filterGroupCounts.BasisOfRecords)],
                    Behaviors: [stringifyArray(filter.Behaviors())],
                    InstitutionIds: [stringifyArray(filter.InstitutionIds(), conf.filterGroupCounts.InstitutionIds)],
                    CollectionIds: [stringifyArray(filter.CollectionIds())],
                    CatalogNumbers: filter.CatalogNumbers,
                    Img: [stringifyArray(filter.Img(), conf.filterGroupCounts.Img)],
                    Found: [stringifyArray(filter.Found(), conf.filterGroupCounts.Found)],
                    NotRecovered: [stringifyArray(filter.NotRecovered(), conf.filterGroupCounts.NotRecovered)],
                    Valid: [stringifyArray(filter.Valid(), conf.filterGroupCounts.Valid)],
                    UnsureId: [stringifyArray(filter.UnsureId(), conf.filterGroupCounts.UnsureId)],
                    Spontan: [stringifyArray(filter.Spontan(), conf.filterGroupCounts.Spontan)],
                    Cons: filter.Cons,
                    //CenterPoints: filter.CenterPoints,
                    Geometry: filter.Geometry,
                    EpsgCode: filter.EpsgCode,
                    LocationId: filter.LocationId,
                    //GroupBy: filter.GroupBy,
                    //Style: filter.Style,
                    YearFrom: filter.YearFrom,
                    YearTo: filter.YearTo,
                    CoordinatePrecisionFrom: filter.CoordinatePrecisionFrom,
                    CoordinatePrecisionTo: filter.CoordinatePrecisionTo

                };
            },

            searchFilter = function () {
                return {
                    TaxonIds: filter.TaxonIds,
                    AreaIds: filter.AreaIds,
                    NodeIds: filter.NodeIds,
                    TaxonGroupIds: [stringifyArray(filter.TaxonGroupIds(), conf.filterGroupCounts.TaxonGroupIds)],
                    IncludeSubTaxonIds: filter.IncludeSubTaxonIds,
                    Months: [stringifyArray(filter.Months(), conf.filterGroupCounts.Months)],
                    Categories: [stringifyArray(filter.Categories(), conf.filterGroupCounts.Categories)],
                    BasisOfRecords: [stringifyArray(filter.BasisOfRecords(), conf.filterGroupCounts.BasisOfRecords)],
                    Behaviors: [stringifyArray(filter.Behaviors())],
                    InstitutionIds: [stringifyArray(filter.InstitutionIds(), conf.filterGroupCounts.InstitutionIds)],
                    CollectionIds: [stringifyArray(filter.CollectionIds())],
                    CatalogNumbers: filter.CatalogNumbers,
                    Img: [stringifyArray(filter.Img(), conf.filterGroupCounts.Img)],
                    Found: [stringifyArray(filter.Found(), conf.filterGroupCounts.Found)],
                    NotRecovered: [stringifyArray(filter.NotRecovered(), conf.filterGroupCounts.NotRecovered)],
                    Valid: [stringifyArray(filter.Valid(), conf.filterGroupCounts.Valid)],
                    UnsureId: [stringifyArray(filter.UnsureId(), conf.filterGroupCounts.UnsureId)],
                    Spontan: [stringifyArray(filter.Spontan(), conf.filterGroupCounts.Spontan)],
                    Cons: filter.Cons,
                    CenterPoints: filter.CenterPoints,
                    Geometry: filter.Geometry,
                    EpsgCode: filter.EpsgCode,
                    LocationId: filter.LocationId,
                    GroupBy: filter.GroupBy,
                    Style: filter.Style,
                    YearFrom: filter.YearFrom,
                    YearTo: filter.YearTo,
                    CoordinatePrecisionFrom: filter.CoordinatePrecisionFrom,
                    CoordinatePrecisionTo: filter.CoordinatePrecisionTo
                };
            },
            locationFilter = function () {
                return {
                    TaxonIds: filter.TaxonIds,
                    AreaIds: filter.AreaIds,
                    NodeIds: filter.NodeIds,
                    TaxonGroupIds: [stringifyArray(filter.TaxonGroupIds(), conf.filterGroupCounts.TaxonGroupIds)],
                    IncludeSubTaxonIds: filter.IncludeSubTaxonIds,
                    Months: [stringifyArray(filter.Months(), conf.filterGroupCounts.Months)],
                    Categories: [stringifyArray(filter.Categories(), conf.filterGroupCounts.Categories)],
                    BasisOfRecords: [stringifyArray(filter.BasisOfRecords(), conf.filterGroupCounts.BasisOfRecords)],
                    Behaviors: [stringifyArray(filter.Behaviors())],
                    InstitutionIds: [stringifyArray(filter.InstitutionIds(), conf.filterGroupCounts.InstitutionIds)],
                    CollectionIds: [stringifyArray(filter.CollectionIds())],
                    CatalogNumbers: filter.CatalogNumbers,
                    Img: [stringifyArray(filter.Img(), conf.filterGroupCounts.Img)],
                    Found: [stringifyArray(filter.Found(), conf.filterGroupCounts.Found)],
                    NotRecovered: [stringifyArray(filter.NotRecovered(), conf.filterGroupCounts.NotRecovered)],
                    Valid: [stringifyArray(filter.Valid(), conf.filterGroupCounts.Valid)],
                    UnsureId: [stringifyArray(filter.UnsureId(), conf.filterGroupCounts.UnsureId)],
                    Spontan: [stringifyArray(filter.Spontan(), conf.filterGroupCounts.Spontan)],
                    Cons: filter.Cons,
                    Geometry: filter.Geometry,
                    BoundingBox: filter.Geometry,
                    EpsgCode: filter.EpsgCode,
                    LocationId: filter.LocationId(),    // NB dereferenced!
                    Style: filter.Style,
                    YearFrom: filter.YearFrom,
                    YearTo: filter.YearTo,
                    CoordinatePrecisionFrom: filter.CoordinatePrecisionFrom,
                    CoordinatePrecisionTo: filter.CoordinatePrecisionTo
                };
            },
            urlFilter = function () {
                return {
                    TaxonIds: filter.TaxonIds,
                    AreaIds: filter.AreaIds,
                    NodeIds: filter.NodeIds,
                    Months: filter.Months,
                    TaxonGroupIds: filter.TaxonGroupIds,
                    IncludeSubTaxonIds: filter.IncludeSubTaxonIds,
                    Categories: filter.Categories,
                    BasisOfRecords: filter.BasisOfRecords,
                    Behaviors: filter.Behaviors,
                    InstitutionIds: filter.InstitutionIds,
                    CollectionIds: filter.CollectionIds,
                    CatalogNumbers: filter.CatalogNumbers,
                    Img: filter.Img,
                    Found: filter.Found,
                    NotRecovered: filter.NotRecovered,
                    Valid: filter.Valid,
                    UnsureId: filter.UnsureId,
                    Spontan: filter.Spontan,
                    Cons: filter.Cons,
                    CenterPoints: filter.CenterPoints,
                    Geometry: filter.Geometry,
                    BoundingBox: filter.BoundingBox,
                    LocationId: filter.LocationId,
                    //GroupBy: filter.GroupBy,
                    Style: filter.Style,
                    YearFrom: filter.YearFrom,
                    YearTo: filter.YearTo,
                    CoordinatePrecisionFrom: filter.CoordinatePrecisionFrom,
                    CoordinatePrecisionTo: filter.CoordinatePrecisionTo
                };
            },
            countFilter = function () {
                return {
                    //CenterPoints: filter.CenterPoints,
                    //GroupBy: filter.GroupBy,
                    //Style: filter.Style,
                    TaxonIds: filter.TaxonIds,
                    AreaIds: filter.AreaIds,
                    NodeIds: filter.NodeIds,
                    TaxonGroupIds: [stringifyArray(filter.TaxonGroupIds(), conf.filterGroupCounts.TaxonGroupIds)],
                    IncludeSubTaxonIds: filter.IncludeSubTaxonIds,
                    Months: [stringifyArray(filter.Months(), conf.filterGroupCounts.Months)],
                    Categories: [stringifyArray(filter.Categories(), conf.filterGroupCounts.Categories)],
                    BasisOfRecords: [stringifyArray(filter.BasisOfRecords(), conf.filterGroupCounts.BasisOfRecords)],
                    Behaviors: [stringifyArray(filter.Behaviors())],
                    InstitutionIds: [stringifyArray(filter.InstitutionIds(), conf.filterGroupCounts.InstitutionIds)],
                    CollectionIds: [stringifyArray(filter.CollectionIds())],
                    CatalogNumbers: filter.CatalogNumbers,
                    Img: [stringifyArray(filter.Img(), conf.filterGroupCounts.Img)],
                    Found: [stringifyArray(filter.Found(), conf.filterGroupCounts.Found)],
                    NotRecovered: [stringifyArray(filter.NotRecovered(), conf.filterGroupCounts.NotRecovered)],
                    Valid: [stringifyArray(filter.Valid(), conf.filterGroupCounts.Valid)],
                    UnsureId: [stringifyArray(filter.UnsureId(), conf.filterGroupCounts.UnsureId)],
                    Spontan: [stringifyArray(filter.Spontan(), conf.filterGroupCounts.Spontan)],
                    Cons: filter.Cons,
                    //CenterPoints: filter.CenterPoints,
                    Geometry: filter.Geometry,
                    EpsgCode: filter.EpsgCode,
                    LocationId: filter.LocationId,
                    //GroupBy: filter.GroupBy,
                    //Style: filter.Style,
                    YearFrom: filter.YearFrom,
                    YearTo: filter.YearTo,
                    CoordinatePrecisionFrom: filter.CoordinatePrecisionFrom,
                    CoordinatePrecisionTo: filter.CoordinatePrecisionTo
                };
            },
            reduceFilter = function () {
                return {
                    TaxonIds: filter.TaxonIds,
                    IncludeSubTaxonIds: filter.IncludeSubTaxonIds,
                    AreaIds: filter.AreaIds,
                    Geometry: filter.Geometry,
                    EpsgCode: filter.EpsgCode,
                    LocationId: filter.LocationId
                };
            },

            removeFilter = function (type) {
                if (type === undefined) {
                    return;
                }
                filter[type].removeAll();
            },
            arrContains = function (arr, s) {
                var r, i;
                r = false;
                i = arr.length;
                while (i--) {
                    if (arr[i] === s) {
                        r = true;
                        i = 0;
                    }
                }
                return r;
            },
            updateFilterNoDupe = function (add, type, code) {
                if (type === undefined) {
                    return false;
                }
                if (!arrContains(filter[type](), code)) {
                    if (add === true) {
                        filter[type].push(code);
                        return true;
                    }
                } else {
                    if (add !== true) {
                        filter[type](_.without(filter[type](), code));
                    }
                }
                return false;
            },
            updateFilter = function (add, type, code) {
                if (type === undefined) {
                    return;
                }
                if (add === true) {
                    filter[type].push(code);
                } else {
                    filter[type](_.without(filter[type](), code));
                }
            },
            addSeparator = function (number) {
                number += '';
                var x = number.split('.');
                var x1 = x[0];
                var x2 = x.length > 1 ? '.' + x[1] : '';
                var rgx = /(\d+)(\d{3})/;
                while (rgx.test(x1)) {
                    x1 = x1.replace(rgx, '$1' + ' ' + '$2');
                }
                return x1 + x2;
            },

            viewportStateChanged = ko.computed(function () {
                var dummy;
                _.forEach(_.keys(viewportState), function (key) {
                    dummy = viewportState[key]();
                });
                return viewportState;
            }).extend({ rateLimit: 10 }),
            listFilterChanged = ko.computed(function () {
                // trigger changes in filter unless it's just BoundingBox (zoom/pan in the map)
                var dummy;
                _.forEach(_.keys(filter), function (key) {
                    if (key !== "BoundingBox") {
                        dummy = filter[key]();
                    }
                });
                return filter;
            }).extend({ rateLimit: 100 }),

            filterChanged = ko.computed(function () {
                var dummy;
                _.forEach(_.keys(filter), function (key) {
                    dummy = filter[key]();
                });
                return filter;
            }).extend({ rateLimit: 100 }),

            fixDates = function () {
                $.datepicker.regional.no =
                    {
                        clearText: "Tøm",
                        clearStatus: "",
                        closeText: "Lukk",
                        closeStatus: "",
                        prevText: "&laquo;Forrige",
                        prevStatus: "",
                        prevBigText: "&#x3c;&#x3c;",
                        prevBigStatus: "",
                        nextText: "Neste&raquo;",
                        nextStatus: "",
                        nextBigText: "&#x3e;&#x3e;",
                        nextBigStatus: "",
                        currentText: "I dag",
                        currentStatus: "",
                        monthNames: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"],
                        monthNamesShort: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des"],
                        monthStatus: "",
                        yearStatus: "",
                        weekHeader: "Uke",
                        weekStatus: "",
                        dayNamesShort: ["Søn", "Man", "Tir", "Ons", "Tor", "Fre", "Lør"],
                        dayNames: ["Søndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "Lørdag"],
                        dayNamesMin: ["Sø", "Ma", "Ti", "On", "To", "Fr", "Lø"],
                        dayStatus: "DD",
                        dateStatus: "D, M d",
                        dateFormat: "yy-mm-dd",
                        firstDay: 0,
                        initStatus: "",
                        isRTL: false
                    };
                $.datepicker.setDefaults($.datepicker.regional.no);
            },
            formatDate = function (dateString) {
                if (!dateString) {
                    return "";
                }
                return $.datepicker.formatDate('d. M yy', new Date(dateString));
            },
            formatDateSorting = function (dateString) {
                return $.datepicker.formatDate('yyyy-mm-dd', new Date(dateString));
            },
            pad = function (n, width, z) {
                z = z || '0';
                n = n + '';
                return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
            },
            isSecure = function () {
                return window.location.protocol === 'https:';
            },
            isIe = navigator.userAgent.match(/MSIE\s([\d.]+)/),
            ie11 = navigator.userAgent.match(/Trident\/7.0/) && navigator.userAgent.match(/rv:11/),
            ieEdge = navigator.userAgent.match(/Edge/g),
            ieVer = isIe ? isIe[1] : ie11 ? 11 : ieEdge ? 12 : -1,

            GUILang =
                //sjekk om verdi finnes i localstorage
                localStorage.language ? ko.observable(localStorage.getItem("language")) : ko.observable('nb-NO'),

            treeLang =
                //sjekk om verdi finnes i localstorage
                localStorage.treeLanguage ? ko.observable(localStorage.getItem("treeLanguage")) : ko.observable('nb-NO'),

            vm = {
                rebuildTree: ko.observable(false),
                bookmarks: ko.observableArray([]),
                exportStatusList: ko.observableArray([]),
                taxonLegend: ko.observableArray([]),
                precisionLegend: ko.observableArray([]),
                ndToken: ndToken,//Value,

                setFooterWarning: setFooterWarning,
                footerWarning: footerWarning,
                footerWarningText: footerWarningText,

                currFeature: currFeature,
                currentLayer: ko.observable(),
                
                
                config: conf,

                

                updateFilter: updateFilter,
                updateFilterNoDupe: updateFilterNoDupe,
                removeFilter: removeFilter,

                addSeparator: addSeparator,
                viewportState: viewportState,
                filter: filter,
                saveableFilter: saveableFilter,
                listFilter: listFilter,
                locationFilter: locationFilter,
                searchFilter: searchFilter,
                urlFilter: urlFilter,
                countFilter: countFilter,
                reduceFilter: reduceFilter,

                viewportStateChanged: viewportStateChanged,
                filterChanged: filterChanged,
                listFilterChanged: listFilterChanged,
                currentFeature: currentFeature,

                routeInfo: conf.routeInfo,
                fixDates: fixDates,
                formatDate: formatDate,
                formatDateSorting: formatDateSorting,
                showAbout: showAbout,
                showLegend: showLegend,
                connection: connection,
                exportMonitor: exportMonitor,

                pad: pad,
                isIe: isIe,
                isIe11: ie11,
                ieVer: ieVer,
                isSecure: isSecure,

                locationName: locationName,

                // set base layer: get from local storage if it already exists, or set as grey map if not
                bsLayer: localStorage.baseLayer ? ko.observable(localStorage.getItem("baseLayer")) : ko.observable('greyMap'),

                // set current layer into local storage
                updateBsLayer: function (layerName) {
                    localStorage.setItem("baseLayer", layerName);
                    vm.bsLayer(layerName);
                },

                // inneholder kartlag fra local storage
                layers: ko.observableArray([]),
                // brukes for å oppdatere arrayet av kartlag
                overlayLayers: ko.observableArray([]),
                // henter kartlag fra localStorage
                setOverlayLayers: function () {
                    // hvis noen av kartlagene har vært tidligere valgt, legges de i en beholder
                    if (localStorage.activeLayers) {
                        var retrieved = JSON.parse(localStorage.getItem("activeLayers"));
                        vm.layers = retrieved;
                    } else {
                        // hvis ingen kartlag har vært valgt før, er arrayet tomt 
                        vm.layers = ko.observableArray([]);
                    }
                },
                activeLayers: localStorage.activeLayers ? ko.observable(localStorage.getItem("activeLayers")) : ko.observableArray([]),
                // add active layers
                updateOlLayers: function (layerName) {
                    // if there are layers in local storage from before, add them first
                    if (localStorage.activeLayers) {
                        var previous = eval(JSON.parse(localStorage.getItem("activeLayers")));
                        for (var i = 0; i < previous.length; i++) {
                            if (vm.overlayLayers.indexOf(previous[i]) == -1) {
                                vm.overlayLayers.push(previous[i]);
                            }
                        }
                    }
                // add current layer if it is not already in the array 
                    if (vm.overlayLayers.indexOf(layerName) == -1) {
                        vm.overlayLayers.push(layerName);
                    }
                // update local storage
                    localStorage.setItem("activeLayers", JSON.stringify(ko.toJSON(vm.overlayLayers)));
                    
                },
                // fjerner kartlag
                removeLayer: function (layerName) {
                    // hvis noen kartlag har blitt valgt tidligere, legger dem inn i arrayet
                    if (localStorage.activeLayers) {
                        var previous = eval(JSON.parse(localStorage.getItem("activeLayers")));
                        for (var i = 0; i < previous.length; i++) {
                            // sjekker om kartlag finnes i arrayet fra tidligere
                            if (vm.overlayLayers.indexOf(previous[i]) == -1) {
                                vm.overlayLayers.push(previous[i]);
                            }
                        }
                    }
                    // fjerner aktuelle kartlaget fra arrayet
                    vm.overlayLayers.remove(layerName);
                    // oppdaterer localStorage
                    localStorage.setItem("activeLayers", JSON.stringify(ko.toJSON(vm.overlayLayers)));
                },

                // GUI language
                languagePreference: GUILang,
                getLanguage: GUILang,
                
                // language in taxon tree                
                treeLanguage: treeLang,

                setTreeLanguage: function (lang) {
                    localStorage.setItem("treeLanguage", lang);
                },
                // change languages 
                chooseEnglish: function () {
                    resource.setLanguage('EN');
                    $.datepicker.setDefaults($.datepicker.regional.en);
                    localStorage.setItem("language", 'EN');
                    vm.languagePreference('EN');
                    $('#engelsk').addClass("active");
                    $('#bokmal').removeClass("active");
                    $('#nynorsk').removeClass("active");   
                    $('#jstreeTaxon').jstree(true).refresh();
                },
                chooseNorwegian: function () {                    
                    resource.setLanguage('nb-NO');
                    $.datepicker.setDefaults($.datepicker.regional.no);
                    localStorage.setItem("language", 'nb-NO');
                    vm.languagePreference('nb-NO');
                    $('#bokmal').addClass("active");
                    $('#nynorsk').removeClass("active");
                    $('#engelsk').removeClass("active");
                },
                chooseNynorsk: function () {                    
                    resource.setLanguage('nn-NO');
                    $.datepicker.setDefaults($.datepicker.regional.no);
                    localStorage.setItem("language", 'nn-NO');
                    vm.languagePreference('nn-NO');
                    $('#nynorsk').addClass("active");
                    $('#bokmal').removeClass("active");
                    $('#engelsk').removeClass("active");
                },
                setActiveLanguage: function () {
                    if (vm.getLanguage() == 'nb-NO') {
                        $('#bokmal').addClass("active");
                        $('#nynorsk').removeClass("active");
                        $('#engelsk').removeClass("active");
                    } else if (vm.getLanguage() == 'nn-NO') {
                        $('#nynorsk').addClass("active");
                        $('#bokmal').removeClass("active");
                        $('#engelsk').removeClass("active");
                    } else if (vm.getLanguage() == 'EN') {
                        $('#engelsk').addClass("active");
                        $('#bokmal').removeClass("active");
                        $('#nynorsk').removeClass("active");
                    }
                    resource.setLanguage(vm.getLanguage());
                },
                // * view-things *
                baseLayer: "",
                totalCount: ko.observable(0),
                currentReleaseInfo: ko.observable('requesting')
            };
        vm.parseUrlFilter = function (filterString) {
            vm.applyFilter({
                "filter": filterString
            });
        };

        vm.applyFilter = function (bookmark) {
            var bmFilter = JSON.parse(bookmark.filter);
            vm.setFilter(bmFilter);
        };

        vm.setFilter = function (bmFilter) {
            if (!_.isEqual(filter.TaxonIds(), bmFilter.TaxonIds)) filter.TaxonIds(bmFilter.TaxonIds || []);
            if (!_.isEqual(filter.AreaIds(), bmFilter.AreaIds)) filter.AreaIds(bmFilter.AreaIds || []);
            if (!_.isEqual(filter.NodeIds(), bmFilter.NodeIds)) filter.NodeIds(bmFilter.NodeIds || []);
            if (!_.isEqual(filter.Months(), bmFilter.Months)) filter.Months(bmFilter.Months || []);
            if (!_.isEqual(filter.TaxonGroupIds(), bmFilter.TaxonGroupIds)) filter.TaxonGroupIds(bmFilter.TaxonGroupIds || []);
            if (!_.isEqual(filter.IncludeSubTaxonIds(), bmFilter.IncludeSubTaxonIds)) filter.IncludeSubTaxonIds(bmFilter.IncludeSubTaxonIds);
            if (!_.isEqual(filter.Categories(), bmFilter.Categories)) filter.Categories(bmFilter.Categories || []);
            if (!_.isEqual(filter.CenterPoints(), bmFilter.CenterPoints)) filter.CenterPoints(bmFilter.CenterPoints);
            if (!_.isEqual(filter.InstitutionIds(), bmFilter.InstitutionIds)) filter.InstitutionIds(bmFilter.InstitutionIds || []);
            if (!_.isEqual(filter.CollectionIds(), bmFilter.CollectionIds)) filter.CollectionIds(bmFilter.CollectionIds || []);
            if (!_.isEqual(filter.CatalogNumbers(), bmFilter.CatalogNumbers)) filter.CatalogNumbers(bmFilter.CatalogNumbers || []);
            if (!_.isEqual(filter.BasisOfRecords(), bmFilter.BasisOfRecords)) filter.BasisOfRecords(bmFilter.BasisOfRecords || []);
            if (!_.isEqual(filter.Img(), bmFilter.Img)) filter.Img(bmFilter.Img || []);
            if (!_.isEqual(filter.Found(), bmFilter.Found)) filter.Found(bmFilter.Found || []);
            if (!_.isEqual(filter.NotRecovered(), bmFilter.NotRecovered)) filter.NotRecovered(bmFilter.NotRecovered || []);           
            if (!_.isEqual(filter.Valid(), bmFilter.Valid)) filter.Valid(bmFilter.Valid || []);
            if (!_.isEqual(filter.UnsureId(), bmFilter.UnsureId)) filter.UnsureId(bmFilter.UnsureId || []);
            if (!_.isEqual(filter.Spontan(), bmFilter.Spontan)) filter.Spontan(bmFilter.Spontan || []);
            if (!_.isEqual(filter.Cons(), bmFilter.Cons)) filter.Cons(bmFilter.Cons || []);
            if (!_.isEqual(filter.Behaviors(), bmFilter.Behaviors)) filter.Behaviors(bmFilter.Behaviors || []);
            if (!_.isEqual(filter.Geometry(), bmFilter.Geometry)) filter.Geometry(bmFilter.Geometry);
            if (!_.isEqual(filter.BoundingBox(), bmFilter.BoundingBox)) filter.BoundingBox(bmFilter.BoundingBox);
            if (!_.isEqual(filter.LocationId(), bmFilter.LocationId)) filter.LocationId(bmFilter.LocationId || 0);
            if (!_.isEqual(filter.YearFrom(), bmFilter.YearFrom)) filter.YearFrom(bmFilter.YearFrom || 0);
            if (!_.isEqual(filter.YearTo(), bmFilter.YearTo)) filter.YearTo(bmFilter.YearTo || 0);
            if (!_.isEqual(filter.CoordinatePrecisionFrom(), bmFilter.CoordinatePrecisionFrom)) filter.CoordinatePrecisionFrom(bmFilter.CoordinatePrecisionFrom || 0);
            if (!_.isEqual(filter.CoordinatePrecisionTo(), bmFilter.CoordinatePrecisionTo)) filter.CoordinatePrecisionTo(bmFilter.CoordinatePrecisionTo || 0);
            //filter.EpsgCode(bmFilter.EpsgCode);
            //filter.IndexFrom(bmFilter.IndexFrom);
            //filter.IndexTo(bmFilter.IndexTo);
            //filter.GroupBy(bmFilter.GroupBy);

            vm.rebuildTree(true);
        };

        vm.initBookmarks = function () {
            var bookmarks;
            if ((bookmarks = JSON.parse(window.localStorage.getItem(conf.bookmarkLocalStorageKey))) && Array.isArray(bookmarks)) {
                vm.bookmarks.removeAll();
                bookmarks.forEach(function (e) {
                    vm.bookmarks.push(e);
                });
            }
        };

        vm.initExportStatusList = function () {
            var exportStatuses;
            if (vm.exportStatusList().length === 0 && (exportStatuses = JSON.parse(window.localStorage.getItem(conf.exportStatusesLocalStorageKey))) &&
                Array.isArray(exportStatuses)) {
                //vm.exportStatusList.removeAll(); // todo --- dont empty and reload - check if there or not - risk of localstorage missing something
                exportStatuses.forEach(function(exportStatus) {
                    if (exportStatus.ExportJobId) {
                        vm.exportStatusList.push(new ExportStatus(exportStatus));
                        if (exportStatus.statusCode !== 2) {
                            vm.exportMonitor.invoke("AssociateJob", exportStatus.ExportJobId);
                        }
                    }
                });
            }
        };

        vm.addExport = function (newExport) {
            console.log(newExport);
            vm.exportStatusList.push(new ExportStatus(newExport));
            vm.saveExportStatusList();
            //saveJob(newExport);
            // eksportjobben består av bare to parametre
            //window.localStorage.setItem(vm.config.exportStatusesLocalStorageKey, JSON.stringify(vm.exportStatusList()));
            console.log('associate client to job');
            vm.exportMonitor.invoke("AssociateJob", newExport.JobId);
        };

        vm.saveExportStatusList = function () {
            // todo: persisterer observable til verdier og deretter til localstorage
            var items = [];
            vm.exportStatusList().forEach(
                function(data) {
                    items.push(new SerializableExportStatus(data));
                });
            window.localStorage.setItem(conf.exportStatusesLocalStorageKey, JSON.stringify(items));
        };

        return vm;
    });

define(
    'services/codeLists',[],function () {
        var areaTypes = Object.freeze({
            Undefined: 0,
            Municipality: 1,
            County: 2
        });

        var counties = Object.freeze({
            0: "",
            1: "Østfold",
            2: "Akershus",
            3: "Oslo",
            4: "Hedmark",
            5: "Oppland",
            6: "Buskerud",
            7: "Vestfold",
            8: "Telemark",
            9: "Aust-Agder",
            10: "Vest-Agder",
            11: "Rogaland",
            12: "Hordaland",
            13: "Bergen",
            14: "Sogn og Fjordane",
            15: "Møre og Romsdal",
            16: "Sør-Trøndelag",
            17: "Nord-Trøndelag",
            18: "Nordland",
            19: "Troms",
            20: "Finnmark/Finnmárku",
            21: "Svalbard",
            22: "Jan Mayen",
            23: "havområde",
            50: "Trøndelag",
            30:	"Viken",
            34:	"Innlandet",
            38:	"Vestfold og Telemark",
            42:	"Agder",
            46:	"Vestland",
            54:	"Troms og Finnmark"
        });

        var taxonCategoriesEn = Object.freeze({
            0: "Unknown",
            1: "Kingdom",
            2: "SubKingdom",
            3: "Phylum",
            4: "SubPhylum",
            5: "SuperClass",
            6: "Class",
            7: "SubClass",
            8: "InfraClass",
            9: "Cohort",
            10: "SuperOrder",
            11: "Order",
            12: "SubOrder",
            13: "InfraOrder",
            14: "SuperFamily",
            15: "Family",
            16: "SubFamily",
            17: "Tribe",
            18: "SubTribe",
            19: "Genus",
            20: "SubGenus",
            21: "Section",
            22: "Species",
            23: "SubSpecies",
            24: "Variety",
            25: "Form"
        });
        var taxonCategoriesNo = Object.freeze({ // todo: translate the rest?
            0: "Unknown",
            1: "Rike",
            2: "SubKingdom",
            3: "Rekke",
            4: "Underrekke",
            5: "SuperClass",
            6: "Klasse",
            7: "SubClass",
            8: "InfraClass",
            9: "Cohort",
            10: "SuperOrder",
            11: "Orden",
            12: "SubOrder",
            13: "InfraOrder",
            14: "SuperFamily",
            15: "Familie",
            16: "SubFamily",
            17: "Tribe",
            18: "SubTribe",
            19: "Slekt",
            20: "SubGenus",
            21: "Section",
            22: "Art",
            23: "Underart",
            24: "Variety",
            25: "Form"
        });
        var badgeColors = Object.freeze({
            none: {
                "color": "#ddd"
            },
            some: {
                "color": "#1697AA"
            }
        });

        var vm = {
            counties: counties,
            areaTypes: areaTypes,
            taxonCategoriesEn: taxonCategoriesEn,
            taxonCategoriesNo: taxonCategoriesNo,
            badgeColors: badgeColors
        };

        return vm;
    });

define('services/logger', ['durandal/system'],
    function (system) {
        function logIt(message, data, source) {
            source = source ? '[' + source + '] ' : '';
            if (data) {
                system.log(source, message, data);
            } else {
                system.log(source, message);
            }
        }

        function log(message, data, source) {
            logIt(message, data, source);
        }

        function logError(message, data, source) {
            logIt(message, data, source);
        }

        var logger = {
            log: log,
            logError: logError
        };

        return logger;

    });

/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * This module is based on Backbone's core history support. It abstracts away the low level details of working with browser history and url changes in order to provide a solid foundation for a router.
 * @module history
 * @requires system
 * @requires jquery
 */
define('plugins/history',['durandal/system', 'jquery'], function (system, $) {
    // Cached regex for stripping a leading hash/slash and trailing space.
    var routeStripper = /^[#\/]|\s+$/g;

    // Cached regex for stripping leading and trailing slashes.
    var rootStripper = /^\/+|\/+$/g;

    // Cached regex for detecting MSIE.
    var isExplorer = /msie [\w.]+/;

    // Cached regex for removing a trailing slash.
    var trailingSlash = /\/$/;

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    function updateHash(location, fragment, replace) {
        if (replace) {
            var href = location.href.replace(/(javascript:|#).*$/, '');

            if (history.history.replaceState) {
                history.history.replaceState({}, document.title, href + '#' + fragment); // using history.replaceState instead of location.replace to work around chrom bug
            } else {
                location.replace(href + '#' + fragment);
            }
        } else {
            // Some browsers require that `hash` contains a leading #.
            location.hash = '#' + fragment;
        }
    };

    /**
     * @class HistoryModule
     * @static
     */
    var history = {
        /**
         * The setTimeout interval used when the browser does not support hash change events.
         * @property {string} interval
         * @default 50
         */
        interval: 50,
        /**
         * Indicates whether or not the history module is actively tracking history.
         * @property {string} active
         */
        active: false
    };
    
    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
        history.location = window.location;
        history.history = window.history;
    }

    /**
     * Gets the true hash value. Cannot use location.hash directly due to a bug in Firefox where location.hash will always be decoded.
     * @method getHash
     * @param {string} [window] The optional window instance
     * @return {string} The hash.
     */
    history.getHash = function(window) {
        var match = (window || history).location.href.match(/#(.*)$/);
        return match ? match[1] : '';
    };
    
    /**
     * Get the cross-browser normalized URL fragment, either from the URL, the hash, or the override.
     * @method getFragment
     * @param {string} fragment The fragment.
     * @param {boolean} forcePushState Should we force push state?
     * @return {string} he fragment.
     */
    history.getFragment = function(fragment, forcePushState) {
        if (fragment == null) {
            if (history._hasPushState || !history._wantsHashChange || forcePushState) {
                fragment = history.location.pathname + history.location.search;
                var root = history.root.replace(trailingSlash, '');
                if (!fragment.indexOf(root)) {
                    fragment = fragment.substr(root.length);
                }
            } else {
                fragment = history.getHash();
            }
        }
        
        return fragment.replace(routeStripper, '');
    };

    /**
     * Activate the hash change handling, returning `true` if the current URL matches an existing route, and `false` otherwise.
     * @method activate
     * @param {HistoryOptions} options.
     * @return {boolean|undefined} Returns true/false from loading the url unless the silent option was selected.
     */
    history.activate = function(options) {
        if (history.active) {
            system.error("History has already been activated.");
        }

        history.active = true;

        // Figure out the initial configuration. Do we need an iframe?
        // Is pushState desired ... is it available?
        history.options = system.extend({}, { root: '/' }, history.options, options);
        history.root = history.options.root;
        history._wantsHashChange = history.options.hashChange !== false;
        history._wantsPushState = !!history.options.pushState;
        history._hasPushState = !!(history.options.pushState && history.history && history.history.pushState);

        var fragment = history.getFragment();
        var docMode = document.documentMode;
        var oldIE = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));

        // Normalize root to always include a leading and trailing slash.
        history.root = ('/' + history.root + '/').replace(rootStripper, '/');

        if (oldIE && history._wantsHashChange) {
            history.iframe = $('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo('body')[0].contentWindow;
            history.navigate(fragment, false);
        }

        // Depending on whether we're using pushState or hashes, and whether
        // 'onhashchange' is supported, determine how we check the URL state.
        if (history._hasPushState) {
            $(window).on('popstate', history.checkUrl);
        } else if (history._wantsHashChange && ('onhashchange' in window) && !oldIE) {
            $(window).on('hashchange', history.checkUrl);
        } else if (history._wantsHashChange) {
            history._checkUrlInterval = setInterval(history.checkUrl, history.interval);
        }

        // Determine if we need to change the base url, for a pushState link
        // opened by a non-pushState browser.
        history.fragment = fragment;
        var loc = history.location;
        var atRoot = loc.pathname.replace(/[^\/]$/, '$&/') === history.root;

        // Transition from hashChange to pushState or vice versa if both are requested.
        if (history._wantsHashChange && history._wantsPushState) {
            // If we've started off with a route from a `pushState`-enabled
            // browser, but we're currently in a browser that doesn't support it...
            if (!history._hasPushState && !atRoot) {
                history.fragment = history.getFragment(null, true);
                history.location.replace(history.root + history.location.search + '#' + history.fragment);
                // Return immediately as browser will do redirect to new url
                return true;

            // Or if we've started out with a hash-based route, but we're currently
            // in a browser where it could be `pushState`-based instead...
            } else if (history._hasPushState && atRoot && loc.hash) {
                this.fragment = history.getHash().replace(routeStripper, '');
                this.history.replaceState({}, document.title, history.root + history.fragment + loc.search);
            }
        }

        if (!history.options.silent) {
            return history.loadUrl(options.startRoute);
        }
    };

    /**
     * Disable history, perhaps temporarily. Not useful in a real app, but possibly useful for unit testing Routers.
     * @method deactivate
     */
    history.deactivate = function() {
        $(window).off('popstate', history.checkUrl).off('hashchange', history.checkUrl);
        clearInterval(history._checkUrlInterval);
        history.active = false;
    };

    /**
     * Checks the current URL to see if it has changed, and if it has, calls `loadUrl`, normalizing across the hidden iframe.
     * @method checkUrl
     * @return {boolean} Returns true/false from loading the url.
     */
    history.checkUrl = function() {
        var current = history.getFragment();
        if (current === history.fragment && history.iframe) {
            current = history.getFragment(history.getHash(history.iframe));
        }

        if (current === history.fragment) {
            return false;
        }

        if (history.iframe) {
            history.navigate(current, false);
        }
        
        history.loadUrl();
    };
    
    /**
     * Attempts to load the current URL fragment. A pass-through to options.routeHandler.
     * @method loadUrl
     * @return {boolean} Returns true/false from the route handler.
     */
    history.loadUrl = function(fragmentOverride) {
        var fragment = history.fragment = history.getFragment(fragmentOverride);

        return history.options.routeHandler ?
            history.options.routeHandler(fragment) :
            false;
    };

    /**
     * Save a fragment into the hash history, or replace the URL state if the
     * 'replace' option is passed. You are responsible for properly URL-encoding
     * the fragment in advance.
     * The options object can contain `trigger: false` if you wish to not have the
     * route callback be fired, or `replace: true`, if
     * you wish to modify the current URL without adding an entry to the history.
     * @method navigate
     * @param {string} fragment The url fragment to navigate to.
     * @param {object|boolean} options An options object with optional trigger and replace flags. You can also pass a boolean directly to set the trigger option. Trigger is `true` by default.
     * @return {boolean} Returns true/false from loading the url.
     */
    history.navigate = function(fragment, options) {
        if (!history.active) {
            return false;
        }

        if(options === undefined) {
            options = {
                trigger: true
            };
        }else if(system.isBoolean(options)) {
            options = {
                trigger: options
            };
        }

        fragment = history.getFragment(fragment || '');

        if (history.fragment === fragment) {
            return;
        }

        history.fragment = fragment;

        var url = history.root + fragment;

        // Don't include a trailing slash on the root.
        if(fragment === '' && url !== '/') {
            url = url.slice(0, -1);
        }

        // If pushState is available, we use it to set the fragment as a real URL.
        if (history._hasPushState) {
            history.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

            // If hash changes haven't been explicitly disabled, update the hash
            // fragment to store history.
        } else if (history._wantsHashChange) {
            updateHash(history.location, fragment, options.replace);
            
            if (history.iframe && (fragment !== history.getFragment(history.getHash(history.iframe)))) {
                // Opening and closing the iframe tricks IE7 and earlier to push a
                // history entry on hash-tag change.  When replace is true, we don't
                // want history.
                if (!options.replace) {
                    history.iframe.document.open().close();
                }
                
                updateHash(history.iframe.location, fragment, options.replace);
            }

            // If you've told us that you explicitly don't want fallback hashchange-
            // based history, then `navigate` becomes a page refresh.
        } else {
            return history.location.assign(url);
        }

        if (options.trigger) {
            return history.loadUrl(fragment);
        }
    };

    /**
     * Navigates back in the browser history.
     * @method navigateBack
     */
    history.navigateBack = function() {
        history.history.back();
    };

    /**
     * @class HistoryOptions
     * @static
     */

    /**
     * The function that will be called back when the fragment changes.
     * @property {function} routeHandler
     */

    /**
     * The url root used to extract the fragment when using push state.
     * @property {string} root
     */

    /**
     * Use hash change when present.
     * @property {boolean} hashChange
     * @default true
     */

    /**
     * Use push state when present.
     * @property {boolean} pushState
     * @default false
     */

    /**
     * Prevents loading of the current url when activating history.
     * @property {boolean} silent
     * @default false
     */

    return history;
});

/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * Connects the history module's url and history tracking support to Durandal's activation and composition engine allowing you to easily build navigation-style applications.
 * @module router
 * @requires system
 * @requires app
 * @requires activator
 * @requires events
 * @requires composition
 * @requires history
 * @requires knockout
 * @requires jquery
 */
define('plugins/router',['durandal/system', 'durandal/app', 'durandal/activator', 'durandal/events', 'durandal/composition', 'plugins/history', 'knockout', 'jquery'], function(system, app, activator, events, composition, history, ko, $) {
    var optionalParam = /\((.*?)\)/g;
    var namedParam = /(\(\?)?:\w+/g;
    var splatParam = /\*\w+/g;
    var escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;
    var startDeferred, rootRouter;
    var trailingSlash = /\/$/;
    var routesAreCaseSensitive = false;
    var lastUrl = '/', lastTryUrl = '/';

    function routeStringToRegExp(routeString) {
        routeString = routeString.replace(escapeRegExp, '\\$&')
            .replace(optionalParam, '(?:$1)?')
            .replace(namedParam, function(match, optional) {
                return optional ? match : '([^\/]+)';
            })
            .replace(splatParam, '(.*?)');

        return new RegExp('^' + routeString + '$', routesAreCaseSensitive ? undefined : 'i');
    }

    function stripParametersFromRoute(route) {
        var colonIndex = route.indexOf(':');
        var length = colonIndex > 0 ? colonIndex - 1 : route.length;
        return route.substring(0, length);
    }

    function endsWith(str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    }

    function compareArrays(first, second) {
        if (!first || !second){
            return false;
        }

        if (first.length != second.length) {
            return false;
        }

        for (var i = 0, len = first.length; i < len; i++) {
            if (first[i] != second[i]) {
                return false;
            }
        }

        return true;
    }

    function reconstructUrl(instruction){
        if(!instruction.queryString){
            return instruction.fragment;
        }

        return instruction.fragment + '?' + instruction.queryString;
    }

    /**
     * @class Router
     * @uses Events
     */

    /**
     * Triggered when the navigation logic has completed.
     * @event router:navigation:complete
     * @param {object} instance The activated instance.
     * @param {object} instruction The routing instruction.
     * @param {Router} router The router.
     */

    /**
     * Triggered when the navigation has been cancelled.
     * @event router:navigation:cancelled
     * @param {object} instance The activated instance.
     * @param {object} instruction The routing instruction.
     * @param {Router} router The router.
     */

    /**
     * Triggered when navigation begins.
     * @event router:navigation:processing
     * @param {object} instruction The routing instruction.
     * @param {Router} router The router.
     */

    /**
     * Triggered right before a route is activated.
     * @event router:route:activating
     * @param {object} instance The activated instance.
     * @param {object} instruction The routing instruction.
     * @param {Router} router The router.
     */

    /**
     * Triggered right before a route is configured.
     * @event router:route:before-config
     * @param {object} config The route config.
     * @param {Router} router The router.
     */

    /**
     * Triggered just after a route is configured.
     * @event router:route:after-config
     * @param {object} config The route config.
     * @param {Router} router The router.
     */

    /**
     * Triggered when the view for the activated instance is attached.
     * @event router:navigation:attached
     * @param {object} instance The activated instance.
     * @param {object} instruction The routing instruction.
     * @param {Router} router The router.
     */

    /**
     * Triggered when the composition that the activated instance participates in is complete.
     * @event router:navigation:composition-complete
     * @param {object} instance The activated instance.
     * @param {object} instruction The routing instruction.
     * @param {Router} router The router.
     */

    /**
     * Triggered when the router does not find a matching route.
     * @event router:route:not-found
     * @param {string} fragment The url fragment.
     * @param {Router} router The router.
     */

    var createRouter = function() {
        var queue = [],
            isProcessing = ko.observable(false),
            currentActivation,
            currentInstruction,
            activeItem = activator.create();

        var router = {
            /**
             * The route handlers that are registered. Each handler consists of a `routePattern` and a `callback`.
             * @property {object[]} handlers
             */
            handlers: [],
            /**
             * The route configs that are registered.
             * @property {object[]} routes
             */
            routes: [],
            /**
             * The route configurations that have been designated as displayable in a nav ui (nav:true).
             * @property {KnockoutObservableArray} navigationModel
             */
            navigationModel: ko.observableArray([]),
            /**
             * The active item/screen based on the current navigation state.
             * @property {Activator} activeItem
             */
            activeItem: activeItem,
            /**
             * Indicates that the router (or a child router) is currently in the process of navigating.
             * @property {KnockoutComputed} isNavigating
             */
            isNavigating: ko.computed(function() {
                var current = activeItem();
                var processing = isProcessing();
                var currentRouterIsProcesing = current
                    && current.router
                    && current.router != router
                    && current.router.isNavigating() ? true : false;
                return  processing || currentRouterIsProcesing;
            }),
            /**
             * An observable surfacing the active routing instruction that is currently being processed or has recently finished processing.
             * The instruction object has `config`, `fragment`, `queryString`, `params` and `queryParams` properties.
             * @property {KnockoutObservable} activeInstruction
             */
            activeInstruction:ko.observable(null),
            __router__:true
        };

        events.includeIn(router);

        activeItem.settings.areSameItem = function (currentItem, newItem, currentActivationData, newActivationData) {
            if (currentItem == newItem) {
                return compareArrays(currentActivationData, newActivationData);
            }

            return false;
        };

        activeItem.settings.findChildActivator = function(item) {
            if (item && item.router && item.router.parent == router) {
                return item.router.activeItem;
            }

            return null;
        };

        function hasChildRouter(instance, parentRouter) {
            return instance.router && instance.router.parent == parentRouter;
        }

        function setCurrentInstructionRouteIsActive(flag) {
            if (currentInstruction && currentInstruction.config.isActive) {
                currentInstruction.config.isActive(flag);
            }
        }

        function completeNavigation(instance, instruction, mode) {
            system.log('Navigation Complete', instance, instruction);

            var fromModuleId = system.getModuleId(currentActivation);
            if (fromModuleId) {
                router.trigger('router:navigation:from:' + fromModuleId);
            }

            currentActivation = instance;

            setCurrentInstructionRouteIsActive(false);
            currentInstruction = instruction;
            setCurrentInstructionRouteIsActive(true);

            var toModuleId = system.getModuleId(currentActivation);
            if (toModuleId) {
                router.trigger('router:navigation:to:' + toModuleId);
            }

            if (!hasChildRouter(instance, router)) {
                router.updateDocumentTitle(instance, instruction);
            }

            switch (mode) {
                case 'rootRouter':
                    lastUrl = reconstructUrl(currentInstruction);
                    break;
                case 'rootRouterWithChild':
                    lastTryUrl = reconstructUrl(currentInstruction);
                    break;
                case 'lastChildRouter':
                    lastUrl = lastTryUrl;
                    break;
            }

            rootRouter.explicitNavigation = false;
            rootRouter.navigatingBack = false;

            router.trigger('router:navigation:complete', instance, instruction, router);
        }

        function cancelNavigation(instance, instruction) {
            system.log('Navigation Cancelled');

            router.activeInstruction(currentInstruction);

            router.navigate(lastUrl, false);

            isProcessing(false);
            rootRouter.explicitNavigation = false;
            rootRouter.navigatingBack = false;
            router.trigger('router:navigation:cancelled', instance, instruction, router);
        }

        function redirect(url) {
            system.log('Navigation Redirecting');

            isProcessing(false);
            rootRouter.explicitNavigation = false;
            rootRouter.navigatingBack = false;
            router.navigate(url, { trigger: true, replace: true });
        }

        function activateRoute(activator, instance, instruction) {
            rootRouter.navigatingBack = !rootRouter.explicitNavigation && currentActivation != instruction.fragment;
            router.trigger('router:route:activating', instance, instruction, router);

            var options = {
                canDeactivate: !router.parent
            };

            activator.activateItem(instance, instruction.params, options).then(function(succeeded) {
                if (succeeded) {
                    var previousActivation = currentActivation;
                    var withChild = hasChildRouter(instance, router);
                    var mode = '';

                    if (router.parent) {
                        if(!withChild) {
                            mode = 'lastChildRouter';
                        }
                    } else {
                        if (withChild) {
                            mode = 'rootRouterWithChild';
                        } else {
                            mode = 'rootRouter';
                        }
                    }

                    completeNavigation(instance, instruction, mode);

                    if (withChild) {
                        instance.router.trigger('router:route:before-child-routes', instance, instruction, router);

                        var fullFragment = instruction.fragment;
                        if (instruction.queryString) {
                            fullFragment += "?" + instruction.queryString;
                        }

                        instance.router.loadUrl(fullFragment);
                    }

                    if (previousActivation == instance) {
                        router.attached();
                        router.compositionComplete();
                    }
                } else if(activator.settings.lifecycleData && activator.settings.lifecycleData.redirect){
                    redirect(activator.settings.lifecycleData.redirect);
                }else{
                    cancelNavigation(instance, instruction);
                }

                if (startDeferred) {
                    startDeferred.resolve();
                    startDeferred = null;
                }
            }).fail(function(err){
                system.error(err);
            });
        }

        /**
         * Inspects routes and modules before activation. Can be used to protect access by cancelling navigation or redirecting.
         * @method guardRoute
         * @param {object} instance The module instance that is about to be activated by the router.
         * @param {object} instruction The route instruction. The instruction object has config, fragment, queryString, params and queryParams properties.
         * @return {Promise|Boolean|String} If a boolean, determines whether or not the route should activate or be cancelled. If a string, causes a redirect to the specified route. Can also be a promise for either of these value types.
         */
        function handleGuardedRoute(activator, instance, instruction) {
            var resultOrPromise = router.guardRoute(instance, instruction);
            if (resultOrPromise || resultOrPromise === '') {
                if (resultOrPromise.then) {
                    resultOrPromise.then(function(result) {
                        if (result) {
                            if (system.isString(result)) {
                                redirect(result);
                            } else {
                                activateRoute(activator, instance, instruction);
                            }
                        } else {
                            cancelNavigation(instance, instruction);
                        }
                    });
                } else {
                    if (system.isString(resultOrPromise)) {
                        redirect(resultOrPromise);
                    } else {
                        activateRoute(activator, instance, instruction);
                    }
                }
            } else {
                cancelNavigation(instance, instruction);
            }
        }

        function ensureActivation(activator, instance, instruction) {
            if (router.guardRoute) {
                handleGuardedRoute(activator, instance, instruction);
            } else {
                activateRoute(activator, instance, instruction);
            }
        }

        function canReuseCurrentActivation(instruction) {
            return currentInstruction
                && currentInstruction.config.moduleId == instruction.config.moduleId
                && currentActivation
                && ((currentActivation.canReuseForRoute && currentActivation.canReuseForRoute.apply(currentActivation, instruction.params))
                || (!currentActivation.canReuseForRoute && currentActivation.router && currentActivation.router.loadUrl));
        }

        function dequeueInstruction() {
            if (isProcessing()) {
                return;
            }

            var instruction = queue.shift();
            queue = [];

            if (!instruction) {
                return;
            }

            isProcessing(true);
            router.activeInstruction(instruction);
            router.trigger('router:navigation:processing', instruction, router);

            if (canReuseCurrentActivation(instruction)) {
                var tempActivator = activator.create();
                tempActivator.forceActiveItem(currentActivation); //enforce lifecycle without re-compose
                tempActivator.settings.areSameItem = activeItem.settings.areSameItem;
                tempActivator.settings.findChildActivator = activeItem.settings.findChildActivator;
                ensureActivation(tempActivator, currentActivation, instruction);
            } else if(!instruction.config.moduleId) {
                ensureActivation(activeItem, {
                    viewUrl:instruction.config.viewUrl,
                    canReuseForRoute:function() {
                        return true;
                    }
                }, instruction);
            } else {
                system.acquire(instruction.config.moduleId).then(function(m) {
                    var instance = system.resolveObject(m);

                    if(instruction.config.viewUrl) {
                        instance.viewUrl = instruction.config.viewUrl;
                    }

                    ensureActivation(activeItem, instance, instruction);
                }).fail(function(err) {
                    system.error('Failed to load routed module (' + instruction.config.moduleId + '). Details: ' + err.message, err);
                });
            }
        }

        function queueInstruction(instruction) {
            queue.unshift(instruction);
            dequeueInstruction();
        }

        // Given a route, and a URL fragment that it matches, return the array of
        // extracted decoded parameters. Empty or unmatched parameters will be
        // treated as `null` to normalize cross-browser behavior.
        function createParams(routePattern, fragment, queryString) {
            var params = routePattern.exec(fragment).slice(1);

            for (var i = 0; i < params.length; i++) {
                var current = params[i];
                params[i] = current ? decodeURIComponent(current) : null;
            }

            var queryParams = router.parseQueryString(queryString);
            if (queryParams) {
                params.push(queryParams);
            }

            return {
                params:params,
                queryParams:queryParams
            };
        }

        function configureRoute(config){
            router.trigger('router:route:before-config', config, router);

            if (!system.isRegExp(config.route)) {
                config.title = config.title || router.convertRouteToTitle(config.route);

                if (!config.viewUrl) {
                    config.moduleId = config.moduleId || router.convertRouteToModuleId(config.route);
                }
                
                config.hash = config.hash || router.convertRouteToHash(config.route);

                if (config.hasChildRoutes) {
                    config.route = config.route + '*childRoutes';
                }

                config.routePattern = routeStringToRegExp(config.route);
            }else{
                config.routePattern = config.route;
            }

            config.isActive = config.isActive || ko.observable(false);
            router.trigger('router:route:after-config', config, router);
            router.routes.push(config);

            router.route(config.routePattern, function(fragment, queryString) {
                var paramInfo = createParams(config.routePattern, fragment, queryString);
                queueInstruction({
                    fragment: fragment,
                    queryString:queryString,
                    config: config,
                    params: paramInfo.params,
                    queryParams:paramInfo.queryParams
                });
            });
        };

        function mapRoute(config) {
            if(system.isArray(config.route)){
                var isActive = config.isActive || ko.observable(false);

                for(var i = 0, length = config.route.length; i < length; i++){
                    var current = system.extend({}, config);

                    current.route = config.route[i];
                    current.isActive = isActive;

                    if(i > 0){
                        delete current.nav;
                    }

                    configureRoute(current);
                }
            }else{
                configureRoute(config);
            }

            return router;
        }

        /**
         * Parses a query string into an object.
         * @method parseQueryString
         * @param {string} queryString The query string to parse.
         * @return {object} An object keyed according to the query string parameters.
         */
        router.parseQueryString = function (queryString) {
            var queryObject, pairs;

            if (!queryString) {
                return null;
            }

            pairs = queryString.split('&');

            if (pairs.length == 0) {
                return null;
            }

            queryObject = {};

            for (var i = 0; i < pairs.length; i++) {
                var pair = pairs[i];
                if (pair === '') {
                    continue;
                }

                var parts = pair.split(/=(.+)?/),
                    key = parts[0],
                    value = parts[1] && decodeURIComponent(parts[1].replace(/\+/g, ' '));

                var existing = queryObject[key];

                if (existing) {
                    if (system.isArray(existing)) {
                        existing.push(value);
                    } else {
                        queryObject[key] = [existing, value];
                    }
                }
                else {
                    queryObject[key] = value;
                }
            }

            return queryObject;
        };

        /**
         * Add a route to be tested when the url fragment changes.
         * @method route
         * @param {RegEx} routePattern The route pattern to test against.
         * @param {function} callback The callback to execute when the route pattern is matched.
         */
        router.route = function(routePattern, callback) {
            router.handlers.push({ routePattern: routePattern, callback: callback });
        };

        /**
         * Attempt to load the specified URL fragment. If a route succeeds with a match, returns `true`. If no defined routes matches the fragment, returns `false`.
         * @method loadUrl
         * @param {string} fragment The URL fragment to find a match for.
         * @return {boolean} True if a match was found, false otherwise.
         */
        router.loadUrl = function(fragment) {
            var handlers = router.handlers,
                queryString = null,
                coreFragment = fragment,
                queryIndex = fragment.indexOf('?');

            if (queryIndex != -1) {
                coreFragment = fragment.substring(0, queryIndex);
                queryString = fragment.substr(queryIndex + 1);
            }

            if(router.relativeToParentRouter){
                var instruction = this.parent.activeInstruction();
				coreFragment = queryIndex == -1 ? instruction.params.join('/') : instruction.params.slice(0, -1).join('/');

                if(coreFragment && coreFragment.charAt(0) == '/'){
                    coreFragment = coreFragment.substr(1);
                }

                if(!coreFragment){
                    coreFragment = '';
                }

                coreFragment = coreFragment.replace('//', '/').replace('//', '/');
            }

            coreFragment = coreFragment.replace(trailingSlash, '');

            for (var i = 0; i < handlers.length; i++) {
                var current = handlers[i];
                if (current.routePattern.test(coreFragment)) {
                    current.callback(coreFragment, queryString);
                    return true;
                }
            }

            system.log('Route Not Found', fragment, currentInstruction);
            router.trigger('router:route:not-found', fragment, router);

            if (router.parent) {
                lastUrl = lastTryUrl;
            }

            history.navigate(lastUrl, { trigger:false, replace:true });

            rootRouter.explicitNavigation = false;
            rootRouter.navigatingBack = false;

            return false;
        };

        var titleSubscription;
        function setTitle(value) {
            var appTitle = ko.unwrap(app.title);

            if (appTitle) {
                document.title = value + " | " + appTitle;
            } else {
                document.title = value;
            }
        }  
        
        // Allow observable to be used for app.title
        if(ko.isObservable(app.title)) {
            app.title.subscribe(function () {
                var instruction = router.activeInstruction();
                var title = instruction != null ? ko.unwrap(instruction.config.title) : '';
                setTitle(title);
            });
        }
        
        /**
         * Updates the document title based on the activated module instance, the routing instruction and the app.title.
         * @method updateDocumentTitle
         * @param {object} instance The activated module.
         * @param {object} instruction The routing instruction associated with the action. It has a `config` property that references the original route mapping config.
         */
        router.updateDocumentTitle = function (instance, instruction) {
            var appTitle = ko.unwrap(app.title),
                title = instruction.config.title;
                
            if (titleSubscription) {
                titleSubscription.dispose();
            }

            if (title) {
                if (ko.isObservable(title)) {
                    titleSubscription = title.subscribe(setTitle);
                    setTitle(title());
                } else {
                    setTitle(title);
                }
            } else if (appTitle) {
                document.title = appTitle;
            }
        };

        /**
         * Save a fragment into the hash history, or replace the URL state if the
         * 'replace' option is passed. You are responsible for properly URL-encoding
         * the fragment in advance.
         * The options object can contain `trigger: false` if you wish to not have the
         * route callback be fired, or `replace: true`, if
         * you wish to modify the current URL without adding an entry to the history.
         * @method navigate
         * @param {string} fragment The url fragment to navigate to.
         * @param {object|boolean} options An options object with optional trigger and replace flags. You can also pass a boolean directly to set the trigger option. Trigger is `true` by default.
         * @return {boolean} Returns true/false from loading the url.
         */
        router.navigate = function(fragment, options) {
            if(fragment && fragment.indexOf('://') != -1) {
                window.location.href = fragment;
                return true;
            }

            if(options === undefined || (system.isBoolean(options) && options) || (system.isObject(options) && options.trigger)) {
                rootRouter.explicitNavigation = true;
            }

            if ((system.isBoolean(options) && !options) || (options && options.trigger != undefined && !options.trigger)) {
                lastUrl = fragment;
            }

            return history.navigate(fragment, options);
        };

        /**
         * Navigates back in the browser history.
         * @method navigateBack
         */
        router.navigateBack = function() {
            history.navigateBack();
        };

        router.attached = function() {
            router.trigger('router:navigation:attached', currentActivation, currentInstruction, router);
        };

        router.compositionComplete = function(){
            isProcessing(false);
            router.trigger('router:navigation:composition-complete', currentActivation, currentInstruction, router);
            dequeueInstruction();
        };

        /**
         * Converts a route to a hash suitable for binding to a link's href.
         * @method convertRouteToHash
         * @param {string} route
         * @return {string} The hash.
         */
        router.convertRouteToHash = function(route) {
            route = route.replace(/\*.*$/, '');

            if(router.relativeToParentRouter){
                var instruction = router.parent.activeInstruction(),
                    hash = route ? instruction.config.hash + '/' + route : instruction.config.hash;

                if(history._hasPushState){
                    hash = '/' + hash;
                }

                hash = hash.replace('//', '/').replace('//', '/');
                return hash;
            }

            if(history._hasPushState){
                return route;
            }

            return "#" + route;
        };

        /**
         * Converts a route to a module id. This is only called if no module id is supplied as part of the route mapping.
         * @method convertRouteToModuleId
         * @param {string} route
         * @return {string} The module id.
         */
        router.convertRouteToModuleId = function(route) {
            return stripParametersFromRoute(route);
        };

        /**
         * Converts a route to a displayable title. This is only called if no title is specified as part of the route mapping.
         * @method convertRouteToTitle
         * @param {string} route
         * @return {string} The title.
         */
        router.convertRouteToTitle = function(route) {
            var value = stripParametersFromRoute(route);
            return value.substring(0, 1).toUpperCase() + value.substring(1);
        };

        /**
         * Maps route patterns to modules.
         * @method map
         * @param {string|object|object[]} route A route, config or array of configs.
         * @param {object} [config] The config for the specified route.
         * @chainable
         * @example
         router.map([
         { route: '', title:'Home', moduleId: 'homeScreen', nav: true },
         { route: 'customer/:id', moduleId: 'customerDetails'}
         ]);
         */
        router.map = function(route, config) {
            if (system.isArray(route)) {
                for (var i = 0; i < route.length; i++) {
                    router.map(route[i]);
                }

                return router;
            }

            if (system.isString(route) || system.isRegExp(route)) {
                if (!config) {
                    config = {};
                } else if (system.isString(config)) {
                    config = { moduleId: config };
                }

                config.route = route;
            } else {
                config = route;
            }

            return mapRoute(config);
        };

        /**
         * Builds an observable array designed to bind a navigation UI to. The model will exist in the `navigationModel` property.
         * @method buildNavigationModel
         * @param {number} defaultOrder The default order to use for navigation visible routes that don't specify an order. The default is 100 and each successive route will be one more than that.
         * @chainable
         */
        router.buildNavigationModel = function(defaultOrder) {
            var nav = [], routes = router.routes;
            var fallbackOrder = defaultOrder || 100;

            for (var i = 0; i < routes.length; i++) {
                var current = routes[i];

                if (current.nav) {
                    if (!system.isNumber(current.nav)) {
                        current.nav = ++fallbackOrder;
                    }

                    nav.push(current);
                }
            }

            nav.sort(function(a, b) { return a.nav - b.nav; });
            router.navigationModel(nav);

            return router;
        };

        /**
         * Configures how the router will handle unknown routes.
         * @method mapUnknownRoutes
         * @param {string|function} [config] If not supplied, then the router will map routes to modules with the same name.
         * If a string is supplied, it represents the module id to route all unknown routes to.
         * Finally, if config is a function, it will be called back with the route instruction containing the route info. The function can then modify the instruction by adding a moduleId and the router will take over from there.
         * @param {string} [replaceRoute] If config is a module id, then you can optionally provide a route to replace the url with.
         * @chainable
         */
        router.mapUnknownRoutes = function(config, replaceRoute) {
            var catchAllRoute = "*catchall";
            var catchAllPattern = routeStringToRegExp(catchAllRoute);

            router.route(catchAllPattern, function (fragment, queryString) {
                var paramInfo = createParams(catchAllPattern, fragment, queryString);
                var instruction = {
                    fragment: fragment,
                    queryString: queryString,
                    config: {
                        route: catchAllRoute,
                        routePattern: catchAllPattern
                    },
                    params: paramInfo.params,
                    queryParams: paramInfo.queryParams
                };

                if (!config) {
                    instruction.config.moduleId = fragment;
                } else if (system.isString(config)) {
                    instruction.config.moduleId = config;
                    if(replaceRoute){
                        history.navigate(replaceRoute, { trigger:false, replace:true });
                    }
                } else if (system.isFunction(config)) {
                    var result = config(instruction);
                    if (result && result.then) {
                        result.then(function() {
                            router.trigger('router:route:before-config', instruction.config, router);
                            router.trigger('router:route:after-config', instruction.config, router);
                            queueInstruction(instruction);
                        });
                        return;
                    }
                } else {
                    instruction.config = config;
                    instruction.config.route = catchAllRoute;
                    instruction.config.routePattern = catchAllPattern;
                }

                router.trigger('router:route:before-config', instruction.config, router);
                router.trigger('router:route:after-config', instruction.config, router);
                queueInstruction(instruction);
            });

            return router;
        };

        /**
         * Resets the router by removing handlers, routes, event handlers and previously configured options.
         * @method reset
         * @chainable
         */
        router.reset = function() {
            currentInstruction = currentActivation = undefined;
            router.handlers = [];
            router.routes = [];
            router.off();
            delete router.options;
            return router;
        };

        /**
         * Makes all configured routes and/or module ids relative to a certain base url.
         * @method makeRelative
         * @param {string|object} settings If string, the value is used as the base for routes and module ids. If an object, you can specify `route` and `moduleId` separately. In place of specifying route, you can set `fromParent:true` to make routes automatically relative to the parent router's active route.
         * @chainable
         */
        router.makeRelative = function(settings){
            if(system.isString(settings)){
                settings = {
                    moduleId:settings,
                    route:settings
                };
            }

            if(settings.moduleId && !endsWith(settings.moduleId, '/')){
                settings.moduleId += '/';
            }

            if(settings.route && !endsWith(settings.route, '/')){
                settings.route += '/';
            }

            if(settings.fromParent){
                router.relativeToParentRouter = true;
            }

            router.on('router:route:before-config').then(function(config){
                if(settings.moduleId){
                    config.moduleId = settings.moduleId + config.moduleId;
                }

                if(settings.route){
                    if(config.route === ''){
                        config.route = settings.route.substring(0, settings.route.length - 1);
                    }else{
                        config.route = settings.route + config.route;
                    }
                }
            });

            if (settings.dynamicHash) {
                router.on('router:route:after-config').then(function (config) {
                    config.routePattern = routeStringToRegExp(config.route ? settings.dynamicHash + '/' + config.route : settings.dynamicHash);
                    config.dynamicHash = config.dynamicHash || ko.observable(config.hash);
                });

                router.on('router:route:before-child-routes').then(function(instance, instruction, parentRouter) {
                    var childRouter = instance.router;

                    for(var i = 0; i < childRouter.routes.length; i++) {
                        var route = childRouter.routes[i];
                        var params = instruction.params.slice(0);

                        route.hash = childRouter.convertRouteToHash(route.route)
                            .replace(namedParam, function(match) {
                                return params.length > 0 ? params.shift() : match;
                            });

                        route.dynamicHash(route.hash);
                    }
                });
            }

            return router;
        };

        /**
         * Creates a child router.
         * @method createChildRouter
         * @return {Router} The child router.
         */
        router.createChildRouter = function() {
            var childRouter = createRouter();
            childRouter.parent = router;
            return childRouter;
        };

        return router;
    };

    /**
     * @class RouterModule
     * @extends Router
     * @static
     */
    rootRouter = createRouter();
    rootRouter.explicitNavigation = false;
    rootRouter.navigatingBack = false;

    /**
     * Makes the RegExp generated for routes case sensitive, rather than the default of case insensitive.
     * @method makeRoutesCaseSensitive
     */
    rootRouter.makeRoutesCaseSensitive = function(){
        routesAreCaseSensitive = true;
    };

    /**
     * Verify that the target is the current window
     * @method targetIsThisWindow
     * @return {boolean} True if the event's target is the current window, false otherwise.
     */
    rootRouter.targetIsThisWindow = function(event) {
        var targetWindow = $(event.target).attr('target');

        if (!targetWindow ||
            targetWindow === window.name ||
            targetWindow === '_self' ||
            (targetWindow === 'top' && window === window.top)) { return true; }

        return false;
    };

    /**
     * Activates the router and the underlying history tracking mechanism.
     * @method activate
     * @return {Promise} A promise that resolves when the router is ready.
     */
    rootRouter.activate = function(options) {
        return system.defer(function(dfd) {
            startDeferred = dfd;
            rootRouter.options = system.extend({ routeHandler: rootRouter.loadUrl }, rootRouter.options, options);

            history.activate(rootRouter.options);

            if(history._hasPushState){
                var routes = rootRouter.routes,
                    i = routes.length;

                while(i--){
                    var current = routes[i];
                    current.hash = current.hash.replace('#', '/');
                }
            }

            var rootStripper = rootRouter.options.root && new RegExp("^" + rootRouter.options.root + "/");

            $(document).delegate("a", 'click', function(evt){
                if(history._hasPushState){
                    if(!evt.altKey && !evt.ctrlKey && !evt.metaKey && !evt.shiftKey && rootRouter.targetIsThisWindow(evt)){
                        var href = $(this).attr("href");

                        // Ensure the protocol is not part of URL, meaning its relative.
                        // Stop the event bubbling to ensure the link will not cause a page refresh.
                        if (href != null && !(href.charAt(0) === "#" || /^[a-z]+:/i.test(href))) {
                            rootRouter.explicitNavigation = true;
                            evt.preventDefault();

                            if (rootStripper) {
                                href = href.replace(rootStripper, "");
                            }

                            history.navigate(href);
                        }
                    }
                }else{
                    rootRouter.explicitNavigation = true;
                }
            });

            if(history.options.silent && startDeferred){
                startDeferred.resolve();
                startDeferred = null;
            }
        }).promise();
    };

    /**
     * Disable history, perhaps temporarily. Not useful in a real app, but possibly useful for unit testing Routers.
     * @method deactivate
     */
    rootRouter.deactivate = function() {
        history.deactivate();
    };

    /**
     * Installs the router's custom ko binding handler.
     * @method install
     */
    rootRouter.install = function(){
        ko.bindingHandlers.router = {
            init: function() {
                return { controlsDescendantBindings: true };
            },
            update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var settings = ko.utils.unwrapObservable(valueAccessor()) || {};

                if (settings.__router__) {
                    settings = {
                        model:settings.activeItem(),
                        attached:settings.attached,
                        compositionComplete:settings.compositionComplete,
                        activate: false
                    };
                } else {
                    var theRouter = ko.utils.unwrapObservable(settings.router || viewModel.router) || rootRouter;
                    settings.model = theRouter.activeItem();
                    settings.attached = theRouter.attached;
                    settings.compositionComplete = theRouter.compositionComplete;
                    settings.activate = false;
                }

                composition.compose(element, settings, bindingContext);
            }
        };

        ko.virtualElements.allowedBindings.router = true;
    };

    return rootRouter;
});

define('viewmodels/nav',['services/logger', "knockout", "services/adbFuncs", "durandal/app", 'plugins/router', 'services/application','services/resource'],
    function (logger, ko, adbFuncs, app, router, application, resource) {
        "use strict";
        var title = 'nav',
            viewportState = application.viewportState,
            defaultRouteParameters = '/:center/:zoom(/background/:background)(/id/:id)(/filter/:filter)',

            createRoute = function (obj) {
                return {
                    route: obj.specialRouteParameters ? obj.id + obj.specialRouteParameters : obj.id + defaultRouteParameters,
                    activeView: obj.id,
                    title: resource.res()[obj.title],
                    moduleId: obj.moduleId,
                    nav: true
                };
            },
            createTabmodel = function (obj) {
                var undifinedIsBool = function (value, bool) {
                        var b = typeof bool === 'undefined' ? true : bool; //default value of bool is true
                        return typeof value === 'undefined' ? b : value; //default value of value is true (else bool)
                    },

                    createObservable = function (value, bool) {
                        var v = undifinedIsBool(value, bool);
                        return typeof v !== 'function' ?
                                ko.observable(!!v) :
                                ko.computed(function () {
                                    var result;
                                    try {
                                        result = v();
                                    } catch (err) {
                                        result = false;
                                    }
                                    return !!result;
                                });
                    };

                return {
                    id: obj.id,
                    name: obj.name || resource.res()[obj.title],
                    title: resource.res()[obj.title],
                    link: obj.link || "#",
                    //image: "images/Spritelist-" + (obj.name || "list") + ".png",
                    classname: (obj.id || "list") + "Icon",
                    visible: createObservable(obj.visible, true),
                    enabled: createObservable(obj.enabled, true)
                };
            },
            activeView = ko.observable(),

            createUri = function (viewName) {
                var uri;
                viewName = viewName || activeView() || "map";

                // Todo: fjern tomme innslag fra lista?
                var urlFilter = application.urlFilter();
                let filterItems = function (key, value) {// Filtering out properties
                    if (value && key != '' && value.constructor === Array && value.length == 0) { // Ta bort empty arrays
                        return undefined;
                    }
                    if (key != '' && (value == 0 || value == false)){
                            return undefined;
                    }
                    // Ta bort int = 0, men m� da kanskje fikse retur og....
                    return value;};
                uri = viewName + "/" + viewportState.center() + "/" + viewportState.zoom() +
                    "/background/" + viewportState.background() + (viewportState.id() ? "/id/" + viewportState.id() : "")
                    + "/filter/" + encodeURIComponent(ko.toJSON(urlFilter, filterItems));
                   //+"/filter/" + encodeURIComponent(ko.toJSON(application.filter));

                return uri;
            },

            navigateTo = function (fragment, options) {
                if (fragment.indexOf('undefined') === 0) {
                    logger.error("route undefined", null, title, true);
                    throw new Error("route undefined");
                }
                router.navigate(fragment, options);
            },
            restart = function () {
                navigateTo("map/" + application.config.defaultMapCenter + "/" + application.config.defaultMapZoom + "/background/" + application.config.initialBaseMapLayer);
            },

            activate = function () {
                router.map(adbFuncs.map(application.routeInfo, createRoute)).buildNavigationModel();
                router.activate();
                router.on('router:navigation:complete', function (instance, instruction) {
                    activeView(instruction.config.activeView);
                });
                if (window.location.hash === "") {
                    restart();
                }

                return true;
            },

            updateUri = function () {
                var uri = createUri();
                navigateTo(uri, false);  // only update url (does not trigger view activation)
            },
            navTabs = adbFuncs.map(application.routeInfo, createTabmodel),
            activeNavTab = ko.computed(function () {
                var activeview = activeView() || 'map';
                var result = adbFuncs.filter(navTabs, function(nt) {
                    return nt.id === activeview;
                });
                return result[0];
            }),
            gotoTab = function (tabinfo) {
                if (tabinfo.enabled() /*&& tabinfo.visible()*/) {
                    var uri = createUri(tabinfo.id);
                    navigateTo(uri); // activate view
                }
            },
            vm = {
                activate: activate,
                restart: restart,
                activeView: activeView,
                activeRouteItem: function() {
                     return router.activeItem();
                },
                title: title,
                navTabs: navTabs,
                activeNavTab: activeNavTab,
                gotoTab: gotoTab,
                navigateTo: navigateTo
            };

        application.viewportStateChanged.subscribe(function () {
            updateUri();
        });
        application.filterChanged.subscribe(function () {
            updateUri();
        });

        return vm;
    });

define('services/createPagedList',['services/logger', 'jquery', "knockout", 'services/application', 'viewmodels/nav', "durandal/app", 'services/resource'],
    function (logger, $, ko, application, nav, app, resource) {
        return function (getListDataFunc, title) {
            var vm;
            vm = {
                title: title || "pagedList",
                res: resource.res,

                activate: function (center, zoom, background, id, filter) {
                    //logger.log(vm.title + ' View Activated', null, vm.title, true);

                    application.parseUrlFilter(filter);

                    app.trigger('listview:activate', '');
                    vm.updateSelection();

                },
                compositionComplete: function () {
                    vm.updateSelection();
                },
                currentPage: ko.observable(0),
                updating: ko.observable(false),
                loadingmore: ko.observable(false),
                availablePageIndexes: ko.observableArray(),
                lastPageIndex: ko.observable(0),

                itemList: ko.observableArray(),
                getListData: getListDataFunc,

                fillList: function () {
                    var promise = vm.getListData(vm.currentPage());
                    return promise.then(function (data) {
                        vm.itemList(data.itemList);
                        vm.lastPageIndex(data.totalPages() - 1);
                    });
                },
                updateSelection: function () {
                    //logger.log(vm.title + ' updateSelection', null, vm.title, true);
                    if (!vm.updating()) {
                        vm.updating(true);
                        vm.itemList.removeAll();
                        vm.availablePageIndexes.removeAll();
                        vm.currentPage(0);
                        vm.fillList().then(function () {
                            var maxListItems = $('body').width() > 481 ? application.config.maxListShowPages : application.config.maxMobileListShowPages;

                            if (vm.lastPageIndex() > 0) {
                                var lastAvailablePageIndex, i;
                                if (vm.lastPageIndex() > maxListItems) {
                                    lastAvailablePageIndex = maxListItems;
                                } else {
                                    lastAvailablePageIndex = vm.lastPageIndex();
                                }
                                for (i = 0; i <= lastAvailablePageIndex; i++) {
                                    vm.availablePageIndexes.push(i);
                                }
                            }
                            vm.updating(false);
                        });
                    }
                },
                goToPage: function (pageIndex) {
                    vm.loadingmore(true);
                    app.trigger('listview:pagechange', '');
                    var maxListItems = $('body').width() > 481 ? application.config.maxListShowPages : application.config.maxMobileListShowPages;
                    var i;
                    if (pageIndex === 0) {  // first page
                        vm.availablePageIndexes.removeAll();
                        for (i = 0; i <= Math.min(vm.lastPageIndex(), maxListItems); i++) {
                            vm.availablePageIndexes.push(i);
                        }
                    } else if (pageIndex === vm.lastPageIndex() ){ // last page
                        vm.availablePageIndexes.removeAll();
                        for (i = Math.max(0,vm.lastPageIndex() - maxListItems); i <= vm.lastPageIndex(); i++) {
                            vm.availablePageIndexes.push(i);
                        }
                    } else if (pageIndex > vm.availablePageIndexes()[maxListItems] || pageIndex < vm.availablePageIndexes()[0]) {
                        vm.availablePageIndexes.removeAll();
                        var start = Math.max(0, pageIndex-Math.floor(maxListItems/2));
                        var end = Math.min(vm.lastPageIndex(), start+maxListItems);
                        for (i = start; i <= end; i++) {
                            vm.availablePageIndexes.push(i);
                        }
                    }
                    if (pageIndex === vm.availablePageIndexes()[maxListItems] && pageIndex < vm.lastPageIndex()) {
                        vm.availablePageIndexes.shift();
                        vm.availablePageIndexes.push(pageIndex + 1);
                    } else if (pageIndex === vm.availablePageIndexes()[0] && pageIndex !== 0) {
                        vm.availablePageIndexes.pop();
                        vm.availablePageIndexes.unshift(pageIndex - 1);
                    }
                    vm.itemList.removeAll();
                    vm.currentPage(pageIndex);
                    vm.fillList().then(function () {
                        $("#mainPanel").scrollTop(0);
                        vm.loadingmore(false);

                    });
                },
                fastBackward: function () {
                    var maxListItems = $('body').width() > 481 ? application.config.maxListShowPages : application.config.maxMobileListShowPages;
                    vm.goToPage(Math.max(vm.currentPage() - maxListItems,  0));
                },
                fastForward: function () {
                    var maxListItems = $('body').width() > 481 ? application.config.maxListShowPages : application.config.maxMobileListShowPages;
                    vm.goToPage(Math.min(vm.currentPage() + maxListItems,  vm.lastPageIndex()));
                },
                nextPage: function () {
                    vm.goToPage(vm.currentPage() + 1);
                },
                previousPage: function () {
                    vm.goToPage(vm.currentPage() - 1);
                },
                firstPage: function () {
                    vm.goToPage(0);
                },
                lastPage: function () {
                    vm.goToPage(vm.lastPageIndex());
                },
                listSortOrder: ko.observable(),
                sortColumn: function (col, table, order) {
                    if (order()[col]) {
                        table.sort(function (left, right) {
                            return left[col] === right[col] ? 0 : left[col] < right[col] ? -1 : 1;
                        });
                    } else {
                        table.sort(function (right, left) {
                            return left[col] === right[col] ? 0 : left[col] < right[col] ? -1 : 1;
                        });
                    }
                    order()[col] = !order()[col];
                },
                deepSortColumn: function (col1, col2, table, order) {
                    if (order()[col1][col2]) {
                        table.sort(function (left, right) {
                            if (left[col1][0] && right[col1][0]) {
                                return left[col1][0][col2] === right[col1][0][col2] ? 0 : left[col1][0][col2] < right[col1][0][col2] ? -1 : 1;
                            }
                            return 1;
                        });
                    } else {
                        table.sort(function (right, left) {
                            if (left[col1][0] && right[col1][0]) {
                                return left[col1][0][col2] === right[col1][0][col2] ? 0 : left[col1][0][col2] < right[col1][0][col2] ? -1 : 1;
                            }
                            return 1;
                        });
                    }
                    order()[col1][col2] = !order()[col1][col2];
                },

                sortListColumn: function (col) {
                    vm.sortColumn(col, vm.itemList, vm.listSortOrder);
                },
                deepSortListColumn: function(col1, col2) {
                    vm.deepSortColumn(col1, col2, vm.itemList, vm.listSortOrder);
                }
            };
            vm.pagePositionText = ko.computed(function () {
                return application.addSeparator(this.currentPage() + 1) + " / " + application.addSeparator(this.lastPageIndex() + 1);
            }, vm);
            vm.addSeparator = application.addSeparator;

            return vm;
        };
    });

define(
    "services/cssclass",
    [],
    function () {
        "use strict";
        var getElement = function (element) {
                return typeof element === 'string' ? document.getElementById(element) : element;
            },
            checkForClass = function (element, nameOfClass) {
                element = getElement(element);
                if (!element || !element.className){
                    return false;
                }
                return element.className === '' ?
                   false :
                   new RegExp('\\b' + nameOfClass + '\\b').test(element.className);
            },
            addClass = function (element, nameOfClass) {
                element = getElement(element);
                var containsClass = checkForClass(element, nameOfClass);
                if (!containsClass) {
                    element.className += (element.className ? ' ' : '') + nameOfClass;
                }
                return !containsClass;
            },
            removeClass = function (element, nameOfClass) {
                element = getElement(element);
                var containsClass = checkForClass(element, nameOfClass);
                if (containsClass) {
                    element.className = element.className.replace(
                        element.className.indexOf(' ' + nameOfClass) >= 0 ? ' ' + nameOfClass : nameOfClass,
                        '');
                }
                return containsClass;
            },
            replaceClass = function (element, class1, class2) {
                element = getElement(element);
                var containsClass = checkForClass(element, class1);
                if (containsClass) {
                    removeClass(element, class1);
                    addClass(element, class2);
                }
                return containsClass;
            },
            toggleClass = function (element, nameOfClass) {
                element = getElement(element);
                if (checkForClass(element, nameOfClass)) {
                    removeClass(element, nameOfClass);
                } else {
                    addClass(element, nameOfClass);
                }
                return true;
            },
            addEvent = function (elem, type, eventHandle) {
                if (elem === null || elem === 'undefined') {
                    return;
                }
                if (elem.addEventListener) {
                    elem.addEventListener(type, eventHandle, false);
                } else if (elem.attachEvent) {
                    elem.attachEvent("on" + type, eventHandle);
                } else {
                    elem["on" + type] = eventHandle;
                }
            },
            module = {
                getElement: getElement,
                checkForClass: checkForClass,
                addClass: addClass,
                removeClass: removeClass,
                replaceClass: replaceClass,
                toggleClass: toggleClass,
                addEvent: addEvent
            };

        return module;
    }
);

define('services/dataServices',['services/logger', 'jquery', 'knockout', 'services/config', 'durandal/app'],
    function (logger, $, ko, config, app) {
        var title = "dataServices",
            myPromises = {},
            promiseKeeper = function (name, promise) {
                var lastPromise = myPromises[name];
                if (lastPromise && lastPromise.state() === "pending") {
                    // Pending call exist - abort it!
                    lastPromise.abort("Ignore");
                }
                myPromises[name] = promise;
            },
            autoCompleteValue = function (id, name, type) {
                return {
                    Id: id,
                    Name: name,
                    Type: type
                };
            },
            downloadFile = function download(data, contentType, fileName, isBinary) {
                var ie = navigator.userAgent.match(/MSIE\s([\d.]+)/);
                var ie11 = navigator.userAgent.match(/Trident\/7.0/) && navigator.userAgent.match(/rv:11/);
                var ieEdge = navigator.userAgent.match(/Edge/g);
                var ieVer = ie ? ie[1] : ie11 ? 11 : ieEdge ? 12 : -1;

                if (ie && ieVer < 10) {
                    alert("Export is not supported in this browser.");
                    return;
                }

                if (ieVer > -1) {
                    var dataAsBlob = new Blob([data], {
                        type: contentType
                    });
                    window.navigator.msSaveOrOpenBlob(dataAsBlob, fileName);
                } else {
                    var element = document.createElement('a');
                    element.setAttribute('download', fileName);
                    if (isBinary) {
                        element.setAttribute('href', 'data:' + contentType + ';base64,' + btoa([].reduce.call(new Uint8Array(data), function (p, c) {
                            return p + String.fromCharCode(c);
                        }, '')));
                    } else {
                        element.setAttribute('href', 'data:' + contentType + ',' + encodeURIComponent(data));
                    }
                    element.style.display = 'none';
                    document.body.appendChild(element);
                    element.click();
                    setTimeout(function () { document.body.removeChild(element); }, 333);

                }
                app.trigger('downloadFile:done', fileName);
            },
            getDataPromise = function (name, url, filter, type) {
                var rq = {
                    type: type || 'GET',
                    contentType: "application/json;charset=utf-8"
                };
                rq.url = url;
                if (filter !== undefined) {
                    rq.data = ko.toJS(filter);
                }
                var promise = $.ajax(rq);

                promiseKeeper(name, promise);

                return promise;
            },

            postDataPromise = function (name, url, filter, type) {
                var rq = {
                    type: type || 'POST',
                    contentType: "application/json;charset=utf-8"
                };
                rq.url = url;
                if (filter !== undefined) {
                    rq.data = ko.toJSON(filter);
                }
                var promise = $.ajax(rq);
                //    .always(function () {
                //    logger.log('promise complete ' + url);
                //});

                promiseKeeper(name, promise);

                return promise;
            },
            deleteDataPromise = function (url) {
                var rq = {
                    type: 'DELETE',
                    contentType: "application/json;charset=utf-8"
                };
                rq.url = url;

                var promise = $.ajax(rq);

                return promise;
            },
            postBinaryRequest = function (url, filter, contentType, filename) {
                var xhr = new XMLHttpRequest();
                xhr.open('POST', url, true);
                xhr.timeout = 120000; // time in milliseconds // todo: decide a sensible value
                xhr.responseType = 'arraybuffer';
                xhr.onload = function () {
                    if (this.status === 200) {
                        downloadFile(this.response, contentType, filename, true);
                    }
                };

                var data = ko.toJSON(filter);

                xhr.setRequestHeader("Content-type", "application/json;charset=utf-8");
                xhr.send(data);
            },

            postFormUploadPromise = function (url, formData) {
                var rq = {
                    type: 'POST',
                    url: url,
                    contentType: false,
                    cache: false,
                    processData: false,
                    enctype: "multipart/form-data",
                    data: formData,
                    async: true,
                    timeout: 360000 // time in milliseconds // todo: decide a sensible value
                };
                var promise = $.ajax(rq);

                return promise;
            },

            setCollectorsNames = function (names) {
                var collectors = "";
                if (names != null) {
                        // deler opp navn til observatører hvis det var flere 
                        var collectors = names.split("|");

                     if (collectors.length > 1) {
                            for (var i = 1; i < collectors.length; i++) {
                              // legger til et mellomrom mellom observatørernes navn
                             collectors[i] = (" " + collectors[i]);
                            }                         
                    }
                    collectors = collectors.toString();
                 }
                return collectors;
            },

            /// ----- api calls ----------
            getLocationByName = function (searchTerm) {
                logger.log('getLocationByName', null, title, true);
                //ie fix
                var string = encodeURIComponent(searchTerm);
                var url = config.apiurl + 'GeolocationByName?name=' + string;
                return getDataPromise('getLocationByName', url);
            },
            hentOmraadeForMatrikkelenhet = function (kommuneNr, gaardsnr, bruksNr, festNr, seksjonsNr) {
                logger.log('hentOmraadeForMatrikkelenhet', null, title, true);
                var url = config.apiurl + 'HentOmraadeForMatrikkelenhet/' + kommuneNr + '/' + gaardsnr + '/' + bruksNr + '/' + festNr + '/' + seksjonsNr;
                return getDataPromise('hentOmraadeForMatrikkelenhet', url);
            },
            finnMatrikkelenheter = function (kommuneNr, gaardsnr, bruksNr) {
                logger.log('finnMatrikkelenheter', null, title, true);
                var url = config.apiurl + 'FinnMatrikkelenheter/' + kommuneNr + '/' + gaardsnr + '/' + bruksNr;
                return getDataPromise('finnMatrikkelenheter', url);
            },
            getGbnrByTerm = function (searchTerm) {
                logger.log('geolocationByGBNr', null, title, true);
                //ie fix
                var string = encodeURIComponent(searchTerm);
                var url = config.apiurl + 'GetRealEstateDataByString?gbnrString=' + string;
                return getDataPromise('getGbnrByTerm', url);
            },
            getObservationCategoryCount = function (filter, caller) {
                logger.log('GetObservationCategoryCount', null, title, true);
                var url = config.dataAdmApiUrl + 'GetObservationCategoryCount';
                return getDataPromise('getObservationCategoryCount' + caller, url, filter);
            },
            getObservationBasisOfRecordCount = function (filter, caller) {
                logger.log('getObservationBasisOfRecordCount', null, title, true);
                var url = config.dataAdmApiUrl + 'GetObservationBasisOfRecordCount';
                return getDataPromise('getObservationBasisOfRecordCount' + caller, url, filter);
            },
            getObservationBehaviorCount = function (filter, caller) {
                logger.log('getObservationBehaviorCount', null, title, true);
                var url = config.dataAdmApiUrl + 'GetObservationBehaviorCount';
                return getDataPromise('getObservationBehaviorCount' + caller, url, filter);
            },
            getObservationMonthCount = function (filter, caller) {
                logger.log('getObservationMonthCount', null, title, true);
                var url = config.dataAdmApiUrl + 'GetObservationMonthCount';
                return getDataPromise('getObservationMonthCount' + caller, url, filter);
            },
            getObservationYearCount = function (filter, sortColumn, ascending, page, pagesize) {
                sortColumn = sortColumn || "count";
                ascending = ascending || false;
                page = page || 0;
                pagesize = pagesize || 25;

                logger.log('getObservationYearCount', null, title, true);
                var url = config.dataAdmApiUrl +
                    'GetObservationYearCount/?sortColumn=' +
                    sortColumn +
                    '&ascending=' +
                    ascending +
                    '&page=' +
                    page +
                    '&pagesize=' +
                    pagesize;
                return getDataPromise('getObservationYearCount', url, filter);
            },
            getObservationInstitutionCount = function (filter, caller) {
                logger.log('getObservationInstitutionCount', null, title, true);
                var url = config.dataAdmApiUrl + 'GetObservationInstitutionCount';
                return getDataPromise('getObservationInstitutionCount' + caller, url, filter);
            },
            getObservationTaxonGroupCount = function (filter, caller) {
                logger.log('getObservationTaxonGroupCount', null, title, true);
                var url = config.dataAdmApiUrl + 'GetObservationTaxonGroupCount';
                return getDataPromise('getObservationTaxonGroupCount' + caller, url, filter);
            },
            getObservationTaxonCount = function (filter, sortColumn, ascending, page, pagesize) {
                sortColumn = sortColumn || "count";
                ascending = ascending || false;
                page = page || 0;
                pagesize = pagesize || 25;

                logger.log('getObservationTaxonCount', null, title, true);
                var url = config.dataAdmApiUrl +
                    'GetObservationTaxonCount/?sortColumn=' +
                    sortColumn +
                    '&ascending=' +
                    ascending +
                    '&page=' +
                    page +
                    '&pagesize=' +
                    pagesize;
                return getDataPromise('getObservationTaxonCount', url, filter);
            },
            getObservationTagCount = function (filter) {
                logger.log('GetObservationTagCount', null, title, true);
                var url = config.dataAdmApiUrl + 'GetObservationTagCount';
                return getDataPromise('getObservationTagCount', url, filter);
            },
            getObservationImgCount = function (filter) {
                logger.log('GetObservationImgCount', null, title, true);
                var url = config.dataAdmApiUrl + 'GetObservationImgCount';
                return getDataPromise('getObservationImgCount', url, filter);
            },
            getObservationFoundCount = function (filter) {
                logger.log('GetObservationFoundCount', null, title, true);
                var url = config.dataAdmApiUrl + 'GetObservationFoundCount';
                return getDataPromise('getObservationFoundCount', url, filter);
            },
            getObservationNotRecoveredCount = function (filter) {
                logger.log('GetObservationNotRecoveredCount', null, title, true);
                var url = config.dataAdmApiUrl + 'GetObservationNotRecoveredCount';
                return getDataPromise('getObservationNotRecoveredCount', url, filter);
            },
            getObservationValidCount = function (filter) {
                logger.log('GetObservationValidCount', null, title, true);
                var url = config.dataAdmApiUrl + 'GetObservationValidCount';
                return getDataPromise('getObservationValidCount', url, filter);
            },
            getObservationUnsureIdCount = function (filter) {
                logger.log('GetObservationUnsureIdCount', null, title, true);
                var url = config.dataAdmApiUrl + 'GetObservationUnsureIdCount';
                return getDataPromise('getObservationUnsureIdCount', url, filter);
            },
            getObservationSpontanCount = function (filter) {
                logger.log('GetObservationSpontanCount', null, title, true);
                var url = config.dataAdmApiUrl + 'GetObservationSpontanCount';
                return getDataPromise('getObservationSpontanCount', url, filter);
            },
            getObservationConservationCount = function (filter) {
                logger.log('GetObservationConservationCount', null, title, true);
                var url = config.dataAdmApiUrl + 'GetObservationConservationCount';
                return getDataPromise('getObservationConservationCount', url, filter);
            },
            getDistinctTaxonPerInstitutionCount = function (filter) {
                logger.log('GetDistinctTaxonPerInstitutionCount', null, title, true);
                var url = config.dataAdmApiUrl + 'GetDistinctTaxonPerInstitutionCount';
                return getDataPromise('getDistinctTaxonPerInstitutionCount', url, filter);
            },

            getAreas = function (type, nr) {
                logger.log('getArea', null, title, true);
                var url = config.dataAdmApiUrl + 'GetAreas/?areatype=' + type + '&number=' + nr;
                return getDataPromise('getAreas' + nr, url);
            },
            getArea = function (id) {
                logger.log('getArea', null, title, true);
                var url = config.dataAdmApiUrl + 'GetArea/?id=' + id;
                return getDataPromise('getArea' + id, url);
            },
            getTaxon = function (id) {
                logger.log('getTaxon', null, title, true);
                var url = config.dataAdmApiUrl + 'GetTaxon/?id=' + id;
                return getDataPromise('getTaxon' + id, url);
            },

            getFullTaxon = function (id) {
                logger.log('getFullTaxon', null, title, true);
                var url = config.dataAdmApiUrl + 'GetFullTaxon/?id=' + id;
                return getDataPromise('getFullTaxon' + id, url);
            },
            getOrganization = function (id) {
                logger.log('getOrganization', null, title, true);
                var url = config.dataAdmApiUrl + 'GetOrganization/?id=' + id;
                return getDataPromise('getOrganization' + id, url);
            },
            getInstitutions = function (caller) {
                logger.log('getInstitutions', null, title, true);
                var url = config.dataAdmApiUrl + 'GetInstitutions/';
                return getDataPromise('getInstitutions' + caller, url);
            },
            getAllTaxonNames = function () {
                logger.log('getAllTaxonNames', null, title, true);
                var url = config.dataAdmApiUrl + 'GetTaxonNames/';
                return getDataPromise('getAllTaxonNames', url);
            },
            getTaxonGroups = function () {
                logger.log('getTaxonGroups', null, title, true);
                var url = config.dataAdmApiUrl + 'GetTaxonGroups/';
                return getDataPromise('getTaxonGroups', url);
            },
            getReleaseInfo = function () {
                logger.log('getReleaseInfo', null, title, true);
                var url = config.dataAdmApiUrl + 'GetReleaseInfo/';
                return getDataPromise('getReleaseInfo', url);
            },
            searchAreas = function (name, areatype) {
                logger.log('searchAreas', null, title, true);
                //ie fix
                var string = encodeURIComponent(name);
                var url = config.dataAdmApiUrl + 'SearchAreas/?name=' + string + '&areatype=' + areatype;
                return getDataPromise('searchAreas', url);
            },
            searchDatasets = function (name) {
                logger.log('searchDatasets', null, title, true);
                //ie fix
                var string = encodeURIComponent(name);
                var url = config.dataAdmApiUrl + 'SearchDatasets/?name=' + string;
                return getDataPromise('searchDatasets', url);
            },
            searchCollections = function (name) {
                logger.log('searchCollections', null, title, true);
                //ie fix
                var string = encodeURIComponent(name);
                var url = config.dataAdmApiUrl + 'SearchCollections/?name=' + string;
                return getDataPromise('searchCollections', url);
            },
            exportObservationsByLocalIds = function (ids) {
                logger.log('exportObservationsByLocalIds', null, title, true);
                var url = config.dataAdmApiUrl + 'ExportObservationsByLocalIds';
                var iddata = { 'LocalIds': ids };
                return postDataPromise('exportObservationsByLocalIds', url, iddata);
            },
            exportObservationsBySearchFilter = function (filter) {
                logger.log('exportObservationsBySearchFilter', null, title, true);
                var url = config.dataAdmApiUrl + 'ExportObservationsBySearchFilter';
                return postDataPromise('exportObservationsBySearchFilter', url, filter);
            },
            exportObservationsAsShapeBySearchFilter = function (filter) {
                logger.log('exportObservationsAsShapeBySearchFilter', null, title, true);
                var url = config.dataAdmApiUrl + 'ExportObservationsAsShapeBySearchFilter';
                return postBinaryRequest(url, filter, 'application/zip', 'data.zip');
            },
            exportObservationsAsGmlBySearchFilter = function (filter) {
                logger.log('exportObservationsAsGmlBySearchFilter', null, title, true);
                var url = config.dataAdmApiUrl + 'ExportObservationsAsGmlBySearchFilter';
                return postDataPromise('exportObservationsAsGmlBySearchFilter', url, filter);
            },
            exportObservationsToXlsx = function (filter) {
                logger.log('ExportObservationsToXlsx', null, title, true);
                var url = config.dataAdmApiUrl + 'ExportObservationsToXlsx';
                return postBinaryRequest(url, filter, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'observations.xlsx');
            },
            exportObservationsVerbatim = function (filter) {
                logger.log('ExportObservationsVerbatim', null, title, true);
                var url = config.dataAdmApiUrl + 'ExportObservationsVerbatim';
                return postBinaryRequest(url, filter, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'verbatim.xlsx');
            },
            createObservationsExportJob = function (filter, format) {
                logger.log('StartExportJob', null, title, true);
                var url;
                if (format == "xlsx") {
                    url = config.exportAdmApiUrl + 'StartExportJob/excel';
                } else if (format == "csv") {
                    url = config.exportAdmApiUrl + 'StartExportJob/csv';
                }
                // todo: Svetlana 
                // lage to url'er feks StartExportJob/excel og StartExportJob/cvs logikk basert på format parameter
                return postDataPromise('exportObservationsBySearchFilter', url, filter);
            },

            searchLocations = function(filter) {
                logger.log('SearchLocations', null, title, true);
                var url = config.dataAdmApiUrl + 'SearchLocations?';
                //var promise = postDataPromise('searchLocations', url, filter);
                var promise = getDataPromise('searchLocations', url, filter);
                return promise;
            },
            searchObservations = function (filter) {
                logger.log('SearchObservations', null, title, true);
                var url = config.dataAdmApiUrl + 'SearchObservations?';
                return getDataPromise('searchObservations', url, filter);
            },
            getObservationCount = function (filter, mode) {
                logger.log('GetObservationCount', null, title, true);
                var url = config.dataAdmApiUrl + 'GetObservationCount?';
                return getDataPromise('getObservationCount' + mode, url, filter);
            },
            saveSearchFilter = function (filter) {
                logger.log('SaveSearchFilter', null, title, true);
                var url = config.dataAdmApiUrl + 'SaveSearchFilter?';
                return postDataPromise('saveSearchFilter', url, filter);
            },
            getSearchFilter = function (guid) {
                logger.log('GetSearchFilter', null, title, true);
                var url = config.dataAdmApiUrl + 'GetSearchFilter/?id=' + guid;
                return getDataPromise('getSearchFilter', url);
            },
            getSearchFilterDescription = function (filter) {
                logger.log('GetSearchFilterDescription', null, title, true);
                var url = config.dataAdmApiUrl + 'GetSearchFilterDescription';
                return postDataPromise('getSearchFilterDescription', url, filter);
            },
            
            getObservationInfoBySearchFilter = function (filter) {
                logger.log('getObservationInfoBySearchFilter', null, title, true);
                var url = config.dataAdmApiUrl + 'getObservationInfoBySearchFilter?';
                return postDataPromise('getObservationInfoBySearchFilter', url, filter);
            },
            getRssFeedItems = function () {
                logger.log('getRssFeedItems', null, title, true);
                var url = config.dataAdmApiUrl + "GetRssFeedItems";
                return getDataPromise('getRssFeedItems', url);
            },
            getObservation = function (id) {
                logger.log('getObservation', null, title, true);
                var url = config.dataAdmApiUrl + 'GetObservation/?id=' + id;
                return getDataPromise('getObservation', url);
            },

            /// ---- taxon ------
            searchTaxons = function (searchString, maxCount) {
                logger.log('searchTaxons by searchTerm ', null, title, true);
                //ie fix
                var string = encodeURIComponent(searchString);
                var url = config.dataAdmApiUrl + 'SearchTaxons?maxCount=' + maxCount + '&name=' + string;
                return getDataPromise('searchTaxons', url);
            },

            getTaxonChildren = function (id) {
                logger.log('getTaxonChildren by id', null, title, true);
                var url = config.dataAdmApiUrl + 'GetTaxonTree?parentTaxonId=' + id;
                return getDataPromise('getTaxonChildren', url);
            },


        /// ---------------------

            /// ---------------------
            services = {
                promiseKeeper: promiseKeeper,
                getLocationByName: getLocationByName,
                getGbnrByTerm: getGbnrByTerm,
                searchLocations: searchLocations,
                searchObservations: searchObservations,
                setCollectorsNames: setCollectorsNames,
                getObservationCount: getObservationCount,
                getObservation: getObservation,
                getObservationInfoBySearchFilter: getObservationInfoBySearchFilter,
                getObservationCategoryCount: getObservationCategoryCount,
                getObservationBasisOfRecordCount: getObservationBasisOfRecordCount,
                getObservationBehaviorCount: getObservationBehaviorCount,
                getObservationMonthCount: getObservationMonthCount,
                getObservationYearCount: getObservationYearCount,
                getObservationInstitutionCount: getObservationInstitutionCount,
                getObservationTaxonGroupCount: getObservationTaxonGroupCount,
                getObservationTaxonCount: getObservationTaxonCount,
                getObservationTagCount: getObservationTagCount,
                getObservationImgCount: getObservationImgCount,
                getObservationFoundCount: getObservationFoundCount,
                getObservationNotRecoveredCount: getObservationNotRecoveredCount,
                getObservationValidCount: getObservationValidCount,
                getObservationUnsureIdCount: getObservationUnsureIdCount,
                getObservationSpontanCount: getObservationSpontanCount,
                getObservationConservationCount: getObservationConservationCount,
                getDistinctTaxonPerInstitutionCount: getDistinctTaxonPerInstitutionCount,
                getAreas: getAreas,
                getArea: getArea,
                getTaxon: getTaxon,
                getFullTaxon: getFullTaxon,
                getInstitutions: getInstitutions,
                getAllTaxonNames: getAllTaxonNames,
                getTaxonGroups: getTaxonGroups,
                getReleaseInfo: getReleaseInfo,
                getOrganization: getOrganization,
                searchAreas: searchAreas,
                searchDatasets: searchDatasets,
                searchCollections: searchCollections,
                hentOmraadeForMatrikkelenhet: hentOmraadeForMatrikkelenhet,
                finnMatrikkelenheter: finnMatrikkelenheter,
                getRssFeedItems: getRssFeedItems,
                saveSearchFilter: saveSearchFilter,
                getSearchFilter: getSearchFilter,
                getSearchFilterDescription: getSearchFilterDescription,
                /* Export */
                downloadFile: downloadFile,
                exportObservationsByLocalIds: exportObservationsByLocalIds,
                exportObservationsBySearchFilter: exportObservationsBySearchFilter,
                exportObservationsAsShapeBySearchFilter: exportObservationsAsShapeBySearchFilter,
                exportObservationsAsGmlBySearchFilter: exportObservationsAsGmlBySearchFilter,
                exportObservationsToXlsx: exportObservationsToXlsx,
                exportObservationsVerbatim: exportObservationsVerbatim,
                createObservationsExportJob: createObservationsExportJob,

                searchTaxons: searchTaxons,
                getTaxonChildren: getTaxonChildren

            };

        return services;
    });

define('services/knockoutExtensions',['services/logger', 'knockout', 'jquery'],
    function (logger, ko, $) {
        ko.observableArray.fn.any = function () {
            return this().length > 0;
        };

        //usage: <button data-bind="toggle: isHidden">Show / Hide</button>
        ko.bindingHandlers.toggle = {
            init: function (element, valueAccessor) {
                var value = valueAccessor();
                ko.applyBindingsToNode(element, {
                    click: function () {
                        value(!value());
                    }
                });
            }
        };

        //usage: <img data-bind="src: imgSrc" />
        ko.bindingHandlers.href = {
            update: function (element, valueAccessor) {
                ko.bindingHandlers.attr.update(element, function () {
                    return {
                        href: valueAccessor()
                    };
                });
            }
        };

        //usage: <a data-bind="href: myUrl">Click Me</a>
        ko.bindingHandlers.src = {
            update: function (element, valueAccessor) {
                ko.bindingHandlers.attr.update(element, function () {
                    return { src: valueAccessor() };
                });
            }
        };

        //usage: <form data-bind="hidden: hideForm"> (inverse of visible)
        //todo: check if this is already in knockout 3
        ko.bindingHandlers.hidden = {
            update: function (element, valueAccessor) {
                var value = ko.utils.unwrapObservable(valueAccessor());
                ko.bindingHandlers.visible.update(element, function() {
                     return !value;
                });
            }
        };
        // usage: <div data-bind="trimText: myText1"></div>
        // or <div data-bind="trimText: myText1, trimTextLength: 10"></div>
        ko.bindingHandlers.trimLengthText = {};
        ko.bindingHandlers.trimText = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel) {

                var trimmedText = ko.computed(function () {
                    var untrimmedText = ko.utils.unwrapObservable(valueAccessor());
                    var defaultMaxLength = 25;
                    var minLength = 5;
                    var maxLength = ko.utils.unwrapObservable(allBindingsAccessor().trimTextLength) || defaultMaxLength;
                    if (maxLength < minLength) maxLength = minLength;
                    var text = untrimmedText.length > maxLength ? untrimmedText.substring(0, maxLength - 1) + '...' : untrimmedText;
                    return text;
                });
                ko.applyBindingsToNode(element, {
                    text: trimmedText
                }, viewModel);

                return {
                    controlsDescendantBindings: true
                };
            }
        };
        //https://github.com/rniemeyer/knockout-jqAutocomplete/blob/master/src/knockout-jqAutocomplete.js
        //jqAuto -- main binding (should contain additional options to pass to autocomplete)
        //jqAutoSource -- the array to populate with choices (needs to be an observableArray)
        //jqAutoQuery -- function to return choices
        //jqAutoValue -- where to write the selected value
        //jqAutoSourceLabel -- the property that should be displayed in the possible choices
        //jqAutoSourceInputValue -- the property that should be displayed in the input box
        //jqAutoSourceValue -- the property to use for the value
        ko.bindingHandlers.jqAuto = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
                var options = valueAccessor() || {},
                    allBindings = allBindingsAccessor(),
                    unwrap = ko.utils.unwrapObservable,
                    modelValue = allBindings.jqAutoValue,
                    source = allBindings.jqAutoSource,
                    query = allBindings.jqAutoQuery,
                    valueProp = allBindings.jqAutoSourceValue,
                    inputValueProp = allBindings.jqAutoSourceInputValue || valueProp,
                    labelProp = allBindings.jqAutoSourceLabel || inputValueProp;

                //function that is shared by both select and change event handlers
                function writeValueToModel(valueToWrite) {
                    if (ko.isWriteableObservable(modelValue)) {
                        modelValue(valueToWrite);
                    } else {  //write to non-observable
                        if (allBindings['_ko_property_writers'] && allBindings['_ko_property_writers']['jqAutoValue']) {
                            allBindings['_ko_property_writers']['jqAutoValue'](valueToWrite);
                        }
                    }
                }

                //on a selection write the proper value to the model
                options.select = function (event, ui) {
                    writeValueToModel(ui.item ? ui.item.actualValue : null);
                };

                //on a change, make sure that it is a valid value or clear out the model value
                options.change = function(event, ui) {
                    var currentValue = $(element).val();
                    var matchingItem = ko.utils.arrayFirst(unwrap(source),
                        function(item) {
                            return unwrap(inputValueProp ? item[inputValueProp] : item) === currentValue;
                        });

                    if (!matchingItem) {
                        writeValueToModel(null);
                    }
                };

                //hold the autocomplete current response
                var currentResponse = null;

                //handle the choices being updated in a DO, to decouple value updates from source (options) updates
                var mappedSource = ko.dependentObservable({
                    read: function () {
                        mapped = ko.utils.arrayMap(unwrap(source), function (item) {
                            var result = {};
                            result.label = labelProp ? unwrap(item[labelProp]) : unwrap(item).toString();  //show in pop-up choices
                            result.value = inputValueProp ? unwrap(item[inputValueProp]) : unwrap(item).toString();  //show in input box
                            result.actualValue = valueProp ? unwrap(item[valueProp]) : item;  //store in model
                            return result;
                        });
                        return mapped;
                    },
                    write: function (newValue) {
                        source(newValue);  //update the source observableArray, so our mapped value (above) is correct
                        if (currentResponse) {
                            currentResponse(mappedSource());
                        }
                    },
                    disposeWhenNodeIsRemoved: element
                });

                if (query) {
                    options.source = function(request, response) {
                        currentResponse = response;
                        query.call(this, request.term, mappedSource);
                    };
                } else {
                    //whenever the items that make up the source are updated, make sure that autocomplete knows it
                    mappedSource.subscribe(function (newValue) {
                        $(element).autocomplete("option", "source", newValue);
                    });

                    options.source = mappedSource();
                }


                //initialize autocomplete
                $(element).autocomplete(options);
            },
            update: function (element, valueAccessor, allBindingsAccessor, viewModel) {
                //update value based on a model change
                var allBindings = allBindingsAccessor(),
                    unwrap = ko.utils.unwrapObservable,
                    modelValue = unwrap(allBindings.jqAutoValue) || '',
                    valueProp = allBindings.jqAutoSourceValue,
                    inputValueProp = allBindings.jqAutoSourceInputValue || valueProp;

                //if we are writing a different property to the input than we are writing to the model, then locate the object
                if (valueProp && inputValueProp !== valueProp) {
                    var source = unwrap(allBindings.jqAutoSource) || [];
                    modelValue = ko.utils.arrayFirst(source, function (item) {
                        return unwrap(item[valueProp]) === modelValue;
                    }) || {};
                }

                //update the element with the value that should be shown in the input
                $(element).val(modelValue && inputValueProp !== valueProp ? unwrap(modelValue[inputValueProp]) : modelValue.toString());
            }
        };
        logger.log("knockoutExtensions loaded");
    });

define('services/layerConfig',['knockout', 'services/config', 'services/application', 'services/dataServices', 'services/resource', 'services/adbFuncs'],
    function (ko, config, application, dataServices, resource, adb) {
        "use strict";

        // Attributions
        var kartverketBackgroundAttribution =
            'Europa-bakgrunnskart fra: <a href="//www.kartverket.no/kart">Kartverket</a>';
        var kartverketAttribution = 'Kilde: <a href="//www.kartverket.no/kart">Kartverket</a>';
        var admGrenserAttribution = 'Administrative grenser: <a href="//kartverket.no/Geonorge/">GeoNorge</a>';
        var miljodirAttribution = '<a href="//www.miljodirektoratet.no/">Miljødirektoratet</a>';
        var ArtdbAttribution = '<a href="//www.artsdatabanken.no/">Artsdatabanken</a>';

        // WMTS-layer start
        var sProjection = 'EPSG:32633';
        var sProjectionSvalbard = 'EPSG:25833';
        var speciesColorScale = undefined;
        var precisionColorScale = undefined;
        proj4.defs(sProjection, "+proj=utm +zone=33 +ellps=WGS84 +datum=WGS84 +units=m +no_defs");
        //proj4.defs("EPSG:25833", "+proj=utm +zone=33 +ellps=GRS80 +units=m +no_defs");
        //proj4.defs("EPSG:25833", "+proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs");

        var projection = new ol.proj.Projection({
            code: sProjection,
            //extent: [-2000000, 3500000, 3545984, 9045984],
            extent: [-2500000, 3500000, 3045984, 9045984],
            units: "m"
        });


        // justert på øyemål, må muligens finjusteres enda mer..
        var svalbardXMin = -5118180;    // Finjuster x-posisjon her
        var svalbardYMin = 7224500;     // Finjuster y-posisjon her
        var svalbardWidth = 5545984;    // La denne være 
        var svalbardHeight = 2772992;   // La denne være 

        var projectionSvalbard = new ol.proj.Projection({
                code: sProjectionSvalbard,
                //extent: [-5120900, 7225108, 425084, 9998100],
                //       xmin,      ymin,   xmax,   ymax   // meter
                //extent: [-5118055, 7224258, 427929, 9997250], // justert på øyemål, må muligens finjusteres enda mer..
                extent: [svalbardXMin, svalbardYMin, svalbardXMin + svalbardWidth, svalbardYMin + svalbardHeight], 
                units: "m"
        }),
            projectionExtent = projection.getExtent(),
            projectionExtentSvalbard = projectionSvalbard.getExtent(),
            size = ol.extent.getWidth(projectionExtent) / 256,
            sizeSvalbard = ol.extent.getWidth(projectionExtentSvalbard) / 256,
            numZoomLevels = 18,
            resolutions = new Array(numZoomLevels),
            matrixIds = new Array(numZoomLevels),
            nibmatrixIds = new Array(numZoomLevels),
            svalbardResolutions = new Array(numZoomLevels),
            matrixSet = sProjection,
            matrixSetSvalbard = sProjectionSvalbard;

        for (var z = 0; z < numZoomLevels; ++z) {
            resolutions[z] = size / Math.pow(2, z);
            svalbardResolutions[z] = sizeSvalbard / Math.pow(2, z);
            matrixIds[z] = matrixSet + ":" + z;
            nibmatrixIds[z] = z;
        }

        var wmtsTileGrid = new ol.tilegrid.WMTS({
            origin: ol.extent.getTopLeft(projectionExtent),
            resolutions: resolutions,
            matrixIds: matrixIds
        }),
        wmtsTileGridSvalbard = new ol.tilegrid.WMTS({
            origin: ol.extent.getTopLeft(projectionExtentSvalbard),
            resolutions: svalbardResolutions,
            matrixIds: nibmatrixIds
        }),
        wmtsTileGridNib = new ol.tilegrid.WMTS({
            origin: ol.extent.getTopLeft(projectionExtent),
            resolutions: resolutions,
            matrixIds: nibmatrixIds
        });

        ol.proj.addProjection(projection);


        //'http://opencache.statkart.no/gatekeeper/gk/gk.open_wmts?request=GetCapabilities&service=WMTS
        //'http://localhost:49912/proxy?http://opencache.statkart.no/gatekeeper/gk/gk.open_wmts?',

        //var baatUrl = config.proxyurl + '//opencache.statkart.no/gatekeeper/gk/gk.open_wmts?',
        //var baatUrl = config.proxyurl + '//gatekeeper{1-3}.geonorge.no/BaatGatekeeper/gk/gk.cache_wmts?';
        var baatUrl = '//gatekeeper{1-3}.geonorge.no/BaatGatekeeper/gk/gk.cache_wmts?';
        //if (config.dev) baatUrl = config.proxyurl + '//opencache.statkart.no/gatekeeper/gk/gk.open_wmts?';
        if (config.dev) baatUrl = '//opencache.statkart.no/gatekeeper/gk/gk.open_wmts?';

        var baatTileLoader = function (imageTile, src) {
            imageTile.getImage().src = src + "&gkt=" + application.ndToken();
        };

        var greyMap = new ol.layer.Tile({
            opacity: 1,
            extent: [-2500000, 3500000, 3045984, 9045984],
            source: new ol.source.WMTS({
                url: baatUrl,
                layer: 'norges_grunnkart_graatone',
                attributions: kartverketAttribution,
                matrixSet: matrixSet,
                format: 'image/png',
                projection: projection,
                tileGrid: wmtsTileGrid,
                tileLoadFunction: baatTileLoader,
                style: 'default',
                wrapX: true,
                crossOrigin: 'anonymous'
            })
        });
        greyMap.name = "greyMap";

        var topo2 = new ol.layer.Tile({
            opacity: 1,
            extent: [-2500000, 3500000, 3045984, 9045984],
            source: new ol.source.WMTS({
                url: baatUrl,
                layer: 'norgeskart_bakgrunn',
                attributions: kartverketAttribution,
                matrixSet: matrixSet,
                format: 'image/png',
                projection: projection,
                tileGrid: wmtsTileGrid,
                tileLoadFunction: baatTileLoader,
                style: 'default',
                wrapX: true,
                crossOrigin: 'anonymous'
            })
        });
        topo2.name = "topo2";

        var sjokart = new ol.layer.Tile({
            opacity: 1,
            extent: [-2500000, 3500000, 3045984, 9045984],
            source: new ol.source.WMTS({
                url: baatUrl,
                layer: 'sjokartraster',
                attributions: kartverketAttribution,
                matrixSet: matrixSet,
                format: 'image/png',
                projection: projection,
                tileGrid: wmtsTileGrid,
                tileLoadFunction: baatTileLoader,
                style: 'default',
                wrapX: true,
                crossOrigin: 'anonymous'
            })
        });
        sjokart.name = "sjokart";

        var europa = new ol.layer.Tile({
            opacity: 1,
            extent: [-2500000, 3500000, 3045984, 9045984],
            source: new ol.source.WMTS({
                url: baatUrl,
                layer: 'egk',
                attributions: kartverketBackgroundAttribution,
                matrixSet: matrixSet,
                format: 'image/png',
                projection: projection,
                tileGrid: wmtsTileGrid,
                tileLoadFunction: baatTileLoader,
                style: 'default',
                wrapX: true,
                crossOrigin: 'anonymous'
            }),
            //minResolution: 200,
            minResolution: 100
        });
        europa.name = "europa";

        // var greyMap2 = new ol.layer.Tile({
        //     opacity: 1,
        //     source: new ol.source.WMTS({
        //         url: baatUrl,
        //         layer: 'norges_grunnkart_graatone',
        //         attributions: kartverketAttribution,
        //         matrixSet: matrixSet,
        //         format: 'image/png',
        //         projection: projection,
        //         tileGrid: wmtsTileGrid,
        //         tileLoadFunction: baatTileLoader,
        //         style: 'default',
        //         wrapX: true
        //     })
        // });
        // greyMap2.name = "greyMap2";
        //
        // var grunnkart = new ol.layer.Tile({
        //     opacity: 1,
        //     source: new ol.source.WMTS({
        //         url: baatUrl,
        //         layer: 'norges_grunnkart',
        //         attributions: kartverketAttribution,
        //         matrixSet: matrixSet,
        //         format: 'image/png',
        //         projection: projection,
        //         tileGrid: wmtsTileGrid,
        //         tileLoadFunction: baatTileLoader,
        //         style: 'default',
        //         wrapX: true
        //     })
        // });
        // grunnkart.name = "grunnkart";

        var terreng = new ol.layer.Tile({
            opacity: 1,
            extent: [-2500000, 3500000, 3045984, 9045984],
            source: new ol.source.WMTS({
                url: baatUrl,
                layer: 'terreng_norgeskart',
                attributions: kartverketAttribution,
                matrixSet: matrixSet,
                format: 'image/png',
                projection: projection,
                tileGrid: wmtsTileGrid,
                tileLoadFunction: baatTileLoader,
                style: 'default',
                wrapX: true,
                crossOrigin: 'anonymous'
            })
        });
        terreng.name = "terreng";

        var filtersaken = "";

        var rasterTileLoader = function (imageTile, src) {
            var test = encodeURIComponent(ko.toJSON(application.urlFilter()));
            if (filtersaken !== test) {
                filtersaken = test;
                rasterTileLayer.getSource().updateParams({ 'LAYERS': 'topp:states', 'TILED': true, adbFilter: test });
            }
            imageTile.getImage().src = src;
            //imageTile.getImage().src = src + "&adbFilter=" + encodeURIComponent(ko.toJSON(application.urlFilter()));
        };

        application.listFilterChanged.subscribe(function () {
            rasterTileLayer.getSource().updateParams({ 'LAYERS': 'topp:states', 'TILED': true, adbFilter: encodeURIComponent(ko.toJSON(application.urlFilter())) });
        });
        var rasterTileLayer = new ol.layer.Tile({
            //extent: [-13884991, 2870341, -7455066, 6338219],
            source: new ol.source.TileWMS({
                url: config.apiwmsUrl,
                //cacheSize: 0,
                params: { 'LAYERS': 'topp:states', 'TILED': true, adbFilter: encodeURIComponent(ko.toJSON(application.urlFilter())) }//,
                //tileLoadFunction: rasterTileLoader
                //serverType: 'geoserver'
            })
        });

        rasterTileLayer.name = "testRaster";

        var replaceUrlParameter = function (url, parameter, value) {
            var val = '';
            var tmp = '';
            var pos = url.indexOf('?' + parameter + '=');
            if (pos < 0) {
                pos = url.indexOf('&' + parameter + '=');
            }
            if (pos >= 0) {
                val = url.substr(pos);
                url = url.substr(0, pos + parameter.length + 2);
                val = val.substr(parameter.length + 2);
                tmp = val;
                pos = val.indexOf('&');
                if (pos >= 0) {
                    val = val.substr(0, pos);
                }
                tmp = value + tmp.substr(pos);
            }
            return url + tmp;
        };
        var nibTileLoader = function (imageTile, src) {
            src = replaceUrlParameter(src.toLowerCase().replace("baatgatekeeper", "BaatGatekeeper"), 'tilematrixset', 'default028mm');
            src = replaceUrlParameter(src.toLowerCase().replace("baatgatekeeper","BaatGatekeeper"), 'gkt', application.ndToken());
            imageTile.getImage().src = src;

        };


        var nibUrl = '//gatekeeper{1-3}.geonorge.no/BaatGatekeeper/gk/gk.nib_utm33_wmts_v2?GKT=';
        var nibWmts =new ol.layer.Tile({
            opacity: 1,
            extent: [-2500000, 3500000, 3045984, 9045984],
            source: new ol.source.WMTS({
                url: nibUrl,
                layer: 'Nibcache_UTM33_EUREF89_v2',
                attributions: kartverketAttribution,
                matrixSet: matrixSet,
                format: 'image/png',
                //projection: projection,
                tileGrid: wmtsTileGridNib,
                tileLoadFunction: nibTileLoader,
                style: 'default',
                wrapX: true,
                crossOrigin: null
            })

        });
        nibWmts.name = "nibwmts";
        // WMTS-layer end

        var svalbardTileLoader = function (imageTile, src) {
            src = replaceUrlParameter(src, 'tilematrixset', 'default028mm');
            imageTile.getImage().src = src;

        };
        // http://geodata.npolar.no/arcgis/rest/services/Basisdata/NP_Basiskart_Svalbard_WMTS_25833/MapServer/WMTS?request=getcapabilities
        var svalbardUrl = "//geodata.npolar.no/arcgis/rest/services/Basisdata/NP_Basiskart_Svalbard_WMTS_25833/MapServer/WMTS?";
        var svalbard = new ol.layer.Tile({
            opacity: 1,
            extent: [368000, 8240000, 875000, 9045984],
            source: new ol.source.WMTS({
                url: svalbardUrl,
                layer: 'Basisdata_NP_Basiskart_Svalbard_WMTS_25833',
                attributions: kartverketAttribution,
                matrixSet: matrixSetSvalbard,
                format: 'image/jpgpng',
                projection: 'EPSG:25833', // ? må kanskje definere selv? Se også https://openlayers.org/en/latest/doc/tutorials/raster-reprojection.html 
                tileGrid: wmtsTileGridSvalbard,
                tileLoadFunction: svalbardTileLoader,
                style: 'default',
                wrapX: true,
                crossOrigin: 'anonymous'
                //crossOrigin: null
            })
        });
        svalbard.name = "svalbard";

        // http://geodata.npolar.no/arcgis/rest/services/Basisdata/NP_Basiskart_JanMayen_WMTS_25833/MapServer/WMTS?request=getcapabilities
        var janMayenUrl = "//geodata.npolar.no/arcgis/rest/services/Basisdata/NP_Basiskart_JanMayen_WMTS_25833/MapServer/WMTS?";
        var janMayen = new ol.layer.Tile({
            opacity: 1,
            extent: [-393783, 7978220, 276963, 8084965], // todo: sjekk disse
            source: new ol.source.WMTS({
                url: janMayenUrl,
                layer: 'NP_Basiskart_JanMayen_WMTS_25833',
                attributions: kartverketAttribution,
                matrixSet: matrixSetSvalbard,
                format: 'image/jpgpng',
                projection: 'EPSG:25833',
                tileGrid: wmtsTileGridSvalbard,
                tileLoadFunction: svalbardTileLoader,
                style: 'default',
                wrapX: true,
                crossOrigin: 'anonymous'
                //crossOrigin: null
            })
        });
        janMayen.name = "janMayen";

        function getToken() {
            return application.ndToken();
        }

        //// http://arcgisproxy.miljodirektoratet.no/arcgis/services/naturtyper_nin/MapServer/WMSServer?request=GetCapabilities&service=WMS
        //var wmsNin = new ol.layer.Tile({
        //    extent: [-20037508.34, -20037508.34, 20037508.34, 20037508.34],
        //    source: new ol.source.TileWMS(({
        //        url: "http://arcgisproxy.miljodirektoratet.no/arcgis/services/naturtyper_nin/MapServer/WMSServer?",
        //        params: {
        //            LAYERS: "NiN_natursystem",
        //            VERSION: "1.3.0",
        //            FORMAT: "image/png",
        //            SRS: "EPSG:32633"
        //        }//,
        //        //crossOrigin: 'anonymous'
        //    }))
        //});
        //wmsNin.name = "NiN";

        // http://arcgisproxy.dirnat.no/arcgis/services/nin_landskapstyper/nin_landskapstyper/MapServer/WmsServer?request=GetCapabilities&service=WMS
        //var wmsNinLandskap = new ol.layer.Tile({
        //    extent: [-20037508.34, -20037508.34, 20037508.34, 20037508.34],
        //    source: new ol.source.TileWMS(({
        //        //url: config.proxyurl + "http://arcgisproxy.dirnat.no/arcgis/services/nin_landskapstyper/nin_landskapstyper/MapServer/WmsServer? ",
        //        url: "http://arcgisproxy.dirnat.no/arcgis/services/nin_landskapstyper/nin_landskapstyper/MapServer/WmsServer? ",
        //        params: {
        //            LAYERS: "NIN_LandskapsArealEnhet",
        //            VERSION: "1.3.0",
        //            FORMAT: "image/png",
        //            SRS: "EPSG:32633"
        //        }//,
        //        //crossOrigin: 'anonymous'
        //    }))
        //});
        //wmsNinLandskap.name = "NiNLandskap";

        //http://wms.geonorge.no/skwms1/wms.abas?request=GetCapabilities&service=WMS&version=1.3.0
        var wmsAdmGrenser = new ol.layer.Image({
            extent: [-20037508.34, -20037508.34, 20037508.34, 20037508.34],
            source: new ol.source.ImageWMS({
                attributions: admGrenserAttribution,
                //url: config.proxyurl + "http://wms.geonorge.no/skwms1/wms.adm_enheter?",
                url: "//wms.geonorge.no/skwms1/wms.adm_enheter?",
                params: {
                    LAYERS: "kommuner,fylker",
                    VERSION: "1.3.0",
                    FORMAT: "image/png",
                    SRS: "EPSG:32633"
                }
            })
        });
        wmsAdmGrenser.name = "admGrenser";

        //http://wms.miljodirektoratet.no/arcgis/services/vern/mapserver/WMSServer?request=GetCapabilities&service=WMS&version=1.3.0
        var wmsVern = new ol.layer.Tile({
            opacity:0.5,
            extent: [-20037508.34, -20037508.34, 20037508.34, 20037508.34],
            source: new ol.source.TileWMS({
                attributions: miljodirAttribution,
                //url: config.proxyurl + "http://wms.miljodirektoratet.no/arcgis/services/vern/mapserver/WMSServer?",
                //url: "//wms.miljodirektoratet.no/arcgis/services/vern/mapserver/WMSServer?",
                url: config.vernProxyUrl,
                params: {
                    LAYERS: "naturvern_klasser_omrade,foreslatt_naturvern_omrade",
                    VERSION: "1.3.0",
                    FORMAT: "image/png",
                    SRS: "EPSG:32633"
                },
                crossOrigin: 'anonymous'
            })
        });
        wmsVern.name = "vern";

        //http://wms.miljodirektoratet.no/arcgis/services/vern/mapserver/WMSServer?request=GetCapabilities&service=WMS&version=1.3.0
        var wmsSeksjon = new ol.layer.Tile({
            opacity: 0.5,
            extent: [-20037508.34, -20037508.34, 20037508.34, 20037508.34],
            source: new ol.source.TileWMS({
                attributions: ArtdbAttribution,
                //url: config.proxyurl + "http://wms.miljodirektoratet.no/arcgis/services/vern/mapserver/WMSServer?",
                //url: "//wms.miljodirektoratet.no/arcgis/services/vern/mapserver/WMSServer?",
                url: '//kart.artsdatabanken.no/wms/lkm.aspx?',
                params: {
                    LAYERS: "seksjoner2017",
                    VERSION: "1.3.0",
                    FORMAT: "image/png",
                    SRS: "EPSG:32633"
                },
                crossOrigin: 'anonymous'
            })
        });
        wmsSeksjon.name = "bioseksjoner";

        //http://wms.miljodirektoratet.no/arcgis/services/vern/mapserver/WMSServer?request=GetCapabilities&service=WMS&version=1.3.0
        var wmsSone = new ol.layer.Tile({
            opacity: 0.5,
            extent: [-20037508.34, -20037508.34, 20037508.34, 20037508.34],
            source: new ol.source.TileWMS({attributions: ArtdbAttribution,
                //url: config.proxyurl + "http://wms.miljodirektoratet.no/arcgis/services/vern/mapserver/WMSServer?",
                //url: "//wms.miljodirektoratet.no/arcgis/services/vern/mapserver/WMSServer?",
                url: '//kart.artsdatabanken.no/wms/lkm.aspx?',
                params: {
                    LAYERS: "soner2017",
                    VERSION: "1.3.0",
                    FORMAT: "image/png",
                    SRS: "EPSG:32633"
                },
                crossOrigin: 'anonymous'
            })
        });
        wmsSone.name = "biosoner";

        // WMS-layers end

        // var openCycleMapLayer = new ol.layer.Tile({
        //     source: new ol.source.OSM({
        //         attributions: [
        //             new ol.Attribution({
        //                 html: 'All maps &copy; ' +
        //                 '<a href="http://www.opencyclemap.org/">OpenCycleMap</a>'
        //             }),
        //             ol.source.OSM.ATTRIBUTION
        //         ],
        //         url: '//{a-c}.tile.opencyclemap.org/cycle/{z}/{x}/{y}.png'
        //     })
        // });
        // openCycleMapLayer.name = "openCycleMap";

        var openStreetMapLayer = new ol.layer.Tile({
            source: new ol.source.OSM({
                attributions: 'All maps &copy; <a href="//www.openstreetmap.org/">OpenStreetMap</a>',
                url: '//{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                crossOrigin: 'anonymous'
            })
        });
        openStreetMapLayer.name = "openStreetMap";

        ///---------------------
        function tileUrlFunction(tileCoord) {
            return '/ninmap/nin/{z}/{x}/{y}.geojson'
                .replace('{z}', String(tileCoord[0]))
                .replace('{x}', String(tileCoord[1]))
                .replace('{y}', String(tileCoord[2]));
        }

        function tileUrlFunctionHeat(tileCoord) {
            return '/ninmap/heat/{z}/{x}/{y}.png'
                .replace('{z}', String(tileCoord[0]))
                .replace('{x}', String(tileCoord[1]))
                .replace('{y}', String(tileCoord[2]));
        }

        var landuseStyleCache = {};
        resolutions = [];
        //        for (var z = 1; z <= 22; ++z) {
        for (z = 0; z <= 17; ++z)
            resolutions.push(156543.03392804097 / Math.pow(2, z));

        var layer1 =
            new ol.layer.VectorTile({
                projection: "EPSG:32633",
                renderMode: 'vector',
                //                preload: Infinity,
                source: new ol.source.VectorTile({
                    format: new ol.format.GeoJSON({
                        defaultDataProjection: "EPSG:32633"
                    }),
                    tileGrid: ol.tilegrid.createXYZ({minZoom: 3, maxZoom: 13}),
                    tileGrid2: new ol.tilegrid.TileGrid({
                        extent: projection.getExtent(),
                        resolutions: resolutions
                    }),
                    tileUrlFunction: tileUrlFunction,
                    crossOrigin: 'anonymous'
                }),
                visible: true,
                style: function (feature) {
                    var styleKey = feature.get('kind');
                    var style = landuseStyleCache[styleKey];
                    if (!style) {
                        var color, width;
                        color = {
                            'envelope': '#eeeeee',
                            'kommune': '#ddd',
                            'fylke': '#aaa',
                            'NR': '#DA10E7',
                            'LVO': '#76C759',
                            'LVOP': '#D58F8D',
                            'LVOD': '#3E7D28',
                            'NP': '#007E00',
                            'D': '#ff8f00',
                            'NA I1-C-1': '#404040',
                            'NA I1-C-2': '#404040',
                            'NA V1-C-1': '#404040',
                            'NA T45-E-1': '#f04040',
                            'NA T45-E-2': '#404040',
                            'NA T44': '#404040',
                            'NA V3-C-2': '#404040',
                            'NA L2-2': '#404040',
                            'T44': '#404040'
                        }[styleKey];
                        width = {
                            'envelope': 0.1,
                            'kommune': 2,
                            'fylke': 3
                        }[styleKey];
                        if (!width) width = 1;
                        var fillColor = {
                            'NR': 'rgba(155,5,5,0.2)',
                            'LVO': 'rgba(5,195,155,0.2)',
                            'LVOP': 'rgba(255,195,155,0.2)',
                            'LVOD': 'rgba(155,255,155,0.2)',
                            'NP': 'rgba(15,255,15,0.2)',
                            'D': 'rgba(255,255,0,0.2)',
                            'NA I1-C-1': 'rgba(20,100,0,0.2)',
                            'NA I1-C-2': 'rgba(20,100,100,0.2)',
                            'NA V1-C-1': 'rgba(120,00,0,0.2)',
                            'NA T45-E-1': 'rgba(190,100,120,0.2)',
                            'NA T45-E-2': 'rgba(120,100,120,0.2)',
                            'NA T44': 'rgba(20,100,180,0.2)',
                            'NA V3-C-2': 'rgba(20,20,220,0.2)',
                            'NA V4-C-2': 'rgba(120,20,220,0.2)',
                            'NA T4-C-2': 'rgba(20,20,220,0.2)',
                            'NA L2-2': 'rgba(20,220,220,0.2)'
                        }[styleKey];
                        var lineDash = {
                            'envelope': [7],
                            'kommune': [5],
                            'fylke': [14]
                        }[styleKey];
                        if (!fillColor)
                            console.log("____" + styleKey);
                        style = new ol.style.Style({
                            stroke: new ol.style.Stroke({
                                color: color,
                                lineDash: !lineDash ? undefined : lineDash,
                                width: width
                            }),
                            fill: !fillColor ? undefined : new ol.style.Fill({color: fillColor})
                        });
                        landuseStyleCache[styleKey] = style;
                    }
                    return style;
                }
            });
        layer1.name = "Layer1";
        layer1.description = "Layer1";
        ///---------------------

        var tmsHead = new ol.layer.Tile({
            preload: 1,
            source: new ol.source.TileImage({
                projection: "EPSG:32633",
                tileGrid: ol.tilegrid.createXYZ({minZoom: 0, maxZoom: 13}),
                tileGrid2: new ol.tilegrid.TileGrid({
                    origin: ol.extent.getTopLeft(projectionExtent),
                    extent: projection.getExtent(),
                    resolutions: resolutions
                }),
                tileUrlFunction: tileUrlFunctionHeat,
                crossOrigin: 'anonymous'
            })
        });
        tmsHead.name = "Heat test";
        tmsHead.description = "Heat test";

        var group = new ol.layer.Group({
            layers: [openStreetMapLayer, tmsHead]
        });
        group.name = "Heat test";

        var bingMapNames = [
            'road',
            //'aerial',
            'aerialWithLabels'
        ];

        var bingDescriptions = [
            'Bing Veikart',
            //'Bing Flyfoto',
            'Bing Hybrid'
        ];


        greyMap.needsToken = true;
        topo2.needsToken = true;
        sjokart.needsToken = true;
        europa.needsToken = true;
        // greyMap2.needsToken = true;
        // grunnkart.needsToken = true;
        terreng.needsToken = true;

        var baseLayerPool = ko.observableArray([]);
        var overlayLayerPool = ko.observableArray([]);
        var observationStyleMode = ko.observable("category");
        baseLayerPool.push(greyMap, openStreetMapLayer, nibWmts, terreng, sjokart, europa, topo2, svalbard, janMayen);
        overlayLayerPool.push(/*wmsNin, wmsNinLandskap,*/ wmsAdmGrenser, wmsVern, wmsSeksjon, wmsSone); //, rasterTileLayer);

        var i, ii;
        for (i = 0, ii = bingMapNames.length; i < ii; ++i) {
            var layer =
                new ol.layer.Tile({
                    preload: Infinity,
                    source: new ol.source.BingMaps({
                        key: config.bk,
                        imagerySet: bingMapNames[i],
                        crossOrigin: 'anonymous'
                        // use maxZoom 19 to see stretched tiles instead of the BingMaps
                        // "no photos at this zoom level" tiles
                        // maxZoom: 19
                    })
                });
            //layer.name = bingMapNames[i];
            baseLayerPool.push(layer);
        }

        var getBaseLayerFromPool = function (layerName) {
            var i, layerInPool;
            for (i = 0; i < baseLayerPool().length; i++) {
                layerInPool = baseLayerPool()[i];
                if (layerInPool.name === layerName) {
                    return layerInPool;
                }
            }
            return null;
        };
        var getOverlayLayerFromPool = function (layerName) {
            var i, layerInPool;
            for (i = 0; i < overlayLayerPool().length; i++) {
                layerInPool = overlayLayerPool()[i];
                if (layerInPool.name === layerName) {
                    return layerInPool;
                }
            }
            return null;
        };

        function createSymbolRenderer(colors, size) {
            var
            // Adjust for rounding errors
                pad = 0.1,
                width = size * 2,
                height = size * 2;

            var canvas = document.createElement('canvas');
            canvas.width = width + pad;
            canvas.height = height;
            var ctx = canvas.getContext('2d');
            ctx.beginPath();
            ctx.moveTo(0, height);
            ctx.quadraticCurveTo(size, 0, width, height);
            ctx.lineWidth = 1;

            // line color
            ctx.strokeStyle = colors[0];
            ctx.stroke();

            return ctx.createPattern(canvas, 'repeat');
        }

        function createSquareRenderer(colors, squareWidth) {
            var
            // Adjust for rounding errors
                pad = 0.1,
                width = squareWidth * 2,
                height = squareWidth * 2;

            var canvas = document.createElement('canvas');
            canvas.width = width + pad;
            canvas.height = height;
            var ctx = canvas.getContext('2d');
            ctx.fillStyle = colors[0];
            ctx.fillRect(0, 0, width, height);
            ctx.fillStyle = colors[1];
            ctx.fillRect(squareWidth, 0, squareWidth, squareWidth);
            ctx.fillRect(0, squareWidth, squareWidth, squareWidth);

            return ctx.createPattern(canvas, 'repeat');
        }

        function createStripesRenderer(colors, strokeWidth, angle) {
            var
                // Adjust for rounding errors
                pad = 0.1,
                radian = angle * Math.PI / 180,
                width = strokeWidth * colors.length,
                height = strokeWidth * colors.length,
                widthR = width / Math.cos(radian),
                heightR = height / Math.sin(radian),
                i;

            var canvas = document.createElement('canvas');
            canvas.width = widthR + pad;
            canvas.height = heightR;
            var ctx = canvas.getContext('2d');
            ctx.lineWidth = strokeWidth;

            ctx.translate((widthR - width) / 2, 0);
            ctx.rotate(radian);
            for (i = -colors.length; i < colors.length * 2; i++) {
                ctx.strokeStyle = colors[(i + colors.length) % colors.length];
                ctx.beginPath();
                ctx.moveTo(strokeWidth * i + strokeWidth * 0.5, -heightR);
                ctx.lineTo(strokeWidth * i + strokeWidth * 0.5, heightR);
                ctx.stroke();
            }
            return ctx.createPattern(canvas, 'repeat');
        }

        var observationStyleCache = {};
        var selectedObservationStyleCache = {};
        var minimumObservationDot = 4;
        var setStyleMode = function (mode) {
            observationStyleMode(mode);
        };

        var res = 1;
        var getGeometryFromResolution = function (theFeature) {
            // return the coordinates of the first ring of the polygon
            const theGeometry = theFeature.getGeometry();
            if (theGeometry.getType() === "Point") {
                return theGeometry;
            }

            const envelope1 = theGeometry.getExtent();
            const width = (envelope1[2] - envelope1[0]);
            const height = (envelope1[3] - envelope1[1]);
            const minSize = width > height ? height : width;

            const number = (minSize / res);
            if ((number < 7)) {
                return new ol.geom.Point(ol.extent.getCenter(envelope1));
            } else {
                return theGeometry;
            }
        };

        var getPointWhenPolygonIsVisibleFromResolution = function (theFeature) {
            // return the coordinates of the first ring of the polygon
            const theGeometry = theFeature.getGeometry();
            if (theGeometry.getType() === "Point") {
                return null; // trenger ikke ekstra punkt
            }

            const envelope1 = theGeometry.getExtent();
            const width = (envelope1[2] - envelope1[0]);
            const height = (envelope1[3] - envelope1[1]);
            const minSize = width > height ? height : width;

            const number = (minSize / res);
            if ((number >= 7)) {
                return new ol.geom.Point(ol.extent.getCenter(envelope1));
            } else {
                return null;
            }
        };

        var getPointFromGeometry = function(theFeature) {
            // return the coordinates of the first ring of the polygon
            const theGeometry = theFeature.getGeometry();
            if (theGeometry.getType() === "Point") {
                return theGeometry;
            }

            return new ol.geom.Point(ol.extent.getCenter(theGeometry.getExtent()));
        };
        // Styles for selected
        var observationSelectedStyleFunc = function (feature, resolution) {
            if (res != resolution) {
                res = resolution;
            }
            var prop = feature.getProperties();
            var maxCategory = prop.MaxCategory || 0;
            var precision = prop.Precision || 0;
            var taxonId = prop.TaxonId || 0;
            var geoType = feature.getGeometry().getType();
            var isPoint = geoType === "Point";
            var observationCount = prop.ObservationCount || 1;
            var radius = Math.min(35, Math.min(25, Math.min(20, minimumObservationDot + observationCount / 10) + observationCount / 1000) + observationCount / 10000);
            var categoryColor = config.categoryColors[config.categoryMapping[maxCategory]].color;
            var precisionColorScale = d3.scale.linear().domain([0, 1, 500, 10000]).range(["grey", "yellow", "orange", "red"]);
            var cacheValue = maxCategory;
            switch (observationStyleMode()) {
                case "precision":
                    cacheValue = precision;
                    break;
                case "species":
                    cacheValue = taxonId;
                    break;
                case "category":
                    cacheValue = maxCategory + " " + radius;
                    break;
            }
            var style = selectedObservationStyleCache[observationStyleMode() + cacheValue]; // get from cache if it has already been created
            if (!style) {

                switch (observationStyleMode()) {
                    case "precision":
                        style = [
                            new ol.style.Style({
                                image: new ol.style.Circle({
                                    radius: 5,
                                    fill: new ol.style.Fill({
                                        color: precisionColorScale(precision)
                                    }),
                                    stroke: new ol.style.Stroke({
                                        color: precisionColorScale(precision),
                                        width: 1.3
                                    })
                                }),
                                //text: new ol.style.Text({
                                //    text: isPoint ? "" : "⭓",
                                //    scale: 1.4,
                                //    fill: new ol.style.Fill({
                                //        color: precisionColorScale(precision)
                                //    }),
                                //    stroke: new ol.style.Stroke({
                                //        color: '#fff',
                                //        width: 0.2
                                //    })
                                //}),
                                stroke: new ol.style.Stroke({
                                    color: '#fff',
                                    width: 1.4
                                }),
                                geometry: getGeometryFromResolution

                            }),
                            new ol.style.Style({
                                image: new ol.style.Circle({
                                    radius: 5,
                                    fill: new ol.style.Fill({
                                        color: precisionColorScale(precision)
                                    }),
                                    stroke: new ol.style.Stroke({
                                        color: precisionColorScale(precision),
                                        width: 1.3
                                    })
                                }),
                                //text: new ol.style.Text({
                                //    text: isPoint ? "" : "⭓",
                                //    scale: 1.4,
                                //    fill: new ol.style.Fill({
                                //        color: precisionColorScale(precision)
                                //    }),
                                //    stroke: new ol.style.Stroke({
                                //        color: '#fff',
                                //        width: 0.2
                                //    })
                                //}),
                                stroke: new ol.style.Stroke({
                                    color: '#fff',
                                    width: 1.4
                                }),
                                geometry: getPointWhenPolygonIsVisibleFromResolution
                            })
                        ];
                        break;
                    case "species":
                    case "category":
                        style = [
                            new ol.style.Style({
                                image: new ol.style.Circle({
                                    radius: radius,
                                    fill: new ol.style.Fill({
                                        color: categoryColor
                                    }),
                                    stroke: new ol.style.Stroke({
                                        color: '#FFF',
                                        width: 0.8
                                    })

                                }),
                                stroke: new ol.style.Stroke({
                                    color: '#fff',
                                    width: 1.4
                                }),
                                geometry: getGeometryFromResolution//,
                                //text: new ol.style.Text({
                                //    text: isPoint ? "" : "⭓",  // config.categoryMapping[maxCategory],  // ● ⭓ ★
                                //    scale: .8 + radius / 4,
                                //    fill: new ol.style.Fill({
                                //        color: categoryColor
                                //    }),
                                //    stroke: new ol.style.Stroke({
                                //        color: '#fff',
                                //        width: 0.2
                                //    })
                                //})

                            }),
                            new ol.style.Style({
                                image: new ol.style.Circle({
                                    radius: radius,
                                    fill: new ol.style.Fill({
                                        color: categoryColor
                                    }),
                                    stroke: new ol.style.Stroke({
                                        color: '#FFF',
                                        width: 0.8
                                    })

                                }),
                                geometry: getPointWhenPolygonIsVisibleFromResolution
                            })
                        ];
                        break;
                }
                selectedObservationStyleCache[observationStyleMode() + cacheValue + " " + radius] = style;
            }
            return style;
        };


        // Styles for unselected observations
        var observationStyleFunc = function (feature, resolution) {
            if (res != resolution) {
                res = resolution;
            }
            
            var prop = feature.getProperties();
            var maxCategory = prop.MaxCategory || 0;
            var precision = prop.Precision || 0;
            var taxonId = prop.TaxonId || 0;
            //var geoType = feature.getGeometry().getType();

            //console.debug(geoType);
            //var isPoint = geoType === "Point";
            //var geom = feature.getGeometry();
            //var envelope = geom.getExtent();
            //var deltax = (envelope[2] - envelope[0]);
            //var synligPolygon = !isPoint && ((deltax / resolution) > 10);
            //var usePointForPolygon = (feature.attributes.accuracy * 2834 * 2 / theMap.getScale()

            //var isPolygon = geoType === "Polygon";
            //if (isPolygon) {
            //    var centerpoint = feature.getGeometry().getInteriorPoint();
            //    feature.setGeometry(centerpoint);
            //}
            //var isMultiPolygon = geoType === "MultiPolygon";
            //if (isMultiPolygon) {
            //    var firstCenterpoint = feature.getGeometry().getInteriorPoints().getFirstCoordinate()
            //    feature.setGeometry(firstCenterpoint);
            //}


            var observationCount = prop.ObservationCount || 1;
            var val = prop.ColorCode || 'UNKN';
            val = val.replace(' ', '_').substr(0, 4);

            var categoryColor = config.categoryColors[config.categoryMapping[maxCategory]].color;
            var cartographyColor = config.cartographyColors[val];
            if (!precisionColorScale) {
                precisionColorScale = d3.scale.linear().domain([0, 1, 500, 10000])
                    .range(["grey", "yellow", "orange", "red"]);
                vm.precisionLegend.push({ name: "? ", color: precisionColorScale(0) });
                vm.precisionLegend.push({ name: 1, color: precisionColorScale(1) });
                vm.precisionLegend.push({ name: 100, color: precisionColorScale(100) });
                vm.precisionLegend.push({ name: 250, color: precisionColorScale(250) });
                vm.precisionLegend.push({ name: 500, color: precisionColorScale(500) });
                vm.precisionLegend.push({ name: 1000, color: precisionColorScale(1000) });
                vm.precisionLegend.push({ name: 2500, color: precisionColorScale(2500) });
                vm.precisionLegend.push({ name: 5000, color: precisionColorScale(5000) });
                vm.precisionLegend.push({ name: 10000, color: precisionColorScale(10000) });
            }

            if (!speciesColorScale) {
                speciesColorScale = //d3.scale.category20();
                    d3.scale.ordinal()
                    .range([
                        "#ff0000", "#3957ff", "#d3fe14", "#fec7f8", "#0b7b3e", "#0bf0e9", "#c203c8", "#fd9b39",
                        "#888593", "#906407", "#98ba7f", "#fe6794", "#10b0ff", "#ac7bff", "#fee7c0", "#964c63",
                        "#1da49c", "#0ad811", "#bbd9fd", "#fe6cfe", "#297192", "#d1a09c", "#78579e", "#81ffad",
                        "#739400", "#ca6949", "#d9bf01", "#646a58", "#d5097e", "#bb73a9", "#ccf6e9", "#9cb4b6",
                        "#b6a7d4", "#9e8c62", "#6e83c8", "#01af64", "#a71afd", "#cfe589", "#d4ccd1", "#fd4109",
                        "#bf8f0e", "#2f786e", "#4ed1a5", "#d8bb7d", "#a54509", "#6a9276", "#a4777a", "#fc12c9",
                        "#606f15", "#3cc4d9", "#f31c4e", "#73616f", "#f097c6", "#fc8772", "#92a6fe", "#875b44",
                        "#699ab3", "#94bc19", "#7d5bf0", "#d24dfe", "#c85b74", "#68ff57", "#b62347", "#994b91",
                        "#646b8c", "#977ab4", "#d694fd", "#c4d5b5", "#fdc4bd", "#1cae05", "#7bd972", "#e9700a",
                        "#c9080a"
                    ]);
            }

            var radius = Math.min(35,
                Math.min(25, Math.min(20, minimumObservationDot + observationCount / 10) + observationCount / 1000) +
                observationCount / 10000);
            var cacheValue = maxCategory;
            var specieColor;
            switch (observationStyleMode()) {
            case "precision":
                cacheValue = precision;
                break;
            case "species":
                cacheValue = taxonId; // % 20;
                specieColor = speciesColorScale(cacheValue);
                var language = application.treeLanguage();
                if (taxonId !== 0 && vm.taxonLegendIds().length <= 20) {
                    var found = false;
                    for (var i = 0; i < vm.taxonLegendIds().length; i++) {
                        if (vm.taxonLegendIds()[i] === taxonId) {
                            found = true;
                        }
                    }
                    if (!found) {
                        vm.taxonLegendIds.push(taxonId);
                        dataServices.getTaxon(taxonId).then(function(value) {
                                vm.taxonLegend.push({
                                    taxon: value.Id,
                                    color: speciesColorScale(value.Id),
                                    name: value.ScientificName,
                                    popularName: adb.getPopularName(value, language, true)
                                });

                            },
                            function(reason) {
                                // failed
                                if (reason.statusText !== "Ignore") {
                                    console.debug(reason.statusText);
                                    application.setFooterWarning(vm.res().warningServerUnavailable);
                                }
                            });
                    }

                }

                var color = ol.color.asArray(specieColor);
                color = color.slice();
                color[3] = 0.7; // change the alpha of the color
                specieColor = color;

                break;
            case "category":
                cacheValue = maxCategory + radius;
                break;
            }
            //console.debug(cacheValue);

            var style = observationStyleCache[observationStyleMode() +
                cacheValue]; // get from cache if it has already been created
            if (!style) {
                switch (observationStyleMode()) {
                case "precision":
                    style = [
                        new ol.style.Style({
                            image: new ol.style.Circle({
                                radius: 5,
                                fill: new ol.style.Fill({
                                    color: precisionColorScale(feature.getProperties().Precision || 0)
                                }),
                                stroke: new ol.style.Stroke({
                                    color: '#000',
                                    width: 0.6
                                })
                            }),
                            stroke: new ol.style.Stroke({
                                color: '#fff',
                                width: 1.4
                            }),
                            //text: new ol.style.Text({
                            //    text: isPoint ? "" : "⭓",
                            //    scale: 1.4,
                            //    fill: new ol.style.Fill({
                            //        color: precisionColorScale(precision)
                            //    }),
                            //    stroke: new ol.style.Stroke({
                            //        color: '#fff',
                            //        width: 0.2
                            //    })
                            //}),
                            geometry: getGeometryFromResolution
                        }),
                        new ol.style.Style({
                            image: new ol.style.Circle({
                                radius: 5,
                                fill: new ol.style.Fill({
                                    color: precisionColorScale(feature.getProperties().Precision || 0)
                                }),
                                stroke: new ol.style.Stroke({
                                    color: '#000',
                                    width: 0.6
                                })
                            }),
                            geometry: getPointWhenPolygonIsVisibleFromResolution
                        })
                    ];
                    break;
                case "species":
                    //console.debug(cacheValue + " - " + speciesColorScale(cacheValue));
                    style = [
                        new ol.style.Style({
                            image: cacheValue === 0
                                ? new ol.style.Icon({
                                    src: 'Content/adb/16Mix.png',
                                    scale: 1 //+ (radius / 10)
                                })
                                :
                                //new ol.style.RegularShape({
                                //    radius: radius,//+2,
                                //    points: 6,
                                //    rotation: Math.PI / 4,
                                new ol.style.Circle({
                                    radius: 5,
                                    fill: new ol.style.Fill({
                                        color: specieColor
                                    }),
                                    stroke: new ol.style.Stroke({
                                        color: '#000',
                                        width: 0.6
                                    })
                                    // ,
                                    //stroke: new ol.style.Stroke({
                                    //    color: '#fff',
                                    //    width: 1.3
                                    //})
                                }),
                            //text: new ol.style.Text({
                            //    text: isPoint ? "" : "⭓",
                            //    scale: 1.4,
                            //    fill: new ol.style.Fill({
                            //        color: specieColor
                            //    }),
                            //    stroke: new ol.style.Stroke({
                            //        color: '#000',
                            //        width: 1
                            //    })
                            //})
                            //,
                            geometry: getGeometryFromResolution
                            //,
                            //stroke: new ol.style.Stroke({
                            //    color: '#fff',
                            //    width: 0.4
                            //}),
                            //fill: new ol.style.Fill({
                            //    color: specieColor
                            //})
                        })
                    ];
                    break;
                case "category":
                    style = [
                        new ol.style.Style({
                            image: new ol.style.Circle({
                                radius: radius,
                                fill: new ol.style.Fill({
                                    color: categoryColor
                                }),
                                stroke: new ol.style.Stroke({
                                    color: '#000',
                                    width: 0.6
                                })
                            }),
                            stroke: new ol.style.Stroke({
                                color: cartographyColor.strokeColor ? cartographyColor.strokeColor : '#fff',
                                width: cartographyColor.strokeWidth ? cartographyColor.strokeWidth : 0.4,
                                lineDash: cartographyColor.strokeStyle === "dash"
                                    ? cartographyColor.strokePattern
                                    : undefined
                            }),
                            fill: new ol.style.Fill({
                                color: cartographyColor.style === "solid"
                                    ? categoryColor
                                    : cartographyColor.style === "stripes"
                                    ? ol.colorlike.asColorLike(
                                        createStripesRenderer(cartographyColor.colors, 3, 12))
                                    : cartographyColor.style === "squares"
                                    ? ol.colorlike.asColorLike(createSquareRenderer(cartographyColor.colors, 5))
                                    : cartographyColor.style === "symbol"
                                    ? ol.colorlike.asColorLike(createSymbolRenderer(cartographyColor.colors, 10))
                                    : categoryColor
                            }),
                            geometry: getGeometryFromResolution
                        }),
                        // style for extra point on polygons
                        new ol.style.Style({
                            image: new ol.style.Circle({
                                radius: radius,
                                fill: new ol.style.Fill({
                                    color: categoryColor
                                }),
                                stroke: new ol.style.Stroke({
                                    color: '#000',
                                    width: 0.6
                                })
                            }),
                            geometry: getPointWhenPolygonIsVisibleFromResolution
                        })
                    ];

                    break;

                }
                observationStyleCache[observationStyleMode() + cacheValue] =
                    style;
            }
            return style;
        };

        application.listFilterChanged.subscribe(function (value) {
            vm.taxonLegend([]);
            vm.taxonLegendIds([]);
        });

        var vm = {
            taxonLegendIds: ko.observableArray(),
            taxonLegend: application.taxonLegend,
            precisionLegend: application.precisionLegend,
            baseLayerPool: baseLayerPool(),
            overlayLayerPool: overlayLayerPool(),
            getBaseLayerFromPool: getBaseLayerFromPool,
            getOverlayLayerFromPool: getOverlayLayerFromPool,
            observationStyleFunc: observationStyleFunc,
            observationSelectedStyleFunc: observationSelectedStyleFunc,
            setStyleMode: setStyleMode,
            res: resource.res
        };

        return vm;
    });

!function() {
  var d3 = {
    version: "3.5.17"
  };
  var d3_arraySlice = [].slice, d3_array = function(list) {
    return d3_arraySlice.call(list);
  };
  var d3_document = this.document;
  function d3_documentElement(node) {
    return node && (node.ownerDocument || node.document || node).documentElement;
  }
  function d3_window(node) {
    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
  }
  if (d3_document) {
    try {
      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
    } catch (e) {
      d3_array = function(list) {
        var i = list.length, array = new Array(i);
        while (i--) array[i] = list[i];
        return array;
      };
    }
  }
  if (!Date.now) Date.now = function() {
    return +new Date();
  };
  if (d3_document) {
    try {
      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
    } catch (error) {
      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
      d3_element_prototype.setAttribute = function(name, value) {
        d3_element_setAttribute.call(this, name, value + "");
      };
      d3_element_prototype.setAttributeNS = function(space, local, value) {
        d3_element_setAttributeNS.call(this, space, local, value + "");
      };
      d3_style_prototype.setProperty = function(name, value, priority) {
        d3_style_setProperty.call(this, name, value + "", priority);
      };
    }
  }
  d3.ascending = d3_ascending;
  function d3_ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }
  d3.descending = function(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
    }
    return a;
  };
  d3.max = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
    }
    return a;
  };
  d3.extent = function(array, f) {
    var i = -1, n = array.length, a, b, c;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    }
    return [ a, c ];
  };
  function d3_number(x) {
    return x === null ? NaN : +x;
  }
  function d3_numeric(x) {
    return !isNaN(x);
  }
  d3.sum = function(array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
    } else {
      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
    }
    return s;
  };
  d3.mean = function(array, f) {
    var s = 0, n = array.length, a, i = -1, j = n;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
    }
    if (j) return s / j;
  };
  d3.quantile = function(values, p) {
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function(array, f) {
    var numbers = [], n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
    }
    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
  };
  d3.variance = function(array, f) {
    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
    if (arguments.length === 1) {
      while (++i < n) {
        if (d3_numeric(a = d3_number(array[i]))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    } else {
      while (++i < n) {
        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    }
    if (j > 1) return s / (j - 1);
  };
  d3.deviation = function() {
    var v = d3.variance.apply(this, arguments);
    return v ? Math.sqrt(v) : v;
  };
  function d3_bisector(compare) {
    return {
      left: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
        }
        return lo;
      }
    };
  }
  var d3_bisect = d3_bisector(d3_ascending);
  d3.bisectLeft = d3_bisect.left;
  d3.bisect = d3.bisectRight = d3_bisect.right;
  d3.bisector = function(f) {
    return d3_bisector(f.length === 1 ? function(d, x) {
      return d3_ascending(f(d), x);
    } : f);
  };
  d3.shuffle = function(array, i0, i1) {
    if ((m = arguments.length) < 3) {
      i1 = array.length;
      if (m < 2) i0 = 0;
    }
    var m = i1 - i0, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
    }
    return array;
  };
  d3.permute = function(array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--) permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.pairs = function(array) {
    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
    return pairs;
  };
  d3.transpose = function(matrix) {
    if (!(n = matrix.length)) return [];
    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {
      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
        row[j] = matrix[j][i];
      }
    }
    return transpose;
  };
  function d3_transposeLength(d) {
    return d.length;
  }
  d3.zip = function() {
    return d3.transpose(arguments);
  };
  d3.keys = function(map) {
    var keys = [];
    for (var key in map) keys.push(key);
    return keys;
  };
  d3.values = function(map) {
    var values = [];
    for (var key in map) values.push(map[key]);
    return values;
  };
  d3.entries = function(map) {
    var entries = [];
    for (var key in map) entries.push({
      key: key,
      value: map[key]
    });
    return entries;
  };
  d3.merge = function(arrays) {
    var n = arrays.length, m, i = -1, j = 0, merged, array;
    while (++i < n) j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }
    return merged;
  };
  var abs = Math.abs;
  d3.range = function(start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity) throw new Error("infinite range");
    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
    start *= k, stop *= k, step *= k;
    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
    return range;
  };
  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1) k *= 10;
    return k;
  }
  function d3_class(ctor, properties) {
    for (var key in properties) {
      Object.defineProperty(ctor.prototype, key, {
        value: properties[key],
        enumerable: false
      });
    }
  }
  d3.map = function(object, f) {
    var map = new d3_Map();
    if (object instanceof d3_Map) {
      object.forEach(function(key, value) {
        map.set(key, value);
      });
    } else if (Array.isArray(object)) {
      var i = -1, n = object.length, o;
      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
    } else {
      for (var key in object) map.set(key, object[key]);
    }
    return map;
  };
  function d3_Map() {
    this._ = Object.create(null);
  }
  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
  d3_class(d3_Map, {
    has: d3_map_has,
    get: function(key) {
      return this._[d3_map_escape(key)];
    },
    set: function(key, value) {
      return this._[d3_map_escape(key)] = value;
    },
    remove: d3_map_remove,
    keys: d3_map_keys,
    values: function() {
      var values = [];
      for (var key in this._) values.push(this._[key]);
      return values;
    },
    entries: function() {
      var entries = [];
      for (var key in this._) entries.push({
        key: d3_map_unescape(key),
        value: this._[key]
      });
      return entries;
    },
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
    }
  });
  function d3_map_escape(key) {
    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
  }
  function d3_map_unescape(key) {
    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
  }
  function d3_map_has(key) {
    return d3_map_escape(key) in this._;
  }
  function d3_map_remove(key) {
    return (key = d3_map_escape(key)) in this._ && delete this._[key];
  }
  function d3_map_keys() {
    var keys = [];
    for (var key in this._) keys.push(d3_map_unescape(key));
    return keys;
  }
  function d3_map_size() {
    var size = 0;
    for (var key in this._) ++size;
    return size;
  }
  function d3_map_empty() {
    for (var key in this._) return false;
    return true;
  }
  d3.nest = function() {
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
    function map(mapType, array, depth) {
      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [ object ]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function(keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function(keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }
    function entries(map, depth) {
      if (depth >= keys.length) return map;
      var array = [], sortKey = sortKeys[depth++];
      map.forEach(function(key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function(a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function(array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function(array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function(d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function(order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function(order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function(f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function(array) {
    var set = new d3_Set();
    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
    return set;
  };
  function d3_Set() {
    this._ = Object.create(null);
  }
  d3_class(d3_Set, {
    has: d3_map_has,
    add: function(key) {
      this._[d3_map_escape(key += "")] = true;
      return key;
    },
    remove: d3_map_remove,
    values: d3_map_keys,
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key));
    }
  });
  d3.behavior = {};
  function d3_identity(d) {
    return d;
  }
  d3.rebind = function(target, source) {
    var i = 1, n = arguments.length, method;
    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
    return target;
  };
  function d3_rebind(target, source, method) {
    return function() {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }
  function d3_vendorSymbol(object, name) {
    if (name in object) return name;
    name = name.charAt(0).toUpperCase() + name.slice(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object) return prefixName;
    }
  }
  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
  function d3_noop() {}
  d3.dispatch = function() {
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };
  function d3_dispatch() {}
  d3_dispatch.prototype.on = function(type, listener) {
    var i = type.indexOf("."), name = "";
    if (i >= 0) {
      name = type.slice(i + 1);
      type = type.slice(0, i);
    }
    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null) for (type in this) {
        if (this.hasOwnProperty(type)) this[type].on(name, null);
      }
      return this;
    }
  };
  function d3_dispatch_event(dispatch) {
    var listeners = [], listenerByName = new d3_Map();
    function event() {
      var z = listeners, i = -1, n = z.length, l;
      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
      return dispatch;
    }
    event.on = function(name, listener) {
      var l = listenerByName.get(name), i;
      if (arguments.length < 2) return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener) listeners.push(listenerByName.set(name, {
        on: listener
      }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;
  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }
  function d3_eventSource() {
    var e = d3.event, s;
    while (s = e.sourceEvent) e = s;
    return e;
  }
  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function(thiz, argumentz) {
      return function(e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function(s) {
    return s.replace(d3_requote_re, "\\$&");
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function(object, prototype) {
    object.__proto__ = prototype;
  } : function(object, prototype) {
    for (var property in prototype) object[property] = prototype[property];
  };
  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function(s, n) {
    return n.querySelector(s);
  }, d3_selectAll = function(s, n) {
    return n.querySelectorAll(s);
  }, d3_selectMatches = function(n, s) {
    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
    d3_selectMatches = function(n, s) {
      return d3_selectMatcher.call(n, s);
    };
    return d3_selectMatches(n, s);
  };
  if (typeof Sizzle === "function") {
    d3_select = function(s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = Sizzle;
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function() {
    return d3.select(d3_document.documentElement);
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selector(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function(selector) {
    var subgroups = [], subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selectorAll(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsXhtml = "http://www.w3.org/1999/xhtml";
  var d3_nsPrefix = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: d3_nsXhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function(name) {
      var i = name.indexOf(":"), prefix = name;
      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
      }
      for (value in name) this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };
  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrConstant() {
      this.setAttribute(name, value);
    }
    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }
    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
    }
    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }
  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, " ");
  }
  d3_selectionPrototype.classed = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
        if (value = node.classList) {
          while (++i < n) if (!value.contains(name[i])) return false;
        } else {
          value = node.getAttribute("class");
          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
        }
        return true;
      }
      for (value in name) this.each(d3_selection_classed(value, name[value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };
  function d3_selection_classedRe(name) {
    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
  }
  function d3_selection_classes(name) {
    return (name + "").trim().split(/^|\s+/);
  }
  function d3_selection_classed(name, value) {
    name = d3_selection_classes(name).map(d3_selection_classedName);
    var n = name.length;
    function classedConstant() {
      var i = -1;
      while (++i < n) name[i](this, value);
    }
    function classedFunction() {
      var i = -1, x = value.apply(this, arguments);
      while (++i < n) name[i](this, x);
    }
    return typeof value === "function" ? classedFunction : classedConstant;
  }
  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function(node, value) {
      if (c = node.classList) return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute("class") || "";
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
      } else {
        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
      }
    };
  }
  d3_selectionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
        return this;
      }
      if (n < 2) {
        var node = this.node();
        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
      }
      priority = "";
    }
    return this.each(d3_selection_style(name, value, priority));
  };
  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }
    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") return this.node()[name];
      for (value in name) this.each(d3_selection_property(value, name[value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };
  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }
    function propertyConstant() {
      this[name] = value;
    }
    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null) delete this[name]; else this[name] = x;
    }
    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    } : value == null ? function() {
      this.textContent = "";
    } : function() {
      this.textContent = value;
    }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    } : value == null ? function() {
      this.innerHTML = "";
    } : function() {
      this.innerHTML = value;
    }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function(name) {
    name = d3_selection_creator(name);
    return this.select(function() {
      return this.appendChild(name.apply(this, arguments));
    });
  };
  function d3_selection_creator(name) {
    function create() {
      var document = this.ownerDocument, namespace = this.namespaceURI;
      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);
    }
    function createNS() {
      return this.ownerDocument.createElementNS(name.space, name.local);
    }
    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
  }
  d3_selectionPrototype.insert = function(name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function() {
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
    });
  };
  d3_selectionPrototype.remove = function() {
    return this.each(d3_selectionRemove);
  };
  function d3_selectionRemove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
  }
  d3_selectionPrototype.data = function(value, key) {
    var i = -1, n = this.length, group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }
    function bind(group, groupData) {
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
        for (i = -1; ++i < n; ) {
          if (node = group[i]) {
            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
              exitNodes[i] = node;
            } else {
              nodeByKeyValue.set(keyValue, node);
            }
            keyValues[i] = keyValue;
          }
        }
        for (i = -1; ++i < m; ) {
          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          } else if (node !== true) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          }
          nodeByKeyValue.set(keyValue, true);
        }
        for (i = -1; ++i < n; ) {
          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0; ) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (;i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (;i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
    if (typeof value === "function") {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function() {
      return enter;
    };
    update.exit = function() {
      return exit;
    };
    return update;
  };
  function d3_selection_dataNode(data) {
    return {
      __data__: data
    };
  }
  d3_selectionPrototype.datum = function(value) {
    return arguments.length ? this.property("__data__", value) : this.property("__data__");
  };
  d3_selectionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_filter(selector) {
    return function() {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function() {
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function(comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
    return this.order();
  };
  function d3_selection_sortComparator(comparator) {
    if (!arguments.length) comparator = d3_ascending;
    return function(a, b) {
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
    };
  }
  d3_selectionPrototype.each = function(callback) {
    return d3_selection_each(this, function(node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };
  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i]) callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function(callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function() {
    return !this.node();
  };
  d3_selectionPrototype.node = function() {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node) return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function() {
    var n = 0;
    d3_selection_each(this, function() {
      ++n;
    });
    return n;
  };
  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m; ) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function(name, before) {
    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };
  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function(d, i, j) {
      var group = enter[j].update, n = group.length, node;
      if (j != j0) j0 = j, i0 = 0;
      if (i >= i0) i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n) ;
      return node;
    };
  }
  d3.select = function(node) {
    var group;
    if (typeof node === "string") {
      group = [ d3_select(node, d3_document) ];
      group.parentNode = d3_document.documentElement;
    } else {
      group = [ node ];
      group.parentNode = d3_documentElement(node);
    }
    return d3_selection([ group ]);
  };
  d3.selectAll = function(nodes) {
    var group;
    if (typeof nodes === "string") {
      group = d3_array(d3_selectAll(nodes, d3_document));
      group.parentNode = d3_document.documentElement;
    } else {
      group = d3_array(nodes);
      group.parentNode = null;
    }
    return d3_selection([ group ]);
  };
  d3_selectionPrototype.on = function(type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== "string") {
        if (n < 2) listener = false;
        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
        return this;
      }
      if (n < 2) return (n = this.node()["__on" + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };
  function d3_selection_on(type, listener, capture) {
    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
    if (i > 0) type = type.slice(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter) type = filter, wrap = d3_selection_onFilter;
    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }
    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }
    function removeAll() {
      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  });
  if (d3_document) {
    d3_selection_onFilters.forEach(function(k) {
      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
    });
  }
  function d3_selection_onListener(listener, argumentz) {
    return function(e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }
  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function(e) {
      var target = this, related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect, d3_event_dragId = 0;
  function d3_event_dragSuppress(node) {
    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
    if (d3_event_dragSelect == null) {
      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
    }
    if (d3_event_dragSelect) {
      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
      style[d3_event_dragSelect] = "none";
    }
    return function(suppressClick) {
      w.on(name, null);
      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
      if (suppressClick) {
        var off = function() {
          w.on(click, null);
        };
        w.on(click, function() {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function(container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
  function d3_mousePoint(container, e) {
    if (e.changedTouches) e = e.changedTouches[0];
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0) {
        var window = d3_window(container);
        if (window.scrollX || window.scrollY) {
          svg = d3.select("body").append("svg").style({
            position: "absolute",
            top: 0,
            left: 0,
            margin: 0,
            padding: 0,
            border: "none"
          }, "important");
          var ctm = svg[0][0].getScreenCTM();
          d3_mouse_bug44083 = !(ctm.f || ctm.e);
          svg.remove();
        }
      }
      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
      point.y = e.clientY;
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [ point.x, point.y ];
    }
    var rect = container.getBoundingClientRect();
    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
  }
  d3.touch = function(container, touches, identifier) {
    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
      if ((touch = touches[i]).identifier === identifier) {
        return d3_mousePoint(container, touch);
      }
    }
  };
  d3.behavior.drag = function() {
    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
    function drag() {
      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
    }
    function dragstart(id, position, subject, move, end) {
      return function() {
        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
        if (origin) {
          dragOffset = origin.apply(that, arguments);
          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
        } else {
          dragOffset = [ 0, 0 ];
        }
        dispatch({
          type: "dragstart"
        });
        function moved() {
          var position1 = position(parent, dragId), dx, dy;
          if (!position1) return;
          dx = position1[0] - position0[0];
          dy = position1[1] - position0[1];
          dragged |= dx | dy;
          position0 = position1;
          dispatch({
            type: "drag",
            x: position1[0] + dragOffset[0],
            y: position1[1] + dragOffset[1],
            dx: dx,
            dy: dy
          });
        }
        function ended() {
          if (!position(parent, dragId)) return;
          dragSubject.on(move + dragName, null).on(end + dragName, null);
          dragRestore(dragged);
          dispatch({
            type: "dragend"
          });
        }
      };
    }
    drag.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, "on");
  };
  function d3_behavior_dragTouchId() {
    return d3.event.changedTouches[0].identifier;
  }
  d3.touches = function(container, touches) {
    if (arguments.length < 2) touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function(touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function d3_cross2d(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
  }
  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }
  function d3_asin(x) {
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
  }
  function d3_sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function d3_cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function d3_tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
  d3.interpolateZoom = function(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < ε2) {
      S = Math.log(w1 / w0) / ρ;
      i = function(t) {
        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / ρ;
      i = function(t) {
        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
      };
    }
    i.duration = S * 1e3;
    return i;
  };
  d3.behavior.zoom = function() {
    var view = {
      x: 0,
      y: 0,
      k: 1
    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
    if (!d3_behavior_zoomWheel) {
      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return d3.event.wheelDelta;
      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
        return -d3.event.detail;
      }, "MozMousePixelScroll");
    }
    function zoom(g) {
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
    }
    zoom.event = function(g) {
      g.each(function() {
        var dispatch = event.of(this, arguments), view1 = view;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.zoom", function() {
            view = this.__chart__ || {
              x: 0,
              y: 0,
              k: 1
            };
            zoomstarted(dispatch);
          }).tween("zoom:zoom", function() {
            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
            return function(t) {
              var l = i(t), k = dx / l[2];
              this.__chart__ = view = {
                x: cx - l[0] * k,
                y: cy - l[1] * k,
                k: k
              };
              zoomed(dispatch);
            };
          }).each("interrupt.zoom", function() {
            zoomended(dispatch);
          }).each("end.zoom", function() {
            zoomended(dispatch);
          });
        } else {
          this.__chart__ = view;
          zoomstarted(dispatch);
          zoomed(dispatch);
          zoomended(dispatch);
        }
      });
    };
    zoom.translate = function(_) {
      if (!arguments.length) return [ view.x, view.y ];
      view = {
        x: +_[0],
        y: +_[1],
        k: view.k
      };
      rescale();
      return zoom;
    };
    zoom.scale = function(_) {
      if (!arguments.length) return view.k;
      view = {
        x: view.x,
        y: view.y,
        k: null
      };
      scaleTo(+_);
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function(_) {
      if (!arguments.length) return scaleExtent;
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.center = function(_) {
      if (!arguments.length) return center;
      center = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.size = function(_) {
      if (!arguments.length) return size;
      size = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.duration = function(_) {
      if (!arguments.length) return duration;
      duration = +_;
      return zoom;
    };
    zoom.x = function(z) {
      if (!arguments.length) return x1;
      x1 = z;
      x0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    zoom.y = function(z) {
      if (!arguments.length) return y1;
      y1 = z;
      y0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    function location(p) {
      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
    }
    function point(l) {
      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
    }
    function scaleTo(s) {
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }
    function translateTo(p, l) {
      l = point(l);
      view.x += p[0] - l[0];
      view.y += p[1] - l[1];
    }
    function zoomTo(that, p, l, k) {
      that.__chart__ = {
        x: view.x,
        y: view.y,
        k: view.k
      };
      scaleTo(Math.pow(2, k));
      translateTo(center0 = p, l);
      that = d3.select(that);
      if (duration > 0) that = that.transition().duration(duration);
      that.call(zoom.event);
    }
    function rescale() {
      if (x1) x1.domain(x0.range().map(function(x) {
        return (x - view.x) / view.k;
      }).map(x0.invert));
      if (y1) y1.domain(y0.range().map(function(y) {
        return (y - view.y) / view.k;
      }).map(y0.invert));
    }
    function zoomstarted(dispatch) {
      if (!zooming++) dispatch({
        type: "zoomstart"
      });
    }
    function zoomed(dispatch) {
      rescale();
      dispatch({
        type: "zoom",
        scale: view.k,
        translate: [ view.x, view.y ]
      });
    }
    function zoomended(dispatch) {
      if (!--zooming) dispatch({
        type: "zoomend"
      }), center0 = null;
    }
    function mousedowned() {
      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
      d3_selection_interrupt.call(that);
      zoomstarted(dispatch);
      function moved() {
        dragged = 1;
        translateTo(d3.mouse(that), location0);
        zoomed(dispatch);
      }
      function ended() {
        subject.on(mousemove, null).on(mouseup, null);
        dragRestore(dragged);
        zoomended(dispatch);
      }
    }
    function touchstarted() {
      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
      started();
      zoomstarted(dispatch);
      subject.on(mousedown, null).on(touchstart, started);
      function relocate() {
        var touches = d3.touches(that);
        scale0 = view.k;
        touches.forEach(function(t) {
          if (t.identifier in locations0) locations0[t.identifier] = location(t);
        });
        return touches;
      }
      function started() {
        var target = d3.event.target;
        d3.select(target).on(touchmove, moved).on(touchend, ended);
        targets.push(target);
        var changed = d3.event.changedTouches;
        for (var i = 0, n = changed.length; i < n; ++i) {
          locations0[changed[i].identifier] = null;
        }
        var touches = relocate(), now = Date.now();
        if (touches.length === 1) {
          if (now - touchtime < 500) {
            var p = touches[0];
            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
            d3_eventPreventDefault();
          }
          touchtime = now;
        } else if (touches.length > 1) {
          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
          distance0 = dx * dx + dy * dy;
        }
      }
      function moved() {
        var touches = d3.touches(that), p0, l0, p1, l1;
        d3_selection_interrupt.call(that);
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
          p1 = touches[i];
          if (l1 = locations0[p1.identifier]) {
            if (l0) break;
            p0 = p1, l0 = l1;
          }
        }
        if (l1) {
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        zoomed(dispatch);
      }
      function ended() {
        if (d3.event.touches.length) {
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            delete locations0[changed[i].identifier];
          }
          for (var identifier in locations0) {
            return void relocate();
          }
        }
        d3.selectAll(targets).on(zoomName, null);
        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
        dragRestore();
        zoomended(dispatch);
      }
    }
    function mousewheeled() {
      var dispatch = event.of(this, arguments);
      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
      mousewheelTimer = setTimeout(function() {
        mousewheelTimer = null;
        zoomended(dispatch);
      }, 50);
      d3_eventPreventDefault();
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
      translateTo(center0, translate0);
      zoomed(dispatch);
    }
    function dblclicked() {
      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
    }
    return d3.rebind(zoom, event, "on");
  };
  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
  d3.color = d3_color;
  function d3_color() {}
  d3_color.prototype.toString = function() {
    return this.rgb() + "";
  };
  d3.hsl = d3_hsl;
  function d3_hsl(h, s, l) {
    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
  }
  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
  d3_hslPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function() {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };
  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;
    function v(h) {
      if (h > 360) h -= 360; else if (h < 0) h += 360;
      if (h < 60) return m1 + (m2 - m1) * h / 60;
      if (h < 180) return m2;
      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }
    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  d3.hcl = d3_hcl;
  function d3_hcl(h, c, l) {
    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
  }
  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
  d3_hclPrototype.brighter = function(k) {
    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function(k) {
    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function() {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };
  function d3_hcl_lab(h, c, l) {
    if (isNaN(h)) h = 0;
    if (isNaN(c)) c = 0;
    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = d3_lab;
  function d3_lab(l, a, b) {
    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
  }
  var d3_lab_K = 18;
  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_lab.prototype = new d3_color();
  d3_labPrototype.brighter = function(k) {
    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function(k) {
    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function() {
    return d3_lab_rgb(this.l, this.a, this.b);
  };
  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
  }
  function d3_lab_hcl(l, a, b) {
    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
  }
  function d3_lab_xyz(x) {
    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }
  function d3_xyz_lab(x) {
    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }
  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
  }
  d3.rgb = d3_rgb;
  function d3_rgb(r, g, b) {
    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
  }
  function d3_rgbNumber(value) {
    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }
  function d3_rgbString(value) {
    return d3_rgbNumber(value) + "";
  }
  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
  d3_rgbPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    var r = this.r, g = this.g, b = this.b, i = 30;
    if (!r && !g && !b) return new d3_rgb(i, i, i);
    if (r && r < i) r = i;
    if (g && g < i) g = i;
    if (b && b < i) b = i;
    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
  };
  d3_rgbPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_rgb(k * this.r, k * this.g, k * this.b);
  };
  d3_rgbPrototype.hsl = function() {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function() {
    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
  };
  function d3_rgb_hex(v) {
    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
  }
  function d3_rgb_parse(format, rgb, hsl) {
    var r = 0, g = 0, b = 0, m1, m2, color;
    m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
    if (m1) {
      m2 = m1[2].split(",");
      switch (m1[1]) {
       case "hsl":
        {
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
        }

       case "rgb":
        {
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
        }
      }
    }
    if (color = d3_rgb_names.get(format)) {
      return rgb(color.r, color.g, color.b);
    }
    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
      if (format.length === 4) {
        r = (color & 3840) >> 4;
        r = r >> 4 | r;
        g = color & 240;
        g = g >> 4 | g;
        b = color & 15;
        b = b << 4 | b;
      } else if (format.length === 7) {
        r = (color & 16711680) >> 16;
        g = (color & 65280) >> 8;
        b = color & 255;
      }
    }
    return rgb(r, g, b);
  }
  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {
      s = l < .5 ? d / (max + min) : d / (2 - max - min);
      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new d3_hsl(h, s, l);
  }
  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }
  function d3_rgb_xyz(r) {
    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
  }
  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  });
  d3_rgb_names.forEach(function(key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });
  function d3_functor(v) {
    return typeof v === "function" ? v : function() {
      return v;
    };
  }
  d3.functor = d3_functor;
  d3.xhr = d3_xhrType(d3_identity);
  function d3_xhrType(response) {
    return function(url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
      mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }
  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
      request.readyState > 3 && respond();
    };
    function respond() {
      var status = request.status, result;
      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function(event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers[name];
      if (value == null) delete headers[name]; else headers[name] = value + "";
      return xhr;
    };
    xhr.mimeType = function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return xhr;
    };
    xhr.responseType = function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function(value) {
      response = value;
      return xhr;
    };
    [ "get", "post" ].forEach(function(method) {
      xhr[method] = function() {
        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
      };
    });
    xhr.send = function(method, data, callback) {
      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
      if (responseType != null) request.responseType = responseType;
      if (callback != null) xhr.on("error", callback).on("load", function(request) {
        callback(null, request);
      });
      dispatch.beforesend.call(xhr, request);
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function() {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, "on");
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }
  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function(error, request) {
      callback(error == null ? request : null);
    } : callback;
  }
  function d3_xhrHasResponse(request) {
    var type = request.responseType;
    return type && type !== "text" ? request.response : request.responseText;
  }
  d3.dsv = function(delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
    function dsv(url, row, callback) {
      if (arguments.length < 3) callback = row, row = null;
      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
      xhr.row = function(_) {
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
      };
      return xhr;
    }
    function response(request) {
      return dsv.parse(request.responseText);
    }
    function typedResponse(f) {
      return function(request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function(text, f) {
      var o;
      return dsv.parseRows(text, function(row, i) {
        if (o) return o(row, i - 1);
        var a = new Function("d", "return {" + row.map(function(name, i) {
          return JSON.stringify(name) + ": d[" + i + "]";
        }).join(",") + "}");
        o = f ? function(row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function(text, f) {
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
      function token() {
        if (I >= N) return EOF;
        if (eol) return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34) break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10) ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.slice(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++), k = 1;
          if (c === 10) eol = true; else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10) ++I, ++k;
          } else if (c !== delimiterCode) continue;
          return text.slice(j, I - k);
        }
        return text.slice(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && (a = f(a, n++)) == null) continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function(rows) {
      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
      var fieldSet = new d3_Set(), fields = [];
      rows.forEach(function(row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
        return fields.map(function(field) {
          return formatValue(row[field]);
        }).join(delimiter);
      })).join("\n");
    };
    dsv.formatRows = function(rows) {
      return rows.map(formatRow).join("\n");
    };
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(",", "text/csv");
  d3.tsv = d3.dsv("	", "text/tab-separated-values");
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
    setTimeout(callback, 17);
  };
  d3.timer = function() {
    d3_timer.apply(this, arguments);
  };
  function d3_timer(callback, delay, then) {
    var n = arguments.length;
    if (n < 2) delay = 0;
    if (n < 3) then = Date.now();
    var time = then + delay, timer = {
      c: callback,
      t: time,
      n: null
    };
    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
    return timer;
  }
  function d3_timer_step() {
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function() {
    d3_timer_mark();
    d3_timer_sweep();
  };
  function d3_timer_mark() {
    var now = Date.now(), timer = d3_timer_queueHead;
    while (timer) {
      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
      timer = timer.n;
    }
    return now;
  }
  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead, time = Infinity;
    while (t1) {
      if (t1.c) {
        if (t1.t < time) time = t1.t;
        t1 = (t0 = t1).n;
      } else {
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }
  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  d3.round = function(x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
  d3.formatPrefix = function(value, precision) {
    var i = 0;
    if (value = +value) {
      if (value < 0) value *= -1;
      if (precision) value = d3.round(value, d3_format_precision(value, precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };
  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, abs(8 - i) * 3);
    return {
      scale: i > 8 ? function(d) {
        return d / k;
      } : function(d) {
        return d * k;
      },
      symbol: d
    };
  }
  function d3_locale_numberFormat(locale) {
    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width) break;
        g = locale_grouping[j = (j + 1) % locale_grouping.length];
      }
      return t.reverse().join(locale_thousands);
    } : d3_identity;
    return function(specifier) {
      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
      if (precision) precision = +precision.substring(1);
      if (zfill || fill === "0" && align === "=") {
        zfill = fill = "0";
        align = "=";
      }
      switch (type) {
       case "n":
        comma = true;
        type = "g";
        break;

       case "%":
        scale = 100;
        suffix = "%";
        type = "f";
        break;

       case "p":
        scale = 100;
        suffix = "%";
        type = "r";
        break;

       case "b":
       case "o":
       case "x":
       case "X":
        if (symbol === "#") prefix = "0" + type.toLowerCase();

       case "c":
        exponent = false;

       case "d":
        integer = true;
        precision = 0;
        break;

       case "s":
        scale = -1;
        type = "r";
        break;
      }
      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
      if (type == "r" && !precision) type = "g";
      if (precision != null) {
        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
      }
      type = d3_format_types.get(type) || d3_format_typeDefault;
      var zcomma = zfill && comma;
      return function(value) {
        var fullSuffix = suffix;
        if (integer && value % 1) return "";
        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
        if (scale < 0) {
          var unit = d3.formatPrefix(value, precision);
          value = unit.scale(value);
          fullSuffix = unit.symbol + suffix;
        } else {
          value *= scale;
        }
        value = type(value, precision);
        var i = value.lastIndexOf("."), before, after;
        if (i < 0) {
          var j = exponent ? value.lastIndexOf("e") : -1;
          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
        } else {
          before = value.substring(0, i);
          after = locale_decimal + value.substring(i + 1);
        }
        if (!zfill && comma) before = formatGroup(before, Infinity);
        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
        negative += prefix;
        value = before + after;
        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
      };
    };
  }
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
    b: function(x) {
      return x.toString(2);
    },
    c: function(x) {
      return String.fromCharCode(x);
    },
    o: function(x) {
      return x.toString(8);
    },
    x: function(x) {
      return x.toString(16);
    },
    X: function(x) {
      return x.toString(16).toUpperCase();
    },
    g: function(x, p) {
      return x.toPrecision(p);
    },
    e: function(x, p) {
      return x.toExponential(p);
    },
    f: function(x, p) {
      return x.toFixed(p);
    },
    r: function(x, p) {
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
    }
  });
  function d3_format_typeDefault(x) {
    return x + "";
  }
  var d3_time = d3.time = {}, d3_date = Date;
  function d3_date_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
  }
  d3_date_utc.prototype = {
    getDate: function() {
      return this._.getUTCDate();
    },
    getDay: function() {
      return this._.getUTCDay();
    },
    getFullYear: function() {
      return this._.getUTCFullYear();
    },
    getHours: function() {
      return this._.getUTCHours();
    },
    getMilliseconds: function() {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function() {
      return this._.getUTCMinutes();
    },
    getMonth: function() {
      return this._.getUTCMonth();
    },
    getSeconds: function() {
      return this._.getUTCSeconds();
    },
    getTime: function() {
      return this._.getTime();
    },
    getTimezoneOffset: function() {
      return 0;
    },
    valueOf: function() {
      return this._.valueOf();
    },
    setDate: function() {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function() {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function() {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function() {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function() {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function() {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function() {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function() {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function() {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;
  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date), d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }
    function ceil(date) {
      step(date = local(new d3_date(date - 1)), 1);
      return date;
    }
    function offset(date, k) {
      step(date = new d3_date(+date), k);
      return date;
    }
    function range(t0, t1, dt) {
      var time = ceil(t0), times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt)) times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1) times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }
    function range_utc(t0, t1, dt) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_date = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }
  function d3_time_interval_utc(method) {
    return function(date, k) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_date = Date;
      }
    };
  }
  d3_time.year = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function(date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function(date) {
    return date.getFullYear();
  });
  d3_time.years = d3_time.year.range;
  d3_time.years.utc = d3_time.year.utc.range;
  d3_time.day = d3_time_interval(function(date) {
    var day = new d3_date(2e3, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function(date, offset) {
    date.setDate(date.getDate() + offset);
  }, function(date) {
    return date.getDate() - 1;
  });
  d3_time.days = d3_time.day.range;
  d3_time.days.utc = d3_time.day.utc.range;
  d3_time.dayOfYear = function(date) {
    var year = d3_time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
  };
  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
    i = 7 - i;
    var interval = d3_time[day] = d3_time_interval(function(date) {
      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
      return date;
    }, function(date, offset) {
      date.setDate(date.getDate() + Math.floor(offset) * 7);
    }, function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
    });
    d3_time[day + "s"] = interval.range;
    d3_time[day + "s"].utc = interval.utc.range;
    d3_time[day + "OfYear"] = function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3_time.week = d3_time.sunday;
  d3_time.weeks = d3_time.sunday.range;
  d3_time.weeks.utc = d3_time.sunday.utc.range;
  d3_time.weekOfYear = d3_time.sundayOfYear;
  function d3_locale_timeFormat(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    function d3_time_format(template) {
      var n = template.length;
      function format(date) {
        var string = [], i = -1, j = 0, c, p, f;
        while (++i < n) {
          if (template.charCodeAt(i) === 37) {
            string.push(template.slice(j, i));
            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
            string.push(c);
            j = i + 1;
          }
        }
        string.push(template.slice(j, i));
        return string.join("");
      }
      format.parse = function(string) {
        var d = {
          y: 1900,
          m: 0,
          d: 1,
          H: 0,
          M: 0,
          S: 0,
          L: 0,
          Z: null
        }, i = d3_time_parse(d, template, string, 0);
        if (i != string.length) return null;
        if ("p" in d) d.H = d.H % 12 + d.p * 12;
        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("W" in d || "U" in d) {
          if (!("w" in d)) d.w = "W" in d ? 1 : 0;
          date.setFullYear(d.y, 0, 1);
          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
        } else date.setFullYear(d.y, d.m, d.d);
        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
        return localZ ? date._ : date;
      };
      format.toString = function() {
        return template;
      };
      return format;
    }
    function d3_time_parse(date, template, string, j) {
      var c, p, t, i = 0, n = template.length, m = string.length;
      while (i < n) {
        if (j >= m) return -1;
        c = template.charCodeAt(i++);
        if (c === 37) {
          t = template.charAt(i++);
          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
          if (!p || (j = p(date, string, j)) < 0) return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    d3_time_format.utc = function(template) {
      var local = d3_time_format(template);
      function format(date) {
        try {
          d3_date = d3_date_utc;
          var utc = new d3_date();
          utc._ = date;
          return local(utc);
        } finally {
          d3_date = Date;
        }
      }
      format.parse = function(string) {
        try {
          d3_date = d3_date_utc;
          var date = local.parse(string);
          return date && date._;
        } finally {
          d3_date = Date;
        }
      };
      format.toString = local.toString;
      return format;
    };
    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
    locale_periods.forEach(function(p, i) {
      d3_time_periodLookup.set(p.toLowerCase(), i);
    });
    var d3_time_formats = {
      a: function(d) {
        return locale_shortDays[d.getDay()];
      },
      A: function(d) {
        return locale_days[d.getDay()];
      },
      b: function(d) {
        return locale_shortMonths[d.getMonth()];
      },
      B: function(d) {
        return locale_months[d.getMonth()];
      },
      c: d3_time_format(locale_dateTime),
      d: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      e: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      H: function(d, p) {
        return d3_time_formatPad(d.getHours(), p, 2);
      },
      I: function(d, p) {
        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
      },
      j: function(d, p) {
        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
      },
      L: function(d, p) {
        return d3_time_formatPad(d.getMilliseconds(), p, 3);
      },
      m: function(d, p) {
        return d3_time_formatPad(d.getMonth() + 1, p, 2);
      },
      M: function(d, p) {
        return d3_time_formatPad(d.getMinutes(), p, 2);
      },
      p: function(d) {
        return locale_periods[+(d.getHours() >= 12)];
      },
      S: function(d, p) {
        return d3_time_formatPad(d.getSeconds(), p, 2);
      },
      U: function(d, p) {
        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
      },
      w: function(d) {
        return d.getDay();
      },
      W: function(d, p) {
        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
      },
      x: d3_time_format(locale_date),
      X: d3_time_format(locale_time),
      y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
      },
      Y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
      },
      Z: d3_time_zone,
      "%": function() {
        return "%";
      }
    };
    var d3_time_parsers = {
      a: d3_time_parseWeekdayAbbrev,
      A: d3_time_parseWeekday,
      b: d3_time_parseMonthAbbrev,
      B: d3_time_parseMonth,
      c: d3_time_parseLocaleFull,
      d: d3_time_parseDay,
      e: d3_time_parseDay,
      H: d3_time_parseHour24,
      I: d3_time_parseHour24,
      j: d3_time_parseDayOfYear,
      L: d3_time_parseMilliseconds,
      m: d3_time_parseMonthNumber,
      M: d3_time_parseMinutes,
      p: d3_time_parseAmPm,
      S: d3_time_parseSeconds,
      U: d3_time_parseWeekNumberSunday,
      w: d3_time_parseWeekdayNumber,
      W: d3_time_parseWeekNumberMonday,
      x: d3_time_parseLocaleDate,
      X: d3_time_parseLocaleTime,
      y: d3_time_parseYear,
      Y: d3_time_parseFullYear,
      Z: d3_time_parseZone,
      "%": d3_time_parseLiteralPercent
    };
    function d3_time_parseWeekdayAbbrev(date, string, i) {
      d3_time_dayAbbrevRe.lastIndex = 0;
      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseWeekday(date, string, i) {
      d3_time_dayRe.lastIndex = 0;
      var n = d3_time_dayRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonthAbbrev(date, string, i) {
      d3_time_monthAbbrevRe.lastIndex = 0;
      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonth(date, string, i) {
      d3_time_monthRe.lastIndex = 0;
      var n = d3_time_monthRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseLocaleFull(date, string, i) {
      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
    }
    function d3_time_parseLocaleDate(date, string, i) {
      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
    }
    function d3_time_parseLocaleTime(date, string, i) {
      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
    }
    function d3_time_parseAmPm(date, string, i) {
      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
      return n == null ? -1 : (date.p = n, i);
    }
    return d3_time_format;
  }
  var d3_time_formatPads = {
    "-": "",
    _: " ",
    "0": "0"
  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function d3_time_formatRe(names) {
    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
  }
  function d3_time_formatLookup(names) {
    var map = new d3_Map(), i = -1, n = names.length;
    while (++i < n) map.set(names[i].toLowerCase(), i);
    return map;
  }
  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }
  function d3_time_parseZone(date, string, i) {
    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
    i + 5) : -1;
  }
  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2e3);
  }
  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }
  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }
  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
  }
  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function d3_time_formatMulti(formats) {
    var n = formats.length, i = -1;
    while (++i < n) formats[i][0] = this(formats[i][0]);
    return function(date) {
      var i = 0, f = formats[i];
      while (!f[1](date)) f = formats[++i];
      return f[0](date);
    };
  }
  d3.locale = function(locale) {
    return {
      numberFormat: d3_locale_numberFormat(locale),
      timeFormat: d3_locale_timeFormat(locale)
    };
  };
  var d3_locale_enUS = d3.locale({
    decimal: ".",
    thousands: ",",
    grouping: [ 3 ],
    currency: [ "$", "" ],
    dateTime: "%a %b %e %X %Y",
    date: "%m/%d/%Y",
    time: "%H:%M:%S",
    periods: [ "AM", "PM" ],
    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
  });
  d3.format = d3_locale_enUS.numberFormat;
  d3.geo = {};
  function d3_adder() {}
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function(y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
    },
    reset: function() {
      this.s = this.t = 0;
    },
    valueOf: function() {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();
  function d3_adderSum(a, b, o) {
    var x = o.s = a + b, bv = x - a, av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function(object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };
  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
    Feature: function(feature, listener) {
      d3_geo_streamGeometry(feature.geometry, listener);
    },
    FeatureCollection: function(object, listener) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
    }
  };
  var d3_geo_streamGeometryType = {
    Sphere: function(object, listener) {
      listener.sphere();
    },
    Point: function(object, listener) {
      object = object.coordinates;
      listener.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
    },
    LineString: function(object, listener) {
      d3_geo_streamLine(object.coordinates, listener, 0);
    },
    MultiLineString: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
    },
    Polygon: function(object, listener) {
      d3_geo_streamPolygon(object.coordinates, listener);
    },
    MultiPolygon: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
    },
    GeometryCollection: function(object, listener) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
    }
  };
  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    listener.lineStart();
    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
    listener.lineEnd();
  }
  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1, n = coordinates.length;
    listener.polygonStart();
    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function(object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
    sphere: function() {
      d3_geo_areaSum += 4 * π;
    },
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_areaRingSum.reset();
      d3_geo_area.lineStart = d3_geo_areaRingStart;
    },
    polygonEnd: function() {
      var area = 2 * d3_geo_areaRingSum;
      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
    }
  };
  function d3_geo_areaRingStart() {
    var λ00, φ00, λ0, cosφ0, sinφ0;
    d3_geo_area.point = function(λ, φ) {
      d3_geo_area.point = nextPoint;
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
      sinφ0 = Math.sin(φ);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      φ = φ * d3_radians / 2 + π / 4;
      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
    }
    d3_geo_area.lineEnd = function() {
      nextPoint(λ00, φ00);
    };
  }
  function d3_geo_cartesian(spherical) {
    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
  }
  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function d3_geo_cartesianCross(a, b) {
    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
  }
  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }
  function d3_geo_cartesianScale(vector, k) {
    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
  }
  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }
  function d3_geo_spherical(cartesian) {
    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
  }
  function d3_geo_sphericalEqual(a, b) {
    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
  }
  d3.geo.bounds = function() {
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
    var bound = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        bound.point = ringPoint;
        bound.lineStart = ringStart;
        bound.lineEnd = ringEnd;
        dλSum = 0;
        d3_geo_area.polygonStart();
      },
      polygonEnd: function() {
        d3_geo_area.polygonEnd();
        bound.point = point;
        bound.lineStart = lineStart;
        bound.lineEnd = lineEnd;
        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
        range[0] = λ0, range[1] = λ1;
      }
    };
    function point(λ, φ) {
      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
      if (φ < φ0) φ0 = φ;
      if (φ > φ1) φ1 = φ;
    }
    function linePoint(λ, φ) {
      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = inflection[1] * d3_degrees;
          if (φi > φ1) φ1 = φi;
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = -inflection[1] * d3_degrees;
          if (φi < φ0) φ0 = φi;
        } else {
          if (φ < φ0) φ0 = φ;
          if (φ > φ1) φ1 = φ;
        }
        if (antimeridian) {
          if (λ < λ_) {
            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
          } else {
            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
          }
        } else {
          if (λ1 >= λ0) {
            if (λ < λ0) λ0 = λ;
            if (λ > λ1) λ1 = λ;
          } else {
            if (λ > λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
            }
          }
        }
      } else {
        point(λ, φ);
      }
      p0 = p, λ_ = λ;
    }
    function lineStart() {
      bound.point = linePoint;
    }
    function lineEnd() {
      range[0] = λ0, range[1] = λ1;
      bound.point = point;
      p0 = null;
    }
    function ringPoint(λ, φ) {
      if (p0) {
        var dλ = λ - λ_;
        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
      } else λ__ = λ, φ__ = φ;
      d3_geo_area.point(λ, φ);
      linePoint(λ, φ);
    }
    function ringStart() {
      d3_geo_area.lineStart();
    }
    function ringEnd() {
      ringPoint(λ__, φ__);
      d3_geo_area.lineEnd();
      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
      range[0] = λ0, range[1] = λ1;
      p0 = null;
    }
    function angle(λ0, λ1) {
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
    }
    function compareRanges(a, b) {
      return a[0] - b[0];
    }
    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    return function(feature) {
      φ1 = λ1 = -(λ0 = φ0 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity, dλ;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
          b = merged[i];
          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
        }
      }
      ranges = range = null;
      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
    };
  }();
  d3.geo.centroid = function(object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
    if (m < ε2) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < ε2) return [ NaN, NaN ];
    }
    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
    sphere: d3_noop,
    point: d3_geo_centroidPoint,
    lineStart: d3_geo_centroidLineStart,
    lineEnd: d3_geo_centroidLineEnd,
    polygonStart: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
    }
  };
  function d3_geo_centroidPoint(λ, φ) {
    λ *= d3_radians;
    var cosφ = Math.cos(φ *= d3_radians);
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
  }
  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }
  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }
  function d3_geo_centroidRingStart() {
    var λ00, φ00, x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ00 = λ, φ00 = φ;
      d3_geo_centroid.point = nextPoint;
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function() {
      nextPoint(λ00, φ00);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }
  function d3_true() {
    return true;
  }
  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
    var subject = [], clip = [];
    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
        listener.lineEnd();
        return;
      }
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;
      subject.push(a);
      clip.push(b);
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
      a.o = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length) return;
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
      clip[i].e = entry = !entry;
    }
    var start = subject[0], points, point;
    while (1) {
      var current = start, isSubject = true;
      while (current.v) if ((current = current.n) === start) return;
      points = current.z;
      listener.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, listener);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, listener);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      listener.lineEnd();
    }
  }
  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }
  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }
  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
    return function(rotate, listener) {
      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3.merge(segments);
          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
          if (segments.length) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
          } else if (clipStartInside) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
          }
          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
          segments = polygon = null;
        },
        sphere: function() {
          listener.polygonStart();
          listener.lineStart();
          interpolate(null, null, 1, listener);
          listener.lineEnd();
          listener.polygonEnd();
        }
      };
      function point(λ, φ) {
        var point = rotate(λ, φ);
        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
      }
      function pointLine(λ, φ) {
        var point = rotate(λ, φ);
        line.point(point[0], point[1]);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
      function pointRing(λ, φ) {
        ring.push([ λ, φ ]);
        var point = rotate(λ, φ);
        ringListener.point(point[0], point[1]);
      }
      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1, i = -1, point;
          if (n > 0) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            while (++i < n) listener.point((point = segment[i])[0], point[1]);
            listener.lineEnd();
          }
          return;
        }
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }
  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }
  function d3_geo_clipBufferListener() {
    var lines = [], line;
    return {
      lineStart: function() {
        lines.push(line = []);
      },
      point: function(λ, φ) {
        line.push([ λ, φ ]);
      },
      lineEnd: d3_noop,
      buffer: function() {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }
  function d3_geo_clipSort(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
  function d3_geo_clipAntimeridianLine(listener) {
    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
    return {
      lineStart: function() {
        listener.lineStart();
        clean = 1;
      },
      point: function(λ1, φ1) {
        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
        if (abs(dλ - π) < ε) {
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          listener.point(λ1, φ0);
          clean = 0;
        } else if (sλ0 !== sλ1 && dλ >= π) {
          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          clean = 0;
        }
        listener.point(λ0 = λ1, φ0 = φ1);
        sλ0 = sλ1;
      },
      lineEnd: function() {
        listener.lineEnd();
        λ0 = φ0 = NaN;
      },
      clean: function() {
        return 2 - clean;
      }
    };
  }
  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var φ;
    if (from == null) {
      φ = direction * halfπ;
      listener.point(-π, φ);
      listener.point(0, φ);
      listener.point(π, φ);
      listener.point(π, 0);
      listener.point(π, -φ);
      listener.point(0, -φ);
      listener.point(-π, -φ);
      listener.point(-π, 0);
      listener.point(-π, φ);
    } else if (abs(from[0] - to[0]) > ε) {
      var s = from[0] < to[0] ? π : -π;
      φ = direction * s / 2;
      listener.point(-s, φ);
      listener.point(0, φ);
      listener.point(s, φ);
    } else {
      listener.point(to[0], to[1]);
    }
  }
  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i], m = ring.length;
      if (!m) continue;
      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
      while (true) {
        if (j === m) j = 0;
        point = ring[j];
        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
          }
        }
        if (!j++) break;
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
      }
    }
    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;
  }
  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
    function visible(λ, φ) {
      return Math.cos(λ) * Math.cos(φ) > cr;
    }
    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(λ, φ) {
          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v)) listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += ε;
              point1[1] += ε;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) listener.lineEnd();
          point0 = null;
        },
        clean: function() {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two) return q;
      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [ q, d3_geo_spherical(q1) ];
      }
    }
    function code(λ, φ) {
      var r = smallRadius ? radius : π - radius, code = 0;
      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
      return code;
    }
  }
  function d3_geom_clipLine(x0, y0, x1, y1) {
    return function(line) {
      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      if (t0 > 0) line.a = {
        x: ax + t0 * dx,
        y: ay + t0 * dy
      };
      if (t1 < 1) line.b = {
        x: ax + t1 * dx,
        y: ay + t1 * dy
      };
      return line;
    };
  }
  var d3_geo_clipExtentMAX = 1e9;
  d3.geo.clipExtent = function() {
    var x0, y0, x1, y1, stream, clip, clipExtent = {
      stream: function(output) {
        if (stream) stream.valid = false;
        stream = clip(output);
        stream.valid = true;
        return stream;
      },
      extent: function(_) {
        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
        if (stream) stream.valid = false, stream = null;
        return clipExtent;
      }
    };
    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
  };
  function d3_geo_clipExtent(x0, y0, x1, y1) {
    return function(listener) {
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          listener = bufferListener;
          segments = [];
          polygon = [];
          clean = true;
        },
        polygonEnd: function() {
          listener = listener_;
          segments = d3.merge(segments);
          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
          if (inside || visible) {
            listener.polygonStart();
            if (inside) {
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            if (visible) {
              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
            }
            listener.polygonEnd();
          }
          segments = polygon = ring = null;
        }
      };
      function insidePolygon(p) {
        var wn = 0, n = polygon.length, y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
            } else {
              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }
      function interpolate(from, to, direction, listener) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function pointVisible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }
      function point(x, y) {
        if (pointVisible(x, y)) listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first, clean;
      function lineStart() {
        clip.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_) listener.lineEnd();
      }
      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
        var v = pointVisible(x, y);
        if (polygon) ring.push([ x, y ]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_) listener.point(x, y); else {
            var l = {
              a: {
                x: x_,
                y: y_
              },
              b: {
                x: x,
                y: y
              }
            };
            if (clipLine(l)) {
              if (!v_) {
                listener.lineStart();
                listener.point(l.a.x, l.a.y);
              }
              listener.point(l.b.x, l.b.y);
              if (!v) listener.lineEnd();
              clean = false;
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };
    function corner(p, direction) {
      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compare(a, b) {
      return comparePoints(a.x, b.x);
    }
    function comparePoints(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
  }
  function d3_geo_conic(projectAt) {
    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
    p.parallels = function(_) {
      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
    };
    return p;
  }
  function d3_geo_conicEqualArea(φ0, φ1) {
    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
    function forward(λ, φ) {
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = ρ0 - y;
      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function() {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function() {
    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
  };
  d3.geo.albersUsa = function() {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
    var point, pointStream = {
      point: function(x, y) {
        point = [ x, y ];
      }
    }, lower48Point, alaskaPoint, hawaiiPoint;
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {
        point: function(x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function() {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function() {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function() {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function() {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function() {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * .35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_pathAreaPolygon = 0;
      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
    }
  };
  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function(x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };
    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
    point: d3_geo_pathBoundsPoint,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
  }
  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointCircle = d3_geo_pathBufferCircle(_);
        return stream;
      },
      result: function() {
        if (buffer.length) {
          var result = buffer.join("");
          buffer = [];
          return result;
        }
      }
    };
    function point(x, y) {
      buffer.push("M", x, ",", y, pointCircle);
    }
    function pointLineStart(x, y) {
      buffer.push("M", x, ",", y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      buffer.push("L", x, ",", y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      buffer.push("Z");
    }
    return stream;
  }
  function d3_geo_pathBufferCircle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }
  var d3_geo_pathCentroid = {
    point: d3_geo_pathCentroidPoint,
    lineStart: d3_geo_pathCentroidLineStart,
    lineEnd: d3_geo_pathCentroidLineEnd,
    polygonStart: function() {
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
    }
  };
  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }
  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }
  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }
  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointRadius = _;
        return stream;
      },
      result: d3_noop
    };
    function point(x, y) {
      context.moveTo(x + pointRadius, y);
      context.arc(x, y, pointRadius, 0, τ);
    }
    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      context.lineTo(x, y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }
  function d3_geo_resample(project) {
    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
    function resample(stream) {
      return (maxDepth ? resampleRecursive : resampleNone)(stream);
    }
    function resampleNone(stream) {
      return d3_geo_transformPoint(stream, function(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      });
    }
    function resampleRecursive(stream) {
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
      var resample = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          stream.polygonStart();
          resample.lineStart = ringStart;
        },
        polygonEnd: function() {
          stream.polygonEnd();
          resample.lineStart = lineStart;
        }
      };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }
      function linePoint(λ, φ) {
        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }
      function ringPoint(λ, φ) {
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resample.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }
    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * δ2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
        }
      }
    }
    resample.precision = function(_) {
      if (!arguments.length) return Math.sqrt(δ2);
      maxDepth = (δ2 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function() {
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function(object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function(object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
    };
    path.bounds = function(object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
    };
    path.projection = function(_) {
      if (!arguments.length) return projection;
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return reset();
    };
    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };
  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function(x, y) {
      return project([ x * d3_degrees, y * d3_degrees ]);
    });
    return function(stream) {
      return d3_geo_projectionRadians(resample(stream));
    };
  }
  d3.geo.transform = function(methods) {
    return {
      stream: function(stream) {
        var transform = new d3_geo_transform(stream);
        for (var k in methods) transform[k] = methods[k];
        return transform;
      }
    };
  };
  function d3_geo_transform(stream) {
    this.stream = stream;
  }
  d3_geo_transform.prototype = {
    point: function(x, y) {
      this.stream.point(x, y);
    },
    sphere: function() {
      this.stream.sphere();
    },
    lineStart: function() {
      this.stream.lineStart();
    },
    lineEnd: function() {
      this.stream.lineEnd();
    },
    polygonStart: function() {
      this.stream.polygonStart();
    },
    polygonEnd: function() {
      this.stream.polygonEnd();
    }
  };
  function d3_geo_transformPoint(stream, point) {
    return {
      point: point,
      sphere: function() {
        stream.sphere();
      },
      lineStart: function() {
        stream.lineStart();
      },
      lineEnd: function() {
        stream.lineEnd();
      },
      polygonStart: function() {
        stream.polygonStart();
      },
      polygonEnd: function() {
        stream.polygonEnd();
      }
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;
  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function() {
      return project;
    })();
  }
  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
      x = project(x, y);
      return [ x[0] * k + δx, δy - x[1] * k ];
    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [ point[0] * k + δx, δy - point[1] * k ];
    }
    function invert(point) {
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
    }
    projection.stream = function(output) {
      if (stream) stream.valid = false;
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function(_) {
      if (!arguments.length) return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function(_) {
      if (!arguments.length) return clipExtent;
      clipExtent = _;
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
      return invalidate();
    };
    projection.scale = function(_) {
      if (!arguments.length) return k;
      k = +_;
      return reset();
    };
    projection.translate = function(_) {
      if (!arguments.length) return [ x, y ];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function(_) {
      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
      λ = _[0] % 360 * d3_radians;
      φ = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function(_) {
      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
      δλ = _[0] % 360 * d3_radians;
      δφ = _[1] % 360 * d3_radians;
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, "precision");
    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
      var center = project(λ, φ);
      δx = x - center[0] * k;
      δy = y + center[1] * k;
      return invalidate();
    }
    function invalidate() {
      if (stream) stream.valid = false, stream = null;
      return projection;
    }
    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }
  function d3_geo_projectionRadians(stream) {
    return d3_geo_transformPoint(stream, function(x, y) {
      stream.point(x * d3_radians, y * d3_radians);
    });
  }
  function d3_geo_equirectangular(λ, φ) {
    return [ λ, φ ];
  }
  (d3.geo.equirectangular = function() {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function(rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    };
    return forward;
  };
  function d3_geo_identityRotation(λ, φ) {
    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
  }
  d3_geo_identityRotation.invert = d3_geo_equirectangular;
  function d3_geo_rotation(δλ, δφ, δγ) {
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
  }
  function d3_geo_forwardRotationλ(δλ) {
    return function(λ, φ) {
      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
    };
  }
  function d3_geo_rotationλ(δλ) {
    var rotation = d3_geo_forwardRotationλ(δλ);
    rotation.invert = d3_geo_forwardRotationλ(-δλ);
    return rotation;
  }
  function d3_geo_rotationφγ(δφ, δγ) {
    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
    function rotation(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
    }
    rotation.invert = function(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
    };
    return rotation;
  }
  d3.geo.circle = function() {
    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
    function circle() {
      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {
        point: function(x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: "Polygon",
        coordinates: [ ring ]
      };
    }
    circle.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return circle;
    };
    circle.angle = function(x) {
      if (!arguments.length) return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
      return circle;
    };
    circle.precision = function(_) {
      if (!arguments.length) return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };
  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius), sr = Math.sin(radius);
    return function(from, to, direction, listener) {
      var step = direction * precision;
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to) from += direction * τ;
      } else {
        from = radius + direction * τ;
        to = radius - .5 * step;
      }
      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
      }
    };
  }
  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
  }
  d3.geo.distance = function(a, b) {
    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
  };
  d3.geo.graticule = function() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }
    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
        return abs(x % DX) > ε;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
        return abs(y % DY) > ε;
      }).map(y));
    }
    graticule.lines = function() {
      return lines().map(function(coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
      };
    };
    graticule.extent = function(_) {
      if (!arguments.length) return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function(_) {
      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function(_) {
      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function(_) {
      if (!arguments.length) return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function(_) {
      if (!arguments.length) return [ DX, DY ];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function(_) {
      if (!arguments.length) return [ dx, dy ];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
  };
  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - ε, dy).concat(y1);
    return function(x) {
      return y.map(function(y) {
        return [ x, y ];
      });
    };
  }
  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - ε, dx).concat(x1);
    return function(y) {
      return x.map(function(x) {
        return [ x, y ];
      });
    };
  }
  function d3_source(d) {
    return d.source;
  }
  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function() {
    var source = d3_source, source_, target = d3_target, target_;
    function greatArc() {
      return {
        type: "LineString",
        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
      };
    }
    greatArc.distance = function() {
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
    };
    greatArc.source = function(_) {
      if (!arguments.length) return source;
      source = _, source_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.target = function(_) {
      if (!arguments.length) return target;
      target = _, target_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.precision = function() {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function(source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };
  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function(t) {
      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
    } : function() {
      return [ x0 * d3_degrees, y0 * d3_degrees ];
    };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function(object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
    sphere: d3_noop,
    point: d3_noop,
    lineStart: d3_geo_lengthLineStart,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_lengthLineStart() {
    var λ0, sinφ0, cosφ0;
    d3_geo_length.point = function(λ, φ) {
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function() {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };
    function nextPoint(λ, φ) {
      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
    }
  }
  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(λ, φ) {
      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
    }
    azimuthal.invert = function(x, y) {
      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
    return Math.sqrt(2 / (1 + cosλcosφ));
  }, function(ρ) {
    return 2 * Math.asin(ρ / 2);
  });
  (d3.geo.azimuthalEqualArea = function() {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
    var c = Math.acos(cosλcosφ);
    return c && c / Math.sin(c);
  }, d3_identity);
  (d3.geo.azimuthalEquidistant = function() {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;
  function d3_geo_conicConformal(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), t = function(φ) {
      return Math.tan(π / 4 + φ / 2);
    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n) return d3_geo_mercator;
    function forward(λ, φ) {
      if (F > 0) {
        if (φ < -halfπ + ε) φ = -halfπ + ε;
      } else {
        if (φ > halfπ - ε) φ = halfπ - ε;
      }
      var ρ = F / Math.pow(t(φ), n);
      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function() {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;
  function d3_geo_conicEquidistant(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
    if (abs(n) < ε) return d3_geo_equirectangular;
    function forward(λ, φ) {
      var ρ = G - φ;
      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = G - y;
      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function() {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / cosλcosφ;
  }, Math.atan);
  (d3.geo.gnomonic = function() {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;
  function d3_geo_mercator(λ, φ) {
    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
  }
  d3_geo_mercator.invert = function(x, y) {
    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
  };
  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function() {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function() {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function(_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = π * scale(), t = translate();
          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function() {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function() {
    return 1;
  }, Math.asin);
  (d3.geo.orthographic = function() {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / (1 + cosλcosφ);
  }, function(ρ) {
    return 2 * Math.atan(ρ);
  });
  (d3.geo.stereographic = function() {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;
  function d3_geo_transverseMercator(λ, φ) {
    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
  }
  d3_geo_transverseMercator.invert = function(x, y) {
    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
  };
  (d3.geo.transverseMercator = function() {
    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
    projection.center = function(_) {
      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
    };
    projection.rotate = function(_) {
      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
      [ _[0], _[1], _[2] - 90 ]);
    };
    return rotate([ 0, 0, 90 ]);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};
  function d3_geom_pointX(d) {
    return d[0];
  }
  function d3_geom_pointY(d) {
    return d[1];
  }
  d3.geom.hull = function(vertices) {
    var x = d3_geom_pointX, y = d3_geom_pointY;
    if (arguments.length) return hull(vertices);
    function hull(data) {
      if (data.length < 3) return [];
      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
      for (i = 0; i < n; i++) {
        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
      }
      points.sort(d3_geom_hullOrder);
      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
      return polygon;
    }
    hull.x = function(_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function(_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };
  function d3_geom_hullUpper(points) {
    var n = points.length, hull = [ 0, 1 ], hs = 2;
    for (var i = 2; i < n; i++) {
      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
      hull[hs++] = i;
    }
    return hull.slice(0, hs);
  }
  function d3_geom_hullOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1];
  }
  d3.geom.polygon = function(coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function() {
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * .5;
  };
  d3_geom_polygonPrototype.centroid = function(k) {
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
    if (!arguments.length) k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [ x * k, y * k ];
  };
  d3_geom_polygonPrototype.clip = function(subject) {
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed) subject.push(subject[0]);
      a = b;
    }
    return subject;
  };
  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }
  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [ x1 + ua * x21, y1 + ua * y21 ];
  }
  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0], b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
  function d3_geom_voronoiBeach() {
    d3_geom_voronoiRedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }
  function d3_geom_voronoiCreateBeach(site) {
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
    beach.site = site;
    return beach;
  }
  function d3_geom_voronoiDetachBeach(beach) {
    d3_geom_voronoiDetachCircle(beach);
    d3_geom_voronoiBeaches.remove(beach);
    d3_geom_voronoiBeachPool.push(beach);
    d3_geom_voronoiRedBlackNode(beach);
  }
  function d3_geom_voronoiRemoveBeach(beach) {
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
      x: x,
      y: y
    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
    d3_geom_voronoiDetachBeach(beach);
    var lArc = previous;
    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachBeach(lArc);
      lArc = previous;
    }
    disappearing.unshift(lArc);
    d3_geom_voronoiDetachCircle(lArc);
    var rArc = next;
    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
      next = rArc.N;
      disappearing.push(rArc);
      d3_geom_voronoiDetachBeach(rArc);
      rArc = next;
    }
    disappearing.push(rArc);
    d3_geom_voronoiDetachCircle(rArc);
    var nArcs = disappearing.length, iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiAddBeach(site) {
    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
    while (node) {
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
      if (dxl > ε) node = node.L; else {
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
        if (dxr > ε) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -ε) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -ε) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    var newArc = d3_geom_voronoiCreateBeach(site);
    d3_geom_voronoiBeaches.insert(lArc, newArc);
    if (!lArc && !rArc) return;
    if (lArc === rArc) {
      d3_geom_voronoiDetachCircle(lArc);
      rArc = d3_geom_voronoiCreateBeach(lArc.site);
      d3_geom_voronoiBeaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
      return;
    }
    if (!rArc) {
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      return;
    }
    d3_geom_voronoiDetachCircle(lArc);
    d3_geom_voronoiDetachCircle(rArc);
    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
      x: (cy * hb - by * hc) / d + ax,
      y: (bx * hc - cx * hb) / d + ay
    };
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
    if (!pby2) return rfocx;
    var lArc = arc.P;
    if (!lArc) return -Infinity;
    site = lArc.site;
    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
    if (!plby2) return lfocx;
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }
  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
  }
  function d3_geom_voronoiCell(site) {
    this.site = site;
    this.edges = [];
  }
  d3_geom_voronoiCell.prototype.prepare = function() {
    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
    while (iHalfEdge--) {
      edge = halfEdges[iHalfEdge].edge;
      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
    }
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
    return halfEdges.length;
  };
  function d3_geom_voronoiCloseCells(extent) {
    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {
      cell = cells[iCell];
      if (!cell || !cell.prepare()) continue;
      halfEdges = cell.edges;
      nHalfEdges = halfEdges.length;
      iHalfEdge = 0;
      while (iHalfEdge < nHalfEdges) {
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
            x: x0,
            y: abs(x2 - x0) < ε ? y2 : y1
          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
            x: abs(y2 - y1) < ε ? x2 : x1,
            y: y1
          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
            x: x1,
            y: abs(x2 - x1) < ε ? y2 : y0
          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
            x: abs(y2 - y0) < ε ? x2 : x0,
            y: y0
          } : null), cell.site, null));
          ++nHalfEdges;
        }
      }
    }
  }
  function d3_geom_voronoiHalfEdgeOrder(a, b) {
    return b.angle - a.angle;
  }
  function d3_geom_voronoiCircle() {
    d3_geom_voronoiRedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }
  function d3_geom_voronoiAttachCircle(arc) {
    var lArc = arc.P, rArc = arc.N;
    if (!lArc || !rArc) return;
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
    if (lSite === rSite) return;
    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -ε2) return;
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = cy + Math.sqrt(x * x + y * y);
    circle.cy = cy;
    arc.circle = circle;
    var before = null, node = d3_geom_voronoiCircles._;
    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L) node = node.L; else {
          before = node.P;
          break;
        }
      } else {
        if (node.R) node = node.R; else {
          before = node;
          break;
        }
      }
    }
    d3_geom_voronoiCircles.insert(before, circle);
    if (!before) d3_geom_voronoiFirstCircle = circle;
  }
  function d3_geom_voronoiDetachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
      d3_geom_voronoiCircles.remove(circle);
      d3_geom_voronoiCirclePool.push(circle);
      d3_geom_voronoiRedBlackNode(circle);
      arc.circle = null;
    }
  }
  function d3_geom_voronoiClipEdges(extent) {
    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
    while (i--) {
      e = edges[i];
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
        e.a = e.b = null;
        edges.splice(i, 1);
      }
    }
  }
  function d3_geom_voronoiConnectEdge(edge, extent) {
    var vb = edge.b;
    if (vb) return true;
    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {
      if (fx < x0 || fx >= x1) return;
      if (lx > rx) {
        if (!va) va = {
          x: fx,
          y: y0
        }; else if (va.y >= y1) return;
        vb = {
          x: fx,
          y: y1
        };
      } else {
        if (!va) va = {
          x: fx,
          y: y1
        }; else if (va.y < y0) return;
        vb = {
          x: fx,
          y: y0
        };
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!va) va = {
            x: (y0 - fb) / fm,
            y: y0
          }; else if (va.y >= y1) return;
          vb = {
            x: (y1 - fb) / fm,
            y: y1
          };
        } else {
          if (!va) va = {
            x: (y1 - fb) / fm,
            y: y1
          }; else if (va.y < y0) return;
          vb = {
            x: (y0 - fb) / fm,
            y: y0
          };
        }
      } else {
        if (ly < ry) {
          if (!va) va = {
            x: x0,
            y: fm * x0 + fb
          }; else if (va.x >= x1) return;
          vb = {
            x: x1,
            y: fm * x1 + fb
          };
        } else {
          if (!va) va = {
            x: x1,
            y: fm * x1 + fb
          }; else if (va.x < x0) return;
          vb = {
            x: x0,
            y: fm * x0 + fb
          };
        }
      }
    }
    edge.a = va;
    edge.b = vb;
    return true;
  }
  function d3_geom_voronoiEdge(lSite, rSite) {
    this.l = lSite;
    this.r = rSite;
    this.a = this.b = null;
  }
  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, rSite);
    d3_geom_voronoiEdges.push(edge);
    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
    return edge;
  }
  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, null);
    edge.a = va;
    edge.b = vb;
    d3_geom_voronoiEdges.push(edge);
    return edge;
  }
  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
    if (!edge.a && !edge.b) {
      edge.a = vertex;
      edge.l = lSite;
      edge.r = rSite;
    } else if (edge.l === rSite) {
      edge.b = vertex;
    } else {
      edge.a = vertex;
    }
  }
  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
    var va = edge.a, vb = edge.b;
    this.edge = edge;
    this.site = lSite;
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
  }
  d3_geom_voronoiHalfEdge.prototype = {
    start: function() {
      return this.edge.l === this.site ? this.edge.a : this.edge.b;
    },
    end: function() {
      return this.edge.l === this.site ? this.edge.b : this.edge.a;
    }
  };
  function d3_geom_voronoiRedBlackTree() {
    this._ = null;
  }
  function d3_geom_voronoiRedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
  }
  d3_geom_voronoiRedBlackTree.prototype = {
    insert: function(after, node) {
      var parent, grandpa, uncle;
      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N) after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L) after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = d3_geom_voronoiRedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },
    remove: function(node) {
      if (node.N) node.N.P = node.P;
      if (node.P) node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
      if (parent) {
        if (parent.L === node) parent.L = next; else parent.R = next;
      } else {
        this._ = next;
      }
      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }
      if (node) node.U = parent;
      if (red) return;
      if (node && node.C) {
        node.C = false;
        return;
      }
      do {
        if (node === this._) break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);
      if (node) node.C = false;
    }
  };
  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
    var p = node, q = node.R, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R) p.R.U = p;
    q.L = p;
  }
  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
    var p = node, q = node.L, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L) p.L.U = p;
    q.R = p;
  }
  function d3_geom_voronoiRedBlackFirst(node) {
    while (node.L) node = node.L;
    return node;
  }
  function d3_geom_voronoi(sites, bbox) {
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
    d3_geom_voronoiEdges = [];
    d3_geom_voronoiCells = new Array(sites.length);
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
    while (true) {
      circle = d3_geom_voronoiFirstCircle;
      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
        if (site.x !== x0 || site.y !== y0) {
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
          d3_geom_voronoiAddBeach(site);
          x0 = site.x, y0 = site.y;
        }
        site = sites.pop();
      } else if (circle) {
        d3_geom_voronoiRemoveBeach(circle.arc);
      } else {
        break;
      }
    }
    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
    var diagram = {
      cells: d3_geom_voronoiCells,
      edges: d3_geom_voronoiEdges
    };
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
    return diagram;
  }
  function d3_geom_voronoiVertexOrder(a, b) {
    return b.y - a.y || b.x - a.x;
  }
  d3.geom.voronoi = function(points) {
    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
    if (points) return voronoi(points);
    function voronoi(data) {
      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
          var s = e.start();
          return [ s.x, s.y ];
        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
        polygon.point = data[i];
      });
      return polygons;
    }
    function sites(data) {
      return data.map(function(d, i) {
        return {
          x: Math.round(fx(d, i) / ε) * ε,
          y: Math.round(fy(d, i) / ε) * ε,
          i: i
        };
      });
    }
    voronoi.links = function(data) {
      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
        return edge.l && edge.r;
      }).map(function(edge) {
        return {
          source: data[edge.l.i],
          target: data[edge.r.i]
        };
      });
    };
    voronoi.triangles = function(data) {
      var triangles = [];
      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {
          e0 = e1;
          s0 = s1;
          e1 = edges[j].edge;
          s1 = e1.l === site ? e1.r : e1.l;
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
          }
        }
      });
      return triangles;
    };
    voronoi.x = function(_) {
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
    };
    voronoi.y = function(_) {
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
    };
    voronoi.clipExtent = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
      return voronoi;
    };
    voronoi.size = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
    };
    return voronoi;
  };
  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
  function d3_geom_voronoiTriangleArea(a, b, c) {
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
  }
  d3.geom.delaunay = function(vertices) {
    return d3.geom.voronoi().triangles(vertices);
  };
  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }
    function quadtree(data) {
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat) for (i = 0; i < n; ++i) {
          d = data[i];
          if (d.x < x1_) x1_ = d.x;
          if (d.y < y1_) y1_ = d.y;
          if (d.x > x2_) x2_ = d.x;
          if (d.y > y2_) y2_ = d.y;
          xs.push(d.x);
          ys.push(d.y);
        } else for (i = 0; i < n; ++i) {
          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
          if (x_ < x1_) x1_ = x_;
          if (y_ < y1_) y1_ = y_;
          if (x_ > x2_) x2_ = x_;
          if (y_ > y2_) y2_ = y_;
          xs.push(x_);
          ys.push(y_);
        }
      }
      var dx = x2_ - x1_, dy = y2_ - y1_;
      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y)) return;
        if (n.leaf) {
          var nx = n.x, ny = n.y;
          if (nx != null) {
            if (abs(nx - x) + abs(ny - y) < .01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }
      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right) x1 = xm; else x2 = xm;
        if (below) y1 = ym; else y2 = ym;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function(d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function(f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      root.find = function(point) {
        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function(_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function(_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function(_) {
      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
      y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function(_) {
      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };
  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }
  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }
  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }
  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
    var minDistance2 = Infinity, closestPoint;
    (function find(node, x1, y1, x2, y2) {
      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
      if (point = node.point) {
        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
        if (distance2 < minDistance2) {
          var distance = Math.sqrt(minDistance2 = distance2);
          x0 = x - distance, y0 = y - distance;
          x3 = x + distance, y3 = y + distance;
          closestPoint = point;
        }
      }
      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
        if (node = children[i & 3]) switch (i & 3) {
         case 0:
          find(node, x1, y1, xm, ym);
          break;

         case 1:
          find(node, xm, y1, x2, ym);
          break;

         case 2:
          find(node, x1, ym, xm, y2);
          break;

         case 3:
          find(node, xm, ym, x2, y2);
          break;
        }
      }
    })(root, x0, y0, x3, y3);
    return closestPoint;
  }
  d3.interpolateRgb = d3_interpolateRgb;
  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
    return function(t) {
      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;
  function d3_interpolateObject(a, b) {
    var i = {}, c = {}, k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;
  function d3_interpolateNumber(a, b) {
    a = +a, b = +b;
    return function(t) {
      return a * (1 - t) + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;
  function d3_interpolateString(a, b) {
    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a = a + "", b = b + "";
    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s[i]) s[i] += bs; else s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i]) s[i] += bm; else s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({
          i: i,
          x: d3_interpolateNumber(am, bm)
        });
      }
      bi = d3_interpolate_numberB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i]) s[i] += bs; else s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
      return b(t) + "";
    }) : function() {
      return b;
    } : (b = q.length, function(t) {
      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    });
  }
  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
  d3.interpolate = d3_interpolate;
  function d3_interpolate(a, b) {
    var i = d3.interpolators.length, f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
    return f;
  }
  d3.interpolators = [ function(a, b) {
    var t = typeof b;
    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
  } ];
  d3.interpolateArray = d3_interpolateArray;
  function d3_interpolateArray(a, b) {
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
    for (;i < na; ++i) c[i] = a[i];
    for (;i < nb; ++i) c[i] = b[i];
    return function(t) {
      for (i = 0; i < n0; ++i) c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function() {
    return d3_identity;
  };
  var d3_ease = d3.map({
    linear: d3_ease_default,
    poly: d3_ease_poly,
    quad: function() {
      return d3_ease_quad;
    },
    cubic: function() {
      return d3_ease_cubic;
    },
    sin: function() {
      return d3_ease_sin;
    },
    exp: function() {
      return d3_ease_exp;
    },
    circle: function() {
      return d3_ease_circle;
    },
    elastic: d3_ease_elastic,
    back: d3_ease_back,
    bounce: function() {
      return d3_ease_bounce;
    }
  });
  var d3_ease_mode = d3.map({
    "in": d3_identity,
    out: d3_ease_reverse,
    "in-out": d3_ease_reflect,
    "out-in": function(f) {
      return d3_ease_reflect(d3_ease_reverse(f));
    }
  });
  d3.ease = function(name) {
    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
  };
  function d3_ease_clamp(f) {
    return function(t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }
  function d3_ease_reverse(f) {
    return function(t) {
      return 1 - f(1 - t);
    };
  }
  function d3_ease_reflect(f) {
    return function(t) {
      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }
  function d3_ease_quad(t) {
    return t * t;
  }
  function d3_ease_cubic(t) {
    return t * t * t;
  }
  function d3_ease_cubicInOut(t) {
    if (t <= 0) return 0;
    if (t >= 1) return 1;
    var t2 = t * t, t3 = t2 * t;
    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
  }
  function d3_ease_poly(e) {
    return function(t) {
      return Math.pow(t, e);
    };
  }
  function d3_ease_sin(t) {
    return 1 - Math.cos(t * halfπ);
  }
  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }
  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2) p = .45;
    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
    return function(t) {
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
    };
  }
  function d3_ease_back(s) {
    if (!s) s = 1.70158;
    return function(t) {
      return t * t * ((s + 1) * t - s);
    };
  }
  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;
  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;
  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
    };
  }
  d3.interpolateLab = d3_interpolateLab;
  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
    return function(t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
    };
  }
  d3.interpolateRound = d3_interpolateRound;
  function d3_interpolateRound(a, b) {
    b -= a;
    return function(t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function(string) {
    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
    return (d3.transform = function(string) {
      if (string != null) {
        g.setAttribute("transform", string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };
  function d3_transform(m) {
    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
    this.translate = [ m.e, m.f ];
    this.scale = [ kx, ky ];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function() {
    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
  };
  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }
  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
    a: 1,
    b: 0,
    c: 0,
    d: 1,
    e: 0,
    f: 0
  };
  d3.interpolateTransform = d3_interpolateTransform;
  function d3_interpolateTransformPop(s) {
    return s.length ? s.pop() + "," : "";
  }
  function d3_interpolateTranslate(ta, tb, s, q) {
    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
      var i = s.push("translate(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push("translate(" + tb + ")");
    }
  }
  function d3_interpolateRotate(ra, rb, s, q) {
    if (ra !== rb) {
      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
    }
  }
  function d3_interpolateSkew(wa, wb, s, q) {
    if (wa !== wb) {
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
    }
  }
  function d3_interpolateScale(ka, kb, s, q) {
    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] !== 1 || kb[1] !== 1) {
      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
    }
  }
  function d3_interpolateTransform(a, b) {
    var s = [], q = [];
    a = d3.transform(a), b = d3.transform(b);
    d3_interpolateTranslate(a.translate, b.translate, s, q);
    d3_interpolateRotate(a.rotate, b.rotate, s, q);
    d3_interpolateSkew(a.skew, b.skew, s, q);
    d3_interpolateScale(a.scale, b.scale, s, q);
    a = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  function d3_uninterpolateNumber(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return (x - a) / b;
    };
  }
  function d3_uninterpolateClamp(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return Math.max(0, Math.min(1, (x - a) / b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function() {
    return function(links) {
      var paths = [], i = -1, n = links.length;
      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };
  function d3_layout_bundlePath(link) {
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }
  function d3_layout_bundleAncestors(node) {
    var ancestors = [], parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }
  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function() {
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
    function relayout() {
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function(a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function(d, i) {
          d.sort(function(a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (τ - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
          subgroups[di + "-" + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: groupSums[di]
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords) resort();
    }
    function resort() {
      chords.sort(function(a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
      });
    }
    chord.matrix = function(x) {
      if (!arguments.length) return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function(x) {
      if (!arguments.length) return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function(x) {
      if (!arguments.length) return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function(x) {
      if (!arguments.length) return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function(x) {
      if (!arguments.length) return sortChords;
      sortChords = x;
      if (chords) resort();
      return chord;
    };
    chord.chords = function() {
      if (!chords) relayout();
      return chords;
    };
    chord.groups = function() {
      if (!groups) relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function() {
    var force = {}, event = d3.dispatch("start", "tick", "end"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {
      return function(quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
          if (dw * dw / theta2 < dn) {
            if (dn < chargeDistance2) {
              var k = quad.charge / dn;
              node.px -= dx * k;
              node.py -= dy * k;
            }
            return true;
          }
          if (quad.point && dn && dn < chargeDistance2) {
            var k = quad.pointCharge / dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function() {
      if ((alpha *= .99) < .005) {
        timer = null;
        event.end({
          type: "end",
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k) while (++i < n) {
          o = nodes[i];
          o.x += (x - o.x) * k;
          o.y += (y - o.y) * k;
        }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: "tick",
        alpha: alpha
      });
    };
    force.nodes = function(x) {
      if (!arguments.length) return nodes;
      nodes = x;
      return force;
    };
    force.links = function(x) {
      if (!arguments.length) return links;
      links = x;
      return force;
    };
    force.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return force;
    };
    force.linkDistance = function(x) {
      if (!arguments.length) return linkDistance;
      linkDistance = typeof x === "function" ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function(x) {
      if (!arguments.length) return linkStrength;
      linkStrength = typeof x === "function" ? x : +x;
      return force;
    };
    force.friction = function(x) {
      if (!arguments.length) return friction;
      friction = +x;
      return force;
    };
    force.charge = function(x) {
      if (!arguments.length) return charge;
      charge = typeof x === "function" ? x : +x;
      return force;
    };
    force.chargeDistance = function(x) {
      if (!arguments.length) return Math.sqrt(chargeDistance2);
      chargeDistance2 = x * x;
      return force;
    };
    force.gravity = function(x) {
      if (!arguments.length) return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function(x) {
      if (!arguments.length) return Math.sqrt(theta2);
      theta2 = x * x;
      return force;
    };
    force.alpha = function(x) {
      if (!arguments.length) return alpha;
      x = +x;
      if (alpha) {
        if (x > 0) {
          alpha = x;
        } else {
          timer.c = null, timer.t = NaN, timer = null;
          event.end({
            type: "end",
            alpha: alpha = 0
          });
        }
      } else if (x > 0) {
        event.start({
          type: "start",
          alpha: alpha = x
        });
        timer = d3_timer(force.tick);
      }
      return force;
    };
    force.start = function() {
      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == "number") o.source = nodes[o.source];
        if (typeof o.target == "number") o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x)) o.x = position("x", w);
        if (isNaN(o.y)) o.y = position("y", h);
        if (isNaN(o.px)) o.px = o.x;
        if (isNaN(o.py)) o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
      function position(dimension, size) {
        if (!neighbors) {
          neighbors = new Array(n);
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        var candidates = neighbors[i], j = -1, l = candidates.length, x;
        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
        return Math.random() * size;
      }
      return force.resume();
    };
    force.resume = function() {
      return force.alpha(.1);
    };
    force.stop = function() {
      return force.alpha(0);
    };
    force.drag = function() {
      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
      if (!arguments.length) return drag;
      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
    };
    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, "on");
  };
  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }
  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }
  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }
  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }
  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0, cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes, n = nodes.length, i = -1, c;
      while (++i < n) {
        c = nodes[i];
        if (c == null) continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - .5;
        quad.point.y += Math.random() - .5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
  d3.layout.hierarchy = function() {
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
    function hierarchy(root) {
      var stack = [ root ], nodes = [], node;
      root.depth = 0;
      while ((node = stack.pop()) != null) {
        nodes.push(node);
        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
          var n, childs, child;
          while (--n >= 0) {
            stack.push(child = childs[n]);
            child.parent = node;
            child.depth = node.depth + 1;
          }
          if (value) node.value = 0;
          node.children = childs;
        } else {
          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
          delete node.children;
        }
      }
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var childs, parent;
        if (sort && (childs = node.children)) childs.sort(sort);
        if (value && (parent = node.parent)) parent.value += node.value;
      });
      return nodes;
    }
    hierarchy.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function(x) {
      if (!arguments.length) return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function(root) {
      if (value) {
        d3_layout_hierarchyVisitBefore(root, function(node) {
          if (node.children) node.value = 0;
        });
        d3_layout_hierarchyVisitAfter(root, function(node) {
          var parent;
          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
          if (parent = node.parent) parent.value += node.value;
        });
      }
      return root;
    };
    return hierarchy;
  };
  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, "sort", "children", "value");
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }
  function d3_layout_hierarchyVisitBefore(node, callback) {
    var nodes = [ node ];
    while ((node = nodes.pop()) != null) {
      callback(node);
      if ((children = node.children) && (n = children.length)) {
        var n, children;
        while (--n >= 0) nodes.push(children[n]);
      }
    }
  }
  function d3_layout_hierarchyVisitAfter(node, callback) {
    var nodes = [ node ], nodes2 = [];
    while ((node = nodes.pop()) != null) {
      nodes2.push(node);
      if ((children = node.children) && (n = children.length)) {
        var i = -1, n, children;
        while (++i < n) nodes.push(children[i]);
      }
    }
    while ((node = nodes2.pop()) != null) {
      callback(node);
    }
  }
  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }
  function d3_layout_hierarchyValue(d) {
    return d.value;
  }
  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }
  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function(parent) {
      return (parent.children || []).map(function(child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function() {
    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1, n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }
    function depth(node) {
      var children = node.children, d = 0;
      if (children && (n = children.length)) {
        var i = -1, n;
        while (++i < n) d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }
    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function() {
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
    function pie(data) {
      var n = data.length, values = data.map(function(d, i) {
        return +value.call(pie, d, i);
      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
        return values[j] - values[i];
      } : function(i, j) {
        return sort(data[i], data[j]);
      });
      index.forEach(function(i) {
        arcs[i] = {
          data: data[i],
          value: v = values[i],
          startAngle: a,
          endAngle: a += v * k + pa,
          padAngle: p
        };
      });
      return arcs;
    }
    pie.value = function(_) {
      if (!arguments.length) return value;
      value = _;
      return pie;
    };
    pie.sort = function(_) {
      if (!arguments.length) return sort;
      sort = _;
      return pie;
    };
    pie.startAngle = function(_) {
      if (!arguments.length) return startAngle;
      startAngle = _;
      return pie;
    };
    pie.endAngle = function(_) {
      if (!arguments.length) return endAngle;
      endAngle = _;
      return pie;
    };
    pie.padAngle = function(_) {
      if (!arguments.length) return padAngle;
      padAngle = _;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function() {
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {
      if (!(n = data.length)) return data;
      var series = data.map(function(d, i) {
        return values.call(stack, d, i);
      });
      var points = series.map(function(d) {
        return d.map(function(v, i) {
          return [ x.call(stack, v, i), y.call(stack, v, i) ];
        });
      });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var m = series[0].length, n, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
        }
      }
      return data;
    }
    stack.values = function(x) {
      if (!arguments.length) return values;
      values = x;
      return stack;
    };
    stack.order = function(x) {
      if (!arguments.length) return order;
      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function(x) {
      if (!arguments.length) return offset;
      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      return stack;
    };
    stack.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      return stack;
    };
    stack.out = function(z) {
      if (!arguments.length) return out;
      out = z;
      return stack;
    };
    return stack;
  };
  function d3_layout_stackX(d) {
    return d.x;
  }
  function d3_layout_stackY(d) {
    return d.y;
  }
  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
    "inside-out": function(data) {
      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
        return max[a] - max[b];
      }), top = 0, bottom = 0, tops = [], bottoms = [];
      for (i = 0; i < n; ++i) {
        j = index[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }
      return bottoms.reverse().concat(tops);
    },
    reverse: function(data) {
      return d3.range(data.length).reverse();
    },
    "default": d3_layout_stackOrderDefault
  });
  var d3_layout_stackOffsets = d3.map({
    silhouette: function(data) {
      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o > max) max = o;
        sums.push(o);
      }
      for (j = 0; j < m; ++j) {
        y0[j] = (max - sums[j]) / 2;
      }
      return y0;
    },
    wiggle: function(data) {
      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
      y0[0] = o = o0 = 0;
      for (j = 1; j < m; ++j) {
        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
          }
          s2 += s3 * data[i][j][1];
        }
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
        if (o < o0) o0 = o;
      }
      for (j = 0; j < m; ++j) y0[j] -= o0;
      return y0;
    },
    expand: function(data) {
      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
      }
      for (j = 0; j < m; ++j) y0[j] = 0;
      return y0;
    },
    zero: d3_layout_stackOffsetZero
  });
  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }
  function d3_layout_stackOffsetZero(data) {
    var j = -1, m = data[0].length, y0 = [];
    while (++j < m) y0[j] = 0;
    return y0;
  }
  function d3_layout_stackMaxIndex(array) {
    var i = 1, j = 0, v = array[0][1], k, n = array.length;
    for (;i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }
  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }
  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function() {
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
    function histogram(data, i) {
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(x) {
      if (!arguments.length) return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function(x) {
      if (!arguments.length) return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function(x) {
      if (!arguments.length) return binner;
      binner = typeof x === "number" ? function(range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function(x) {
      if (!arguments.length) return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };
  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
  }
  function d3_layout_histogramBinFixed(range, n) {
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
    while (++x <= n) f[x] = m * x + b;
    return f;
  }
  function d3_layout_histogramRange(values) {
    return [ d3.min(values), d3.max(values) ];
  }
  d3.layout.pack = function() {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
        return radius;
      };
      root.x = root.y = 0;
      d3_layout_hierarchyVisitAfter(root, function(d) {
        d.r = +r(d.value);
      });
      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r += dr;
        });
        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function(_) {
      if (!arguments.length) return size;
      size = _;
      return pack;
    };
    pack.radius = function(_) {
      if (!arguments.length) return radius;
      radius = _ == null || typeof _ === "function" ? _ : +_;
      return pack;
    };
    pack.padding = function(_) {
      if (!arguments.length) return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };
  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }
  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }
  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }
  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return .999 * dr * dr > dx * dx + dy * dy;
  }
  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length)) return;
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0, s1 = 1, s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }
  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }
  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }
  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1, n = children.length;
      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
    }
  }
  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r, dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.tree = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
      d3_layout_hierarchyVisitBefore(root1, secondWalk);
      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
        var left = root0, right = root0, bottom = root0;
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
      return nodes;
    }
    function wrapTree(root0) {
      var root1 = {
        A: null,
        children: [ root0 ]
      }, queue = [ root1 ], node1;
      while ((node1 = queue.pop()) != null) {
        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
          queue.push((children[i] = child = {
            _: children[i],
            parent: node1,
            children: (child = children[i].children) && child.slice() || [],
            A: null,
            a: null,
            z: 0,
            m: 0,
            c: 0,
            s: 0,
            t: null,
            i: i
          }).a = child);
        }
      }
      return root1.children[0];
    }
    function firstWalk(v) {
      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
      if (children.length) {
        d3_layout_treeShift(v);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
        if (w) {
          v.z = w.z + separation(v._, w._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._);
      }
      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    }
    function apportion(v, w, ancestor) {
      if (w) {
        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
          vom = d3_layout_treeLeft(vom);
          vop = d3_layout_treeRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !d3_layout_treeRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !d3_layout_treeLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }
      return ancestor;
    }
    function sizeNode(node) {
      node.x *= size[0];
      node.y = node.depth * size[1];
    }
    tree.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return tree;
    };
    tree.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null ? sizeNode : null;
      return tree;
    };
    tree.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) == null ? null : sizeNode;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };
  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }
  function d3_layout_treeLeft(v) {
    var children = v.children;
    return children.length ? children[0] : v.t;
  }
  function d3_layout_treeRight(v) {
    var children = v.children, n;
    return (n = children.length) ? children[n - 1] : v.t;
  }
  function d3_layout_treeMove(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
  }
  function d3_layout_treeShift(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while (--i >= 0) {
      w = children[i];
      w.z += shift;
      w.m += shift;
      shift += w.s + (change += w.c);
    }
  }
  function d3_layout_treeAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }
  d3.layout.cluster = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };
  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function(child) {
      return child.y;
    });
  }
  function d3_layout_clusterX(children) {
    return children.reduce(function(x, child) {
      return x + child.x;
    }, 0) / children.length;
  }
  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
  }
  function d3_layout_clusterRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
  }
  d3.layout.treemap = function() {
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
    function scale(children, k) {
      var i = -1, n = children.length, child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }
    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }
    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), remaining = children.slice(), child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }
    function worst(row, u) {
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
      while (++i < n) {
        if (!(r = row[i].area)) continue;
        if (r < rmin) rmin = r;
        if (r > rmax) rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
    }
    function position(row, u, rect, flush) {
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
      if (u == rect.dx) {
        if (flush || v > rect.dy) v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx) v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }
    function treemap(d) {
      var nodes = stickies || hierarchy(d), root = nodes[0];
      root.x = root.y = 0;
      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;
      if (stickies) hierarchy.revalue(root);
      scale([ root ], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky) stickies = nodes;
      return nodes;
    }
    treemap.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return treemap;
    };
    treemap.padding = function(x) {
      if (!arguments.length) return padding;
      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
      }
      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
      padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function(x) {
      if (!arguments.length) return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function(x) {
      if (!arguments.length) return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function(x) {
      if (!arguments.length) return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function(x) {
      if (!arguments.length) return mode;
      mode = x + "";
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };
  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }
  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function(µ, σ) {
      var n = arguments.length;
      if (n < 2) σ = 1;
      if (n < 1) µ = 0;
      return function() {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function() {
      var random = d3.random.normal.apply(d3, arguments);
      return function() {
        return Math.exp(random());
      };
    },
    bates: function(m) {
      var random = d3.random.irwinHall(m);
      return function() {
        return random() / m;
      };
    },
    irwinHall: function(m) {
      return function() {
        for (var s = 0, j = 0; j < m; j++) s += Math.random();
        return s;
      };
    }
  };
  d3.scale = {};
  function d3_scaleExtent(domain) {
    var start = domain[0], stop = domain[domain.length - 1];
    return start < stop ? [ start, stop ] : [ stop, start ];
  }
  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
    return function(x) {
      return i(u(x));
    };
  }
  function d3_scale_nice(domain, nice) {
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }
  function d3_scale_niceStep(step) {
    return step ? {
      floor: function(x) {
        return Math.floor(x / step) * step;
      },
      ceil: function(x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
    floor: d3_identity,
    ceil: d3_identity
  };
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function(x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function() {
    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
  };
  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;
    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }
    function scale(x) {
      return output(x);
    }
    scale.invert = function(y) {
      return input(y);
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function(x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function(x) {
      if (!arguments.length) return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function(x) {
      if (!arguments.length) return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function() {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }
  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
  }
  function d3_scale_linearNice(domain, m) {
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    return domain;
  }
  function d3_scale_linearTickRange(domain, m) {
    if (m == null) m = 10;
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
    extent[2] = step;
    return extent;
  }
  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }
  function d3_scale_linearTickFormat(domain, m, format) {
    var range = d3_scale_linearTickRange(domain, m);
    if (format) {
      var match = d3_format_re.exec(format);
      match.shift();
      if (match[8] === "s") {
        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
        match[8] = "f";
        format = d3.format(match.join(""));
        return function(d) {
          return format(prefix.scale(d)) + prefix.symbol;
        };
      }
      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
      format = match.join("");
    } else {
      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
    }
    return d3.format(format);
  }
  var d3_scale_linearFormatSignificant = {
    s: 1,
    g: 1,
    p: 1,
    r: 1,
    e: 1
  };
  function d3_scale_linearPrecision(value) {
    return -Math.floor(Math.log(value) / Math.LN10 + .01);
  }
  function d3_scale_linearFormatPrecision(type, range) {
    var p = d3_scale_linearPrecision(range[2]);
    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
  }
  d3.scale.log = function() {
    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
  };
  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
    }
    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }
    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function(x) {
      return pow(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function(_) {
      if (!arguments.length) return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function() {
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function() {
      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {
        if (positive) {
          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {}
        for (j = ticks.length; ticks[j - 1] > v; j--) {}
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function(n, format) {
      if (!arguments.length) return d3_scale_logFormat;
      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
      var k = Math.max(1, base * n / scale.ticks().length);
      return function(d) {
        var i = d / pow(Math.round(log(d)));
        if (i * base < base - .5) i *= base;
        return i <= k ? format(d) : "";
      };
    };
    scale.copy = function() {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
    floor: function(x) {
      return -Math.ceil(-x);
    },
    ceil: function(x) {
      return -Math.floor(-x);
    }
  };
  d3.scale.pow = function() {
    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
  };
  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function(x) {
      return powb(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function(x) {
      if (!arguments.length) return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function() {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_scale_powPow(e) {
    return function(x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function() {
    return d3.scale.pow().exponent(.5);
  };
  d3.scale.ordinal = function() {
    return d3_scale_ordinal([], {
      t: "range",
      a: [ [] ]
    });
  };
  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;
    function scale(x) {
      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
    }
    function steps(start, step) {
      return d3.range(domain.length).map(function(i) {
        return start + step * i;
      });
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = [];
      index = new d3_Map();
      var i = -1, n = x.length, xi;
      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: "range",
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
      0) : (stop - start) / (domain.length - 1 + padding);
      range = steps(start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: "rangePoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundPoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
      0) : (stop - start) / (domain.length - 1 + padding) | 0;
      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
      rangeBand = 0;
      ranger = {
        t: "rangeRoundPoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse) range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: "rangeBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
      if (reverse) range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: "rangeRoundBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function() {
      return rangeBand;
    };
    scale.rangeExtent = function() {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function() {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function() {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function() {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function() {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function() {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
  d3.scale.quantile = function() {
    return d3_scale_quantile([], []);
  };
  function d3_scale_quantile(domain, range) {
    var thresholds;
    function rescale() {
      var k = 0, q = range.length;
      thresholds = [];
      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }
    function scale(x) {
      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function() {
      return thresholds;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
    };
    scale.copy = function() {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function() {
    return d3_scale_quantize(0, 1, [ 0, 1 ]);
  };
  function d3_scale_quantize(x0, x1, range) {
    var kx, i;
    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }
    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function(x) {
      if (!arguments.length) return [ x0, x1 ];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [ y, y + 1 / kx ];
    };
    scale.copy = function() {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function() {
    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
  };
  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x) return range[d3.bisect(domain, x)];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      return scale;
    };
    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return [ domain[y - 1], domain[y] ];
    };
    scale.copy = function() {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function() {
    return d3_scale_identity([ 0, 1 ]);
  };
  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function() {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg = {};
  function d3_zero() {
    return 0;
  }
  d3.svg.arc = function() {
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
    function arc() {
      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
        if (!cw) p1 *= -1;
        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
      }
      if (r1) {
        x0 = r1 * Math.cos(a0 + p1);
        y0 = r1 * Math.sin(a0 + p1);
        x1 = r1 * Math.cos(a1 - p1);
        y1 = r1 * Math.sin(a1 - p1);
        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
          var h1 = (a0 + a1) / 2;
          x0 = r1 * Math.cos(h1);
          y0 = r1 * Math.sin(h1);
          x1 = y1 = null;
        }
      } else {
        x0 = y0 = 0;
      }
      if (r0) {
        x2 = r0 * Math.cos(a1 - p0);
        y2 = r0 * Math.sin(a1 - p0);
        x3 = r0 * Math.cos(a0 + p0);
        y3 = r0 * Math.sin(a0 + p0);
        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
          var h0 = (a0 + a1) / 2;
          x2 = r0 * Math.cos(h0);
          y2 = r0 * Math.sin(h0);
          x3 = y3 = null;
        }
      } else {
        x2 = y2 = 0;
      }
      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
        cr = r0 < r1 ^ cw ? 0 : 1;
        var rc1 = rc, rc0 = rc;
        if (da < π) {
          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
        }
        if (x1 != null) {
          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
          if (rc === rc1) {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
          } else {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
          }
        } else {
          path.push("M", x0, ",", y0);
        }
        if (x3 != null) {
          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
          if (rc === rc0) {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          } else {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          }
        } else {
          path.push("L", x2, ",", y2);
        }
      } else {
        path.push("M", x0, ",", y0);
        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
        path.push("L", x2, ",", y2);
        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
      }
      path.push("Z");
      return path.join("");
    }
    function circleSegment(r1, cw) {
      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
    }
    arc.innerRadius = function(v) {
      if (!arguments.length) return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function(v) {
      if (!arguments.length) return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.cornerRadius = function(v) {
      if (!arguments.length) return cornerRadius;
      cornerRadius = d3_functor(v);
      return arc;
    };
    arc.padRadius = function(v) {
      if (!arguments.length) return padRadius;
      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
      return arc;
    };
    arc.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.padAngle = function(v) {
      if (!arguments.length) return padAngle;
      padAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function() {
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
      return [ Math.cos(a) * r, Math.sin(a) * r ];
    };
    return arc;
  };
  var d3_svg_arcAuto = "auto";
  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }
  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }
  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }
  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }
  function d3_svg_arcPadAngle(d) {
    return d && d.padAngle;
  }
  function d3_svg_arcSweep(x0, y0, x1, y1) {
    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
  }
  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
  }
  function d3_svg_line(projection) {
    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
    function line(data) {
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
      function segment() {
        segments.push("M", interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length) segment();
      return segments.length ? segments.join("") : null;
    }
    line.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      return line;
    };
    line.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return line;
    };
    line.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return line;
    };
    line.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function() {
    return d3_svg_line(d3_identity);
  };
  var d3_svg_lineInterpolators = d3.map({
    linear: d3_svg_lineLinear,
    "linear-closed": d3_svg_lineLinearClosed,
    step: d3_svg_lineStep,
    "step-before": d3_svg_lineStepBefore,
    "step-after": d3_svg_lineStepAfter,
    basis: d3_svg_lineBasis,
    "basis-open": d3_svg_lineBasisOpen,
    "basis-closed": d3_svg_lineBasisClosed,
    bundle: d3_svg_lineBundle,
    cardinal: d3_svg_lineCardinal,
    "cardinal-open": d3_svg_lineCardinalOpen,
    "cardinal-closed": d3_svg_lineCardinalClosed,
    monotone: d3_svg_lineMonotone
  });
  d3_svg_lineInterpolators.forEach(function(key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });
  function d3_svg_lineLinear(points) {
    return points.length > 1 ? points.join("L") : points + "Z";
  }
  function d3_svg_lineLinearClosed(points) {
    return points.join("L") + "Z";
  }
  function d3_svg_lineStep(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
    if (n > 1) path.push("H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepBefore(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepAfter(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
    return path.join("");
  }
  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
  }
  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {
      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
    }
    return path;
  }
  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
    }
    return tangents;
  }
  function d3_svg_lineBasis(points) {
    if (points.length < 3) return d3_svg_lineLinear(points);
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push("L", pi);
    return path.join("");
  }
  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4) return d3_svg_lineLinear(points);
    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBasisClosed(points) {
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }
  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
  function d3_svg_lineBasisBezier(path, x, y) {
    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }
  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }
  function d3_svg_lineFiniteDifferences(points) {
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }
  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (abs(d) < ε) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
      tangents.push([ s || 0, m[i] * s || 0 ]);
    }
    return tangents;
  }
  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.svg.line.radial = function() {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };
  function d3_svg_lineRadial(points) {
    var point, i = -1, n = points.length, r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] - halfπ;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }
  function d3_svg_area(projection) {
    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
    function area(data) {
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
        return x;
      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
        return y;
      } : d3_functor(y1), x, y;
      function segment() {
        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length) segment();
      return segments.length ? segments.join("") : null;
    }
    area.x = function(_) {
      if (!arguments.length) return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function(_) {
      if (!arguments.length) return x0;
      x0 = _;
      return area;
    };
    area.x1 = function(_) {
      if (!arguments.length) return x1;
      x1 = _;
      return area;
    };
    area.y = function(_) {
      if (!arguments.length) return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function(_) {
      if (!arguments.length) return y0;
      y0 = _;
      return area;
    };
    area.y1 = function(_) {
      if (!arguments.length) return y1;
      y1 = _;
      return area;
    };
    area.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return area;
    };
    area.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? "M" : "L";
      return area;
    };
    area.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function() {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function() {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function() {
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
    }
    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
      };
    }
    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }
    function arc(r, p, a) {
      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
    }
    function curve(r0, p0, r1, p1) {
      return "Q 0,0 " + p1;
    }
    chord.radius = function(v) {
      if (!arguments.length) return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function(v) {
      if (!arguments.length) return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function(v) {
      if (!arguments.length) return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };
  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function() {
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
    function diagonal(d, i) {
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
        x: p0.x,
        y: m
      }, {
        x: p3.x,
        y: m
      }, p3 ];
      p = p.map(projection);
      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
    }
    diagonal.source = function(x) {
      if (!arguments.length) return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function(x) {
      if (!arguments.length) return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function(x) {
      if (!arguments.length) return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };
  function d3_svg_diagonalProjection(d) {
    return [ d.x, d.y ];
  }
  d3.svg.diagonal.radial = function() {
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
    diagonal.projection = function(x) {
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };
  function d3_svg_diagonalRadialProjection(projection) {
    return function() {
      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
      return [ r * Math.cos(a), r * Math.sin(a) ];
    };
  }
  d3.svg.symbol = function() {
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function(x) {
      if (!arguments.length) return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function(x) {
      if (!arguments.length) return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };
  function d3_svg_symbolSize() {
    return 64;
  }
  function d3_svg_symbolType() {
    return "circle";
  }
  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / π);
    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
  }
  var d3_svg_symbols = d3.map({
    circle: d3_svg_symbolCircle,
    cross: function(size) {
      var r = Math.sqrt(size / 5) / 2;
      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
    },
    diamond: function(size) {
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
    },
    square: function(size) {
      var r = Math.sqrt(size) / 2;
      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
    },
    "triangle-down": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
    },
    "triangle-up": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
    }
  });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  d3_selectionPrototype.transition = function(name) {
    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
      time: Date.now(),
      ease: d3_ease_cubicInOut,
      delay: 0,
      duration: 250
    };
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_selectionPrototype.interrupt = function(name) {
    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
  };
  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
  function d3_selection_interruptNS(ns) {
    return function() {
      var lock, activeId, active;
      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
        active.timer.c = null;
        active.timer.t = NaN;
        if (--lock.count) delete lock[activeId]; else delete this[ns];
        lock.active += .5;
        active.event && active.event.interrupt.call(this, this.__data__, active.index);
      }
    };
  }
  function d3_transition(groups, ns, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.namespace = ns;
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function(selection, name) {
    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.selectAll = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          transition = node[ns][id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o; ) {
            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.namespace, this.id);
  };
  d3_transitionPrototype.tween = function(name, tween) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
    return d3_selection_each(this, tween == null ? function(node) {
      node[ns][id].tween.remove(name);
    } : function(node) {
      node[ns][id].tween.set(name, tween);
    });
  };
  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id, ns = groups.namespace;
    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
    } : (value = tween(value), function(node) {
      node[ns][id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function(nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS) this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrTween(b) {
      return b == null ? attrNull : (b += "", function() {
        var a = this.getAttribute(name), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttribute(name, i(t));
        });
      });
    }
    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += "", function() {
        var a = this.getAttributeNS(name.space, name.local), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function(nameNS, tween) {
    var name = d3.ns.qualify(nameNS);
    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function(t) {
        this.setAttribute(name, f(t));
      };
    }
    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
      return f && function(t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.style(priority, name[priority], value);
        return this;
      }
      priority = "";
    }
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleString(b) {
      return b == null ? styleNull : (b += "", function() {
        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
        return a !== b && (i = d3_interpolate(a, b), function(t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, "style." + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function(name, tween, priority) {
    if (arguments.length < 3) priority = "";
    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
      return f && function(t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween("style." + name, styleTween);
  };
  d3_transitionPrototype.text = function(value) {
    return d3_transition_tween(this, "text", value, d3_transition_text);
  };
  function d3_transition_text(b) {
    if (b == null) b = "";
    return function() {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function() {
    var ns = this.namespace;
    return this.each("end.transition", function() {
      var p;
      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
    });
  };
  d3_transitionPrototype.ease = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].ease;
    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function(node) {
      node[ns][id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].delay;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].delay = +value.call(node, node.__data__, i, j);
    } : (value = +value, function(node) {
      node[ns][id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].duration;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
    } : (value = Math.max(1, value), function(node) {
      node[ns][id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function(type, listener) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
      try {
        d3_transitionInheritId = id;
        d3_selection_each(this, function(node, i, j) {
          d3_transitionInherit = node[ns][id];
          type.call(node, node.__data__, i, j);
        });
      } finally {
        d3_transitionInherit = inherit;
        d3_transitionInheritId = inheritId;
      }
    } else {
      d3_selection_each(this, function(node) {
        var transition = node[ns][id];
        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function() {
    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = node[ns][id0];
          d3_transitionNode(node, i, ns, id1, {
            time: transition.time,
            ease: transition.ease,
            delay: transition.delay + transition.duration,
            duration: transition.duration
          });
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id1);
  };
  function d3_transitionNamespace(name) {
    return name == null ? "__transition__" : "__transition_" + name + "__";
  }
  function d3_transitionNode(node, i, ns, id, inherit) {
    var lock = node[ns] || (node[ns] = {
      active: 0,
      count: 0
    }), transition = lock[id], time, timer, duration, ease, tweens;
    function schedule(elapsed) {
      var delay = transition.delay;
      timer.t = delay + time;
      if (delay <= elapsed) return start(elapsed - delay);
      timer.c = start;
    }
    function start(elapsed) {
      var activeId = lock.active, active = lock[activeId];
      if (active) {
        active.timer.c = null;
        active.timer.t = NaN;
        --lock.count;
        delete lock[activeId];
        active.event && active.event.interrupt.call(node, node.__data__, active.index);
      }
      for (var cancelId in lock) {
        if (+cancelId < id) {
          var cancel = lock[cancelId];
          cancel.timer.c = null;
          cancel.timer.t = NaN;
          --lock.count;
          delete lock[cancelId];
        }
      }
      timer.c = tick;
      d3_timer(function() {
        if (timer.c && tick(elapsed || 1)) {
          timer.c = null;
          timer.t = NaN;
        }
        return 1;
      }, 0, time);
      lock.active = id;
      transition.event && transition.event.start.call(node, node.__data__, i);
      tweens = [];
      transition.tween.forEach(function(key, value) {
        if (value = value.call(node, node.__data__, i)) {
          tweens.push(value);
        }
      });
      ease = transition.ease;
      duration = transition.duration;
    }
    function tick(elapsed) {
      var t = elapsed / duration, e = ease(t), n = tweens.length;
      while (n > 0) {
        tweens[--n].call(node, e);
      }
      if (t >= 1) {
        transition.event && transition.event.end.call(node, node.__data__, i);
        if (--lock.count) delete lock[id]; else delete node[ns];
        return 1;
      }
    }
    if (!transition) {
      time = inherit.time;
      timer = d3_timer(schedule, 0, time);
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        timer: timer,
        delay: inherit.delay,
        duration: inherit.duration,
        ease: inherit.ease,
        index: i
      };
      inherit = null;
      ++lock.count;
    }
  }
  d3.svg.axis = function() {
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
    function axis(g) {
      g.each(function() {
        var g = d3.select(this);
        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
        d3.transition(path));
        tickEnter.append("line");
        tickEnter.append("text");
        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
        if (orient === "bottom" || orient === "top") {
          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
        } else {
          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
        }
        lineEnter.attr(y2, sign * innerTickSize);
        textEnter.attr(y1, sign * tickSpacing);
        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
        if (scale1.rangeBand) {
          var x = scale1, dx = x.rangeBand() / 2;
          scale0 = scale1 = function(d) {
            return x(d) + dx;
          };
        } else if (scale0.rangeBand) {
          scale0 = scale1;
        } else {
          tickExit.call(tickTransform, scale1, scale0);
        }
        tickEnter.call(tickTransform, scale0, scale1);
        tickUpdate.call(tickTransform, scale1, scale1);
      });
    }
    axis.scale = function(x) {
      if (!arguments.length) return scale;
      scale = x;
      return axis;
    };
    axis.orient = function(x) {
      if (!arguments.length) return orient;
      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function() {
      if (!arguments.length) return tickArguments_;
      tickArguments_ = d3_array(arguments);
      return axis;
    };
    axis.tickValues = function(x) {
      if (!arguments.length) return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function(x) {
      if (!arguments.length) return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function(x) {
      var n = arguments.length;
      if (!n) return innerTickSize;
      innerTickSize = +x;
      outerTickSize = +arguments[n - 1];
      return axis;
    };
    axis.innerTickSize = function(x) {
      if (!arguments.length) return innerTickSize;
      innerTickSize = +x;
      return axis;
    };
    axis.outerTickSize = function(x) {
      if (!arguments.length) return outerTickSize;
      outerTickSize = +x;
      return axis;
    };
    axis.tickPadding = function(x) {
      if (!arguments.length) return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function() {
      return arguments.length && axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
    top: 1,
    right: 1,
    bottom: 1,
    left: 1
  };
  function d3_svg_axisX(selection, x0, x1) {
    selection.attr("transform", function(d) {
      var v0 = x0(d);
      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
    });
  }
  function d3_svg_axisY(selection, y0, y1) {
    selection.attr("transform", function(d) {
      var v0 = y0(d);
      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
    });
  }
  d3.svg.brush = function() {
    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
    function brush(g) {
      g.each(function() {
        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
        var background = g.selectAll(".background").data([ 0 ]);
        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
        var resize = g.selectAll(".resize").data(resizes, d3_identity);
        resize.exit().remove();
        resize.enter().append("g").attr("class", function(d) {
          return "resize " + d;
        }).style("cursor", function(d) {
          return d3_svg_brushCursor[d];
        }).append("rect").attr("x", function(d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr("y", function(d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
        resize.style("display", brush.empty() ? "none" : null);
        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
        if (x) {
          range = d3_scaleRange(x);
          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
          redrawX(gUpdate);
        }
        if (y) {
          range = d3_scaleRange(y);
          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
          redrawY(gUpdate);
        }
        redraw(gUpdate);
      });
    }
    brush.event = function(g) {
      g.each(function() {
        var event_ = event.of(this, arguments), extent1 = {
          x: xExtent,
          y: yExtent,
          i: xExtentDomain,
          j: yExtentDomain
        }, extent0 = this.__chart__ || extent1;
        this.__chart__ = extent1;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.brush", function() {
            xExtentDomain = extent0.i;
            yExtentDomain = extent0.j;
            xExtent = extent0.x;
            yExtent = extent0.y;
            event_({
              type: "brushstart"
            });
          }).tween("brush:brush", function() {
            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
            xExtentDomain = yExtentDomain = null;
            return function(t) {
              xExtent = extent1.x = xi(t);
              yExtent = extent1.y = yi(t);
              event_({
                type: "brush",
                mode: "resize"
              });
            };
          }).each("end.brush", function() {
            xExtentDomain = extent1.i;
            yExtentDomain = extent1.j;
            event_({
              type: "brush",
              mode: "resize"
            });
            event_({
              type: "brushend"
            });
          });
        } else {
          event_({
            type: "brushstart"
          });
          event_({
            type: "brush",
            mode: "resize"
          });
          event_({
            type: "brushend"
          });
        }
      });
    };
    function redraw(g) {
      g.selectAll(".resize").attr("transform", function(d) {
        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
      });
    }
    function redrawX(g) {
      g.select(".extent").attr("x", xExtent[0]);
      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
    }
    function redrawY(g) {
      g.select(".extent").attr("y", yExtent[0]);
      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
    }
    function brushstart() {
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
      if (d3.event.changedTouches) {
        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
      } else {
        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
      }
      g.interrupt().selectAll("*").interrupt();
      if (dragging) {
        origin[0] = xExtent[0] - origin[0];
        origin[1] = yExtent[0] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
        origin[0] = xExtent[ex];
        origin[1] = yExtent[ey];
      } else if (d3.event.altKey) center = origin.slice();
      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
      d3.select("body").style("cursor", eventTarget.style("cursor"));
      event_({
        type: "brushstart"
      });
      brushmove();
      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= xExtent[1];
            origin[1] -= yExtent[1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }
      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += xExtent[1];
          origin[1] += yExtent[1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }
      function brushmove() {
        var point = d3.mouse(target), moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
            origin[0] = xExtent[+(point[0] < center[0])];
            origin[1] = yExtent[+(point[1] < center[1])];
          } else center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: "brush",
            mode: dragging ? "move" : "resize"
          });
        }
      }
      function move1(point, scale, i) {
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0] != min || extent[1] != max) {
          if (i) yExtentDomain = null; else xExtentDomain = null;
          extent[0] = min;
          extent[1] = max;
          return true;
        }
      }
      function brushend() {
        brushmove();
        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
        d3.select("body").style("cursor", null);
        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
        dragRestore();
        event_({
          type: "brushend"
        });
      }
    }
    brush.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function(z) {
      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
      return brush;
    };
    brush.extent = function(z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        if (x) {
          if (xExtentDomain) {
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
          } else {
            x0 = xExtent[0], x1 = xExtent[1];
            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0) t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          if (yExtentDomain) {
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
          } else {
            y0 = yExtent[0], y1 = yExtent[1];
            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0) t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
      }
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y) x0 = x0[0], x1 = x1[0];
        xExtentDomain = [ x0, x1 ];
        if (x.invert) x0 = x(x0), x1 = x(x1);
        if (x1 < x0) t = x0, x0 = x1, x1 = t;
        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x) y0 = y0[1], y1 = y1[1];
        yExtentDomain = [ y0, y1 ];
        if (y.invert) y0 = y(y0), y1 = y(y1);
        if (y1 < y0) t = y0, y0 = y1, y1 = t;
        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
      }
      return brush;
    };
    brush.clear = function() {
      if (!brush.empty()) {
        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
        xExtentDomain = yExtentDomain = null;
      }
      return brush;
    };
    brush.empty = function() {
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
    };
    return d3.rebind(brush, event, "on");
  };
  var d3_svg_brushCursor = {
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
  };
  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
  var d3_time_formatUtc = d3_time_format.utc;
  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3_time.second = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 1e3) * 1e3);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
  }, function(date) {
    return date.getSeconds();
  });
  d3_time.seconds = d3_time.second.range;
  d3_time.seconds.utc = d3_time.second.utc.range;
  d3_time.minute = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 6e4) * 6e4);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
  }, function(date) {
    return date.getMinutes();
  });
  d3_time.minutes = d3_time.minute.range;
  d3_time.minutes.utc = d3_time.minute.utc.range;
  d3_time.hour = d3_time_interval(function(date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
  }, function(date) {
    return date.getHours();
  });
  d3_time.hours = d3_time.hour.range;
  d3_time.hours.utc = d3_time.hour.utc.range;
  d3_time.month = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setDate(1);
    return date;
  }, function(date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function(date) {
    return date.getMonth();
  });
  d3_time.months = d3_time.month.range;
  d3_time.months.utc = d3_time.month.utc.range;
  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function(x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };
    function tickMethod(extent, count) {
      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
        return d / 31536e6;
      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
    }
    scale.nice = function(interval, skip) {
      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
      if (method) interval = method[0], skip = method[1];
      function skipped(date) {
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
      }
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
        floor: function(date) {
          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
          return date;
        },
        ceil: function(date) {
          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
          return date;
        }
      } : interval));
    };
    scale.ticks = function(interval, skip) {
      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
        range: interval
      }, skip ];
      if (method) interval = method[0], skip = method[1];
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
    };
    scale.tickFormat = function() {
      return format;
    };
    scale.copy = function() {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
    return d.getMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getMinutes();
  } ], [ "%I %p", function(d) {
    return d.getHours();
  } ], [ "%a %d", function(d) {
    return d.getDay() && d.getDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getDate() != 1;
  } ], [ "%B", function(d) {
    return d.getMonth();
  } ], [ "%Y", d3_true ] ]);
  var d3_time_scaleMilliseconds = {
    range: function(start, stop, step) {
      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
    },
    floor: d3_identity,
    ceil: d3_identity
  };
  d3_time_scaleLocalMethods.year = d3_time.year;
  d3_time.scale = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
  };
  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
    return [ m[0].utc, m[1] ];
  });
  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
    return d.getUTCMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getUTCSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getUTCMinutes();
  } ], [ "%I %p", function(d) {
    return d.getUTCHours();
  } ], [ "%a %d", function(d) {
    return d.getUTCDay() && d.getUTCDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getUTCDate() != 1;
  } ], [ "%B", function(d) {
    return d.getUTCMonth();
  } ], [ "%Y", d3_true ] ]);
  d3_time_scaleUtcMethods.year = d3_time.year.utc;
  d3_time.scale.utc = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
  };
  d3.text = d3_xhrType(function(request) {
    return request.responseText;
  });
  d3.json = function(url, callback) {
    return d3_xhr(url, "application/json", d3_json, callback);
  };
  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function(url, callback) {
    return d3_xhr(url, "text/html", d3_html, callback);
  };
  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function(request) {
    return request.responseXML;
  });
  if (typeof define === "function" && define.amd) this.d3 = d3, define('d3',d3); else if (typeof module === "object" && module.exports) module.exports = d3; else this.d3 = d3;
}();
define('services/pieChart',['services/adbFuncs', 'd3'],
    function (adbfuncs, d3) {


        var color = d3.scale.category20();

        return function (chartElement, legendElement, natureTypes, natureTypeShares, width) {
            var legends = d3.select(legendElement);
            var chart = d3.select(chartElement);
            var w = width || Math.max(natureTypes.length * 20, 80);
            var h = w;

            var r = h / 2;

            for (var i = 0; i < natureTypes.length; ++i) {
                legends.append("svg").attr("width", 25).attr("height", 15).append("rect").attr("x", 0).attr("y", 0).attr("width", 15).attr("height", 15).style("fill", color(i)).append("title").text(natureTypes[i].code);
                legends.append("span").text(adbfuncs.firstToUpperCase(natureTypes[i].description));
                if (i !== natureTypes.length - 1) {
                    legends.append("br");
                }
            }

            var vis = chart.append("svg").data([natureTypeShares]).attr("width", w).attr("height", h).append("svg:g").attr("transform", "translate(" + r + "," + r + ")");
            var pie = d3.layout.pie().value(function(d) {
                 return d.value;
            });

            // declare an arc generator function
            var arc = d3.svg.arc().outerRadius(r);

            // select paths, use arc generator to draw
            var arcs = vis.selectAll("g.slice").data(pie).enter().append("svg:g").attr("class", "slice");

            arcs.append("svg:path")
                .attr("fill", function (d, i) {
                    return color(i);
                })
                .attr("class", "arc")
                .attr("d", function (d) {
                    return arc(d);

                }).append("title").text(function (d, i) {
                    return natureTypes[i].code;
                });

        };
    });

define('viewmodels/mapOl3',['services/logger', 'durandal/app', "knockout", 'jquery', 'viewmodels/nav', 'services/application', 'services/dataServices', 'services/layerConfig', 'services/codeLists', 'services/resource'],
    function (logger, app, ko, $, nav, application, dataServices, layerConfig, codelists, resource) {
        "use strict";
        var title = 'Map',
            viewportState = application.viewportState,
            mapLoadedDfd = $.Deferred(),
            mapLoaded = mapLoadedDfd.promise(),
            mapViewPortSetDfd = $.Deferred(),
            mapViewPortSet = mapViewPortSetDfd.promise(),
            vm,
            areaDisplayLayerSource = new ol.source.Vector({wrapX: false}),
            selectionLayerSource = new ol.source.Vector({wrapX: false}),
            polygonLayerSource = new ol.source.Vector({wrapX: false}),
            polygonLayerClusterSource = new ol.source.Vector({wrapX: false}),
            precisionVectorSource = new ol.source.Vector({projection: 'EPSG:4326'}),

            maxClusterCircleSize = 25,
            clusterDistance = 50,
            colorScale,

            heatmapLayerSource = new ol.source.Vector({wrapX: false}),
            maxHeatmapObservationCount = 0,

            polygonLayerCluster = new ol.source.Cluster({
                geometryFunction: function (feature) {
                    var geometry = feature.getGeometry();
                    if (geometry instanceof ol.geom.Point)
                        return geometry;
                    if (geometry instanceof ol.geom.Polygon)
                        return geometry.getInteriorPoint();    // find center for polygons
                    return null; // Ignore unless known geometrytype
                },
                distance: clusterDistance, // formula to set cluster distance
                source: polygonLayerClusterSource
            }),
            draw = new ol.interaction.Draw({
                source: selectionLayerSource,
                type: 'Polygon'
            }),

            activate = function (center, zoom, background, id, filter) {
                //logger.log(title + ' View activate', null, title, true);
                viewportState.center(center);
                viewportState.zoom(zoom);
                viewportState.background(background);
                viewportState.id(id);
                if (vm && vm.map) {
                    // todo: find better solution to this than using setTimeout! Need to run vm.map.updateSize(); after all rendering is complete
                    // update size is necessary if window size has been changed while in a different view.
                    setTimeout(function () {
                        vm.map.updateSize();
                    }, 500);

                }
                if (filter) {
                    application.parseUrlFilter(filter);
                }

                app.trigger('mapview:activate', '');
            },

            compositionComplete = function () {

                vm.res = resource.res;

                vm.polygonLayer = new ol.layer.Vector({
                    source: polygonLayerSource,
                    style: layerConfig.observationStyleFunc
                });

                vm.precisionVectorLayer = new ol.layer.Vector({
                    source: precisionVectorSource
                });

                var styleCache = {};
                vm.clusterColorScale = d3.scale.linear()
                    //.domain([1, 500, 5000, 1000000])
                    //.range(["lightblue", "blue", "darkblue", "black"]);
                    .domain([1, 100000])
                    .range(["#EBB875", "#DE8819"]);

                vm.heatmapLayer = new ol.layer.Heatmap({
                    source: heatmapLayerSource,
                    radius: 12
                });

                heatmapLayerSource.on('addfeature', function (event) {
                    var observationCount = event.feature.get('ObservationCount');
                    var weight = parseFloat(observationCount / (maxHeatmapObservationCount / 2));
                    event.feature.set('weight', weight);
                });

                vm.polygonClusterLayer = new ol.layer.Vector({
                    source: polygonLayerCluster,
                    style: function (feature, resolution) {
                        var serverClustering = false;
                        var featureArray = feature.get('features');
                        if (featureArray && featureArray.length > 0) {
                            if (featureArray[0].get('ObservationCount')) {
                                serverClustering = true;
                            }
                        }
                        var nFeatures = 0;
                        if (serverClustering) {
                            featureArray.forEach(function (f) {
                                nFeatures = nFeatures + f.get('ObservationCount');
                            });
                        } else {
                            nFeatures = featureArray.length;
                        }
                        var clusterText = nFeatures.toString();
                        if (nFeatures >= 1000 /*&&  nFeatures < 1000000*/) {
                            clusterText = Math.floor(nFeatures / 1000) + "'";
                        }
                        //if (nFeatures >= 1000000) {
                        //    clusterText = Math.floor(nFeatures/1000000) + "''";
                        //}
                        var style = styleCache[clusterText];   // get from cache if it has already been created

                        if (!style) {

                            style = [new ol.style.Style({
                                image: new ol.style.Circle({
                                    radius: Math.min(10 + nFeatures / 5500, maxClusterCircleSize),    // formula to calculate size of circle
                                    //stroke: new ol.style.Stroke({
                                    //    color: '#fff',
                                    //    width: 1.3
                                    //}),
                                    fill: new ol.style.Fill({
                                        //color: '#3399CC'
                                        color: vm.clusterColorScale(nFeatures) //[51, 153, 204, Math.min(0.8, 0.3 + (nFeatures / 70))] // formula to calculate transparency of circle
                                    })
                                }),
                                text: new ol.style.Text({
                                    text: clusterText,
                                    fill: new ol.style.Fill({
                                        color: '#fff'
                                    })
                                })
                            })];
                            styleCache[clusterText] = style;   // Cache each different style created
                        }
                        return style;
                    }
                });

                // selectionLayer: The layer we draw in / use for filtering, has only one geometry obj
                vm.selectionLayer = new ol.layer.Vector({
                    source: selectionLayerSource,
                    style: new ol.style.Style({
                        stroke: new ol.style.Stroke({
                            color: '#00f',
                            width: 1.0
                        }),
                        fill: new ol.style.Fill({
                            color: [51, 153, 204, 0.05]
                        })
                    })
                });

                // areaLayer - polygons that should be displayed, but not added to filter
                vm.areaLayer = new ol.layer.Vector({
                    source: areaDisplayLayerSource,
                    style: new ol.style.Style({
                        stroke: new ol.style.Stroke({
                            color: '#00f',
                            width: 1.0
                        }),
                        fill: new ol.style.Fill({
                            color: [51, 153, 204, 0.02] // note transparency for polygon, almost transparent.
                        })
                    })
                });

                application.viewportState.background.subscribe(function (value) {
                      vm.selectedBaseLayer(value);
                  });
                  vm.selectedBaseLayer.subscribe(function (newValue) {
                      vm.changeBaseLayer(newValue);
                  });
                  vm.changeBaseLayer = function (layerName) {
                      //switch (layerName) {
                      //    case "svalbard":
                      //        {
                      //            proj4.defs("EPSG:25833", "+proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs");
                      //            var proj25833 = ol.proj.get('EPSG:25833');
                      //            proj25833.setExtent([-2500000, 3500000, 3045984, 9045984]);
  
                      //            vm.map.setView(new ol.View({
                      //                projection: 'EPSG:25833',
                      //                center: [564800, 8741800],
                      //                zoom: 4
                      //            }));
  
                      //        application.filter.EpsgCode = "25833";
                      //        break;
                      //    }
                      //    default:
                      //    {
                      //        application.filter.EpsgCode = "32633";
                      //        break;
                      //    }
                      //}
                      console.log("change layer", layerName);
                      if (typeof layerName === "string" && layerName.length > 0) {
                          var layer = layerConfig.getBaseLayerFromPool(layerName);
                          if (layer) {
                              if (vm.map.getLayers().getLength() > 1) {
                                  vm.map.getLayers().removeAt(1);
                              }
                              vm.map.getLayers().insertAt(1, layer);
                              viewportState.background(layerName);
                          }
                      }
                  };

                vm.increaseOpacity = function(layer) {
                    var layer = vm.map.getLayers().item(layer);
                    if (layer) {
                        layer.setOpacity(Math.min(layer.getOpacity() + .1, 1));
                    }
                };
                vm.decreaseOpacity = function (layer) {
                    var layer = vm.map.getLayers().item(layer);
                    if (layer) {
                        layer.setOpacity(Math.max(layer.getOpacity() - .1, 0));
                    }
                };

                vm.setOpacity = function (value) {
                    var layer =  vm.map.getLayers().item(1);
                    if (layer) {
                        layer.setOpacity(value);
                    }
                };

                vm.toggleOverlayLayer = function (layerName) {
                    if (typeof layerName === "string" && layerName.length > 0) {
                        var layers = vm.map.getLayers().getArray();
                        for (var i = 0; i < layers.length; i++) {
                            if (layers[i].name === layerName) {
                                vm.map.getLayers().remove(layers[i]);
                                return;
                            }
                        }
                        var layer = layerConfig.getOverlayLayerFromPool(layerName);
                        if (layer) {
                            vm.map.getLayers().insertAt(3, layer); // Add overlay as layer nr 3, in front of background
                        }
                    }
                };

                vm.select = new ol.interaction.Select({
                    wrapX: false,
                    layers: [vm.polygonLayer, vm.polygonClusterLayer],
                    style: layerConfig.observationSelectedStyleFunc

                    //,style: [vm.selectPointStyle]
                });

                vm.select.on('select', function (event) {
                    if (!vm.drawing()) {
                        var feat = event.target.getFeatures().getArray()[0];
                        if (feat) {
                            vm.featureSelected(event, feat);
                        } else {
                            precisionVectorSource.clear();
                        }
                    }
                });

                vm.map = new ol.Map({
                    interactions: ol.interaction.defaults().extend([
                        vm.select,
                        new ol.interaction.DragRotateAndZoom()
                    ]),
                    controls: ol.control.defaults().extend([
                        new ol.control.FullScreen()
                    ]).extend([
                        new ol.control.ScaleLine({
                            units: 'metric'
                        })//,
                        //new ol.control.MousePosition({
                        //    coordinateFormat: ol.coordinate.createStringXY(4),
                        //    projection: 'EPSG:' + application.filter.EpsgCode(),
                        //    // comment the following two lines to have the mouse position
                        //    // be placed within the map.
                            
                        //    undefinedHTML: '&nbsp;'
                        //})
                    ]),
                    layers: [layerConfig.baseLayerPool[5], layerConfig.baseLayerPool[0], vm.selectionLayer, vm.areaLayer, vm.polygonLayer, vm.polygonClusterLayer, vm.precisionVectorLayer],
                                        target: document.getElementById('map'),
                    view: new ol.View({
                        // projection: 'EPSG:3857',
                        projection: 'EPSG:' + application.filter.EpsgCode(),
                        maxZoom: 18,
                        //center: [1800000, 9700000],
                        center: ol.proj.fromLonLat([-74.0064, 40.7142]),
                        zoom: 5
                    })
                });
                vm.map.on("moveend", vm.changeView, this);
                vm.map.on("updatesize", vm.changeView, this);

                vm.map.getView().on('change:resolution', function () {
                    var vpi = vm.getViewportInfo();
                    var zoom = vpi.zoom;

                    if (vm.heatmapLayer.getVisible()) {
                        vm.heatmapLayer.setRadius(8 + zoom * 2);
                    }
                });

                app.on('mapview:activate').then(function () {
                    // If filter was changed while we were in another view, reload Nature areas (polygons/centerpoints) to update mapview
                    if (vm.reloadNatureAreasOnActivate()) {
                        application.filter.ForceRefreshToggle(!application.filter.ForceRefreshToggle());
                        vm.reloadNatureAreasOnActivate(false);
                    }
                });
                app.on('main:resized').then(function (elem) {
                    if (nav.activeView() === 'map') {
                        vm.map.updateSize();
                    }
                });
                app.on('resource:languageChanged').then(function (elem) {
                    if (nav.activeView() === 'map') {
                        vm.translateOlTooltips();
                    }
                });
                $("body").keydown(function (e) {
                    if (e.ctrlKey) {
                        if (e.which === 38) {   // 38: Arrow up
                            vm.increaseOpacity(0);
                            vm.increaseOpacity(1);
                        }
                        if (e.which === 40) {   // 40: Arrow down
                            vm.decreaseOpacity(0);
                            vm.decreaseOpacity(1);
                        }
                    }
                });

                selectionLayerSource.on('addfeature', vm.selectionPolygonAdded, this);

                vm.translateOlTooltips = function() {
                    // translate some ol3-texts
                    $(".ol-attribution > button").attr("title", vm.res().olAttribution);
                    $(".ol-zoom-in").attr("title", vm.res().olZoomIn);
                    $(".ol-zoom-out").attr("title", vm.res().olZoomOut);
                    $(".ol-full-screen-false").attr("title", vm.res().olFullScreenFalse);
                    $(".ol-full-screen-true").attr("title", vm.res().olFullScreenTrue);
                    $(".ol-rotate-reset").attr("title", vm.res().olRotateReset);
                    
                };
                vm.translateOlTooltips();

                vm.reloadLocations = function(keepOld, addBounds) {
                    //var filter = application.filter;
                    var filter = application.searchFilter();
                    filter.BoundingBox = application.filter.BoundingBox;

                    if (keepOld && addBounds.bounds && addBounds.bounds.length > 0) {
                        filter.BoundingBox = vm.boundsToWkt(addBounds);
                    }
                    var promise = dataServices.searchLocations(filter);
                    promise.then(function(geojsonObject) {
                            if (filter.CenterPoints() === false) {
                                if (keepOld && addBounds.bounds && addBounds.bounds.length > 0) {
                                    // increase record of loaded bounds
                                    var minX = addBounds.bounds[0],
                                        minY = addBounds.bounds[1],
                                        maxX = addBounds.bounds[2],
                                        maxY = addBounds.bounds[3];
                                    var lminX = vm.loadedBounds()[0],
                                        lminY = vm.loadedBounds()[1],
                                        lmaxX = vm.loadedBounds()[2],
                                        lmaxY = vm.loadedBounds()[3];

                                    vm.loadedBounds(
                                        [
                                            Math.min(minX, lminX),
                                            Math.min(minY, lminY),
                                            Math.max(maxX, lmaxX),
                                            Math.max(maxY, lmaxY)
                                        ]
                                    );
                                } else {
                                    // store bounds for fetched if correct grouping
                                    vm.loadedBounds(vm.getBounds());
                                }
                            } else {
                                vm.loadedBounds(undefined);
                            }

                            if (!keepOld) {
                                polygonLayerSource.clear();
                                polygonLayerClusterSource.clear();
                                heatmapLayerSource.clear();
                            }

                            if (filter.CenterPoints() === false) {
                                polygonLayerSource.addFeatures(
                                    new ol.format.GeoJSON({ defaultDataProjection: "EPSG: " + application.filter.EpsgCode() })
                                    .readFeatures(geojsonObject, { dataProjection: "EPSG: " + application.filter.EpsgCode() })
                                );
                            } else {
                                //if (false) {

                                //    var featureCollection = JSON.parse(geojsonObject);

                                //    maxHeatmapObservationCount = 0;
                                //    featureCollection.features.forEach(function(f) {
                                //        maxHeatmapObservationCount = Math
                                //            .max(maxHeatmapObservationCount, f.properties.ObservationCount);
                                //    });

                                //    heatmapLayerSource.addFeatures(
                                //        new ol.format.GeoJSON({ defaultDataProjection: "EPSG: 32633" })
                                //        .readFeatures(geojsonObject, { dataProjection: "EPSG: 32633" })
                                //    )
                                //} else {
                                polygonLayerClusterSource.addFeatures(
                                    new ol.format.GeoJSON({ defaultDataProjection: "EPSG: " + application.filter.EpsgCode() })
                                    .readFeatures(geojsonObject, { dataProjection: "EPSG: " + application.filter.EpsgCode() })
                                );
                                //}
                            }
                            vm.isLoading(false);
                        },
                        function(reason) {
                            // failed
                            if (reason.statusText !== "Ignore") {
                                console.debug(reason.statusText);
                                application.setFooterWarning(vm.res().warningLoadRecords);
                            }
                            vm.isLoading(false);
                        }
                    );

                };

                vm.startReloadLocations = function (keepOld, addBounds) {
                    if (nav.activeView() === 'map') {
                        vm.isLoading(true);

                        if (keepOld) {
                            // No need to count if we're just adding points
                            vm.reloadLocations(keepOld, addBounds);
                        } else {
                            dataServices.getObservationCount(application.listFilter(), 'Map').then(function (result) {
                                //console.debug(result);
                                application.totalCount(result || 0);
                                vm.updateViewport();

                                vm.reloadLocations(keepOld, addBounds);
                            }, function (reason) {
                                // failed
                                if (reason.statusText !== "Ignore") {
                                    console.debug(reason.statusText);
                                    application.setFooterWarning(vm.res().warningServerUnavailable);
                                }
                            });
                        }
                    } else {
                        vm.reloadNatureAreasOnActivate(true);
                    }

                };
                application.listFilterChanged.subscribe(function (value) {
                    vm.startReloadLocations();
                });

                application.filterChanged.subscribe(function (value) {
                    if (application.filter.CenterPoints() === false) {
                        if (application.filter.BoundingBox() && vm.loadedBounds()) {
                            var bounds = vm.getBounds();
                            var minX = bounds[0], minY = bounds[1], maxX = bounds[2], maxY = bounds[3];
                            var lminX = vm.loadedBounds()[0], lminY = vm.loadedBounds()[1], lmaxX = vm.loadedBounds()[2], lmaxY = vm.loadedBounds()[3];
                            var addBounds = {
                                direction: "",
                                bounds: []
                            };

                            if (minX >= lminX && minY >= lminY && maxX <= lmaxX && maxY <= lmaxY) {
                                // New bounds completely inside old bounds, do not need to fetch.
                                //console.debug("Bruker cachede observasjoner :)");
                                return;
                            } else if (minX >= lminX && minY >= lminY && maxX <= lmaxX && maxY >= lmaxY) {
                                //console.debug("Laster flere observasjoner i nord");
                                // New bounds on top+overlapping old
                                //  ..\\\..
                                //  //XXX//
                                //  ///////
                                addBounds.bounds = [lminX, lmaxY, lmaxX, maxY];
                                vm.startReloadLocations(true, addBounds);
                            } else if (minX >= lminX && minY >= lminY && maxX >= lmaxX && maxY <= lmaxY) {
                                //console.debug("Laster flere observasjoner i øst");
                                // New bounds right+overlapping old
                                //  ///////..
                                //  ////XXX\\
                                //  ////XXX\\
                                //  ///////..
                                addBounds.bounds = [lmaxX, lminY, maxX, lmaxY];
                                vm.startReloadLocations(true, addBounds);
                            } else if (minX >= lminX && minY <= lminY && maxX <= lmaxX && maxY <= lmaxY) {
                                //console.debug("Laster flere observasjoner i sør");
                                // New bounds bottom+overlapping old
                                //  ///////
                                //  //XXX//
                                //  ..\\\..
                                addBounds.bounds = [lminX, minY, lmaxX, lmaxY];
                                vm.startReloadLocations(true, addBounds);
                            } else if (minX <= lminX && minY >= lminY && maxX <= lmaxX && maxY <= lmaxY) {
                                //console.debug("Laster flere observasjoner i vest");
                                // New bounds left+overlapping old
                                //  ..///////
                                //  \\XXX////
                                //  \\XXX////
                                //  ..///////
                                addBounds.bounds = [minX, lminY, lminX, lmaxY];
                                vm.startReloadLocations(true, addBounds);
                            } else if (minX >= lminX && minY <= lminY && maxX >= lmaxX && maxY <= lmaxY) {
                                //console.debug("Laster flere observasjoner i sør-øst");
                                // New bounds bottom-right corner+overlapping old
                                //  ////////.
                                //  ////////.
                                //  //////XX\
                                //  ......\\\
                                addBounds.direction = "se";
                                addBounds.bounds = [minX, minY, maxX, lmaxY, lmaxX, lminY];
                                vm.startReloadLocations(true, addBounds);
                            } else if (minX <= lminX && minY >= lminY && maxX <= lmaxX && maxY >= lmaxY) {
                                //console.debug("Laster flere observasjoner i nord-vest");
                                // New bounds bottom-right corner+overlapping old
                                //  \\\......
                                //  \XX//////
                                //  .////////
                                //  .////////
                                addBounds.direction = "nw";
                                addBounds.bounds = [minX, lminY, lmaxX, maxY, lminX, lmaxY];
                                vm.startReloadLocations(true, addBounds);
                            } else if (minX >= lminX && minY >= lminY && maxX >= lmaxX && maxY >= lmaxY) {
                                //console.debug("Laster flere observasjoner i nord-øst");
                                // New bounds top-right corner+overlapping old
                                //  ......\\\
                                //  //////XX\
                                //  ////////.
                                //  ////////.
                                addBounds.direction = "ne";
                                addBounds.bounds = [lminX, maxY, maxX, lminY, lmaxX, lmaxY];
                                vm.startReloadLocations(true, addBounds);
                            } else if (minX <= lminX && minY <= lminY && maxX <= lmaxX && maxY <= lmaxY) {
                                //console.debug("Laster flere observasjoner i sør-vest");
                                // New bounds top-right corner+overlapping old
                                //  .////////
                                //  .////////
                                //  \\XX/////
                                //  \\\\.....
                                addBounds.direction = "sw";
                                addBounds.bounds = [minX, lmaxY, lmaxX, minY, lminX, lminY];
                                vm.startReloadLocations(true, addBounds);
                            } else {
                                // reload
                                //console.debug("Laster hele utsnitt på nytt :(");
                                //console.debug("minX " + (minX <= lminX ? "<=" : ">") + " lminX,\r\n" +
                                //    "minY " + (minY <= lminY ? "<=" : "> ") + " lminY,\r\n" +
                                //    "maxX " + (maxX <= lmaxX ? "<=" : "> ") + " lmaxX,\r\n" +
                                //    "maxY " + (maxY <= lmaxY ? "<=" : "> ") + " lmaxY\r\n");
                                vm.startReloadLocations();
                            }

                        }
                    }
                });

                mapLoadedDfd.resolve();
            };

        vm = {
            compositionComplete: compositionComplete,
            activate: activate,
            title: title,
            text: ko.observable("Map view"),
            visible: ko.observable(true),
            map: undefined,
            baseLayerVisible: ko.observable(false),
            reloadNatureAreasOnActivate: ko.observable(false),  // is set to true if filter changed when not in map view
            isLoading: ko.observable(true).extend({rateLimit: 100}),       // Small delay before showing loading-gif
            drawing: ko.observable(false),
            selectedBaseLayer: ko.observable("greyMap"),
            loadedBounds: ko.observable(),
            selectionLayer: undefined,
            areaLayer: undefined,
            polygonLayer: undefined,
            features: undefined,
            hasChanged: true,
            updateSelection: function () {
                mapViewPortSet.then(function () {
                    //logger.log(title + " updateSelection", null, title, true);
                    if (!viewportState.zoom()) {
                        viewportState.zoom(vm.map.getView().getZoom());
                    }
                });
            },

            redrawSelectionPolygon: function () {
                var gmWktPolygon = application.filter.Geometry();
                if (gmWktPolygon && gmWktPolygon.length > 0) {
                    if (selectionLayerSource.getFeatures() && selectionLayerSource.getFeatures().length > 0) {
                        selectionLayerSource.removeFeature(selectionLayerSource.getFeatures()[0]);
                    }
                    var wkt = new ol.format.WKT();
                    var geometry = wkt.readFeature(gmWktPolygon);
                    var feature = new ol.Feature({
                        geometry: geometry.getGeometry()
                        // { accuracy: "0", siteType: "0", siteName: "Select" });
                    });
                    feature.fid = -1;
                    selectionLayerSource.addFeatures([feature]);
                }
            },

            boundsToWkt: function (addbounds) {
                var minX, minY, maxX, maxY, centerX, centerY;

                var bounds = addbounds.bounds ? addbounds.bounds : addbounds;
                switch (bounds.length) {
                    case 4:
                        minX = bounds[0], minY = bounds[1], maxX = bounds[2], maxY = bounds[3];
                        return "POLYGON ((" +
                            minX + " " + minY + "," +
                            maxX + " " + minY + "," +
                            maxX + " " + maxY + "," +
                            minX + " " + maxY + "," +
                            minX + " " + minY + "))";
                    case 6:
                        minX = bounds[0], minY = bounds[1], maxX = bounds[2], maxY = bounds[3],
                            centerX = bounds[4], centerY = bounds[5];
                        switch (addbounds.direction) {
                            case "nw":
                            case "sw":
                                return "POLYGON ((" +
                                    minX + " " + minY + "," +
                                    minX + " " + maxY + "," +
                                    maxX + " " + maxY + "," +
                                    maxX + " " + centerY + "," +
                                    centerX + " " + centerY + "," +
                                    centerX + " " + minY + "," +
                                    minX + " " + minY + "))";
                            case "ne":
                            case "se":
                                return "POLYGON ((" +
                                    minX + " " + minY + "," +
                                    maxX + " " + minY + "," +
                                    maxX + " " + maxY + "," +
                                    centerX + " " + maxY + "," +
                                    centerX + " " + centerY + "," +
                                    minX + " " + centerY + "," +
                                    minX + " " + minY + "))";

                        }
                    default:
                        return "POLYGON EMPTY";
                }
            },
            getBounds: function () {
                if (mapViewPortSet.state() === "resolved") {
                    var vpi = vm.getViewportInfo();
                    return vpi.bounds;
                }
                return "";
            },
            getBoundingBox: function () {
                return vm.boundsToWkt(vm.getBounds());
            },
            getViewportInfo: function () {
                if (!vm.map) {
                    return null;
                }
                var prop = vm.map.getView().getProperties();
                if (prop) {
                    var lon = parseFloat(prop.center[0]).toFixed(0),
                        lat = parseFloat(prop.center[1]).toFixed(0),
                        result = {
                            zoom: vm.map.getView().getZoom(),
                            lon: lon,
                            lat: lat,
                            resolution: prop.resolution,
                            rotation: prop.rotation,
                            center: lon + "," + lat,
                            bounds: vm.map.getView().calculateExtent(vm.map.getSize())
                        };
                    return result;
                }
                return null;
            },
            changeView: function () {
                var vpi = vm.getViewportInfo();
                viewportState.zoom(vpi.zoom);
                viewportState.center(vpi.center);
                if (!viewportState.background()) {
                    viewportState.background(application.config.initialBaseMapLayer);
                }
                //viewportState.background(vm.map.getLayers().getArray()[0].name);    // to get current
            },

            featureSelected: function (event, feature) {
                //var coordinate = event.mapBrowserEvent.coordinate;
                //vm.overlay.setPosition(coordinate);

                if (feature && feature.getId()) {

                    var locationFilter = application.locationFilter();
                    locationFilter.LocationId = feature.getId();

                    dataServices.searchObservations(locationFilter).then(function (data) {
                        data.geometryType = feature.getGeometry().getType();
                        application.currentFeature(data);
                        if ($(".ol-full-screen > button.ol-full-screen-true").length > 0){
                            $(".ol-full-screen > button").click();
                        }

                        app.trigger("currentFeatureChanged:trigger");
                    }, function (reason) {
                        // failed
                        if (reason.statusText !== "Ignore") {
                            console.debug(reason.statusText);
                            application.setFooterWarning(vm.res().warningLoadRecordDetails);
                        }
                    });
                } else {
                    // not a feature selected, zoom in instead
                    var vpi = vm.getViewportInfo();
                    vm.map.getView().setCenter(event.mapBrowserEvent.coordinate);
                    vm.map.getView().setZoom(vpi.zoom + 2);
                    precisionVectorSource.clear();
                    selectionLayerSource.clear();
                }
            },

            drawPrecisionCircle: function (centerpoint, radius) {
                var view = vm.map.getView();
                var projection = view.getProjection();
                var resolutionAtEquator = view.getResolution();
                //var center = vm.map.getView().getCenter();
                var pointResolution = ol.proj.getPointResolution(projection, resolutionAtEquator, centerpoint);
                var resolutionFactor = resolutionAtEquator / pointResolution;
                radius = radius / ol.proj.METERS_PER_UNIT.m * resolutionFactor;


                var circle = new ol.geom.Circle(centerpoint, radius);
                var circleFeature = new ol.Feature(circle);
                precisionVectorSource.clear();
                precisionVectorSource.addFeature(circleFeature);
            },

            removePolygon: function () {
                selectionLayerSource.clear();
            },
            removeAreas: function () {
                while (areaDisplayLayerSource.getFeatures().length > 1) {
                    areaDisplayLayerSource.removeFeature(areaDisplayLayerSource.getFeatures()[0]);
                }
                areaDisplayLayerSource.clear();
            },
            activateDrawPolygon: function () {
                vm.map.addInteraction(draw);
                vm.drawing(true);
            },
            deactivateDrawPolygon: function () {
                vm.map.removeInteraction(draw);
                vm.drawing(false);
            },
            selectionPolygonAdded: function (e) {
                while (selectionLayerSource.getFeatures().length > 1) {
                    selectionLayerSource.removeFeature(selectionLayerSource.getFeatures()[0]);
                }

                var wkt = new ol.format.WKT();
                vm.deactivateDrawPolygon();
                app.trigger('drawPolygon:deactivate');

                var wktGeometry = wkt.writeGeometry(selectionLayerSource.getFeatures()[0].getGeometry());

                var area_m = selectionLayerSource.getFeatures()[0].getGeometry().getArea();
                var areaKm = area_m / 1000 / 1000;
                //console.log('area: ', areaKm, 'km²');

                application.filter.Geometry(wktGeometry);
                app.trigger('currentSelection:add', parseFloat(areaKm).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                // todo: do not call fit if activated by bookmark! 
                vm.fitSelectionPolygon();

            },
            extendExtent: function (initial, extension) {
                var result = [
                    Math.min(initial[0], extension[0]),
                    Math.min(initial[1], extension[1]),
                    Math.max(initial[2], extension[2]),
                    Math.max(initial[3], extension[3])];
                return result;
            },
            fitSelectionPolygon: function () {
                var geom;
                var values = false;
                var extent = [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY,
                    Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY];
                if (areaDisplayLayerSource && areaDisplayLayerSource.getFeatures()) {
                    areaDisplayLayerSource.getFeatures().forEach(function (f) {
                        geom = f.getGeometry();
                        var myExtent = geom.getExtent();
                        extent = vm.extendExtent(extent, myExtent);
                        values = true;
                    });
                }
                if (selectionLayerSource && selectionLayerSource.getFeatures()) {
                    selectionLayerSource.getFeatures().forEach(function (f) {
                        geom = f.getGeometry();
                        var myExtent = geom.getExtent();
                        extent = vm.extendExtent(extent, myExtent);
                        values = true;
                    });
                }
                if (values) {
                    vm.map.getView().fit(extent, vm.map.getSize(),
                        {
                            padding: [100, 150, 100, 150], //  top, right, bottom and left padding
                            nearest: true
                        });
                } else if (application.filter.LocationId()) {
                    dataServices.searchObservations(application.locationFilter()).then(function (data) {
                        vm.map.getView().setCenter(ol.proj.transform([data[0].Longitude, data[0].Latitude], 'EPSG:4326', 'EPSG:' + application.filter.EpsgCode()));
                    }, function (reason) {
                        // failed
                        if (reason.statusText !== "Ignore") {
                            console.debug(reason.statusText);
                            application.setFooterWarning(vm.res().warningLoadRecordDetails);
                        }
                    });
                }
            }
        };

        application.filter.Geometry.subscribe(function (polygon) {
            logger.log("polygon changed", null, title);
            if (!polygon) {
                vm.removePolygon();
            } else {
                vm.redrawSelectionPolygon();
            }

        });

        vm.updateViewport = function () {
            if (mapViewPortSet.state() === "resolved") {
                var vpi = vm.getViewportInfo();

                if (application.totalCount() < application.config.maxShowObservations) {
                    // Few points, show them all
                    vm.polygonLayer.setVisible(true);
                    vm.polygonClusterLayer.setVisible(false);
                    vm.heatmapLayer.setVisible(false);
                    application.filter.GroupBy(codelists.areaTypes.Undefined);
                    application.filter.CenterPoints(false);
                    application.filter.BoundingBox("");
                } else {
                    // Add bounding box to filter if zoom > a limit
                    if (vpi.zoom >= application.config.useBoundingBoxLimit) {
                        application.filter.BoundingBox(vm.boundsToWkt(vpi.bounds));
                    } else {
                        if (application.filter.BoundingBox() !== "") {
                            application.filter.BoundingBox("");
                        }
                    }

                    var municipalityLimit = 10;

                    //if (application.filter.Geometry().length > 0){
                    //    // Don't group on county/municipality if a polygon is active in the filter
                    //    application.filter.GroupBy(codelists.areaTypes.Undefined);
                    //} else {
                    if (vpi.zoom < municipalityLimit) {
                        if (application.filter.GroupBy() !== codelists.areaTypes.Municipality) {
                            application.filter.GroupBy(codelists.areaTypes.Municipality);
                        }
                    } else {
                        if (application.filter.GroupBy() !== codelists.areaTypes.Undefined) {
                            application.filter.GroupBy(codelists.areaTypes.Undefined);
                        }
                    }
                    //}

                    // Show centerpoints instead of polygons if zoom < a limit
                    vm.polygonLayer.setVisible(vpi.zoom >= application.config.loadCenterPointLimit);
                    vm.polygonClusterLayer.setVisible(vpi.zoom < application.config.loadCenterPointLimit);
                    vm.heatmapLayer.setVisible(false);
                    var useCenterPoints = vpi.zoom < application.config.loadCenterPointLimit;
                    if (application.filter.CenterPoints() !== useCenterPoints) {
                        application.filter.CenterPoints(useCenterPoints);
                    }
                    //application.listAvailable(vpi.zoom >= application.config.loadCenterPointLimit);

                }

                vm.updateSelection();
            }
        };
       
        application.viewportStateChanged.subscribe(function (value) {
            mapLoaded.then(function () {
                var vpi = vm.getViewportInfo();
                if (!vpi || value.zoom() !== vpi.zoom || value.center() !== vpi.center) {
                    var lonlat = value.center().split(","),
                        lon = parseFloat(lonlat[0]),
                        lat = parseFloat(lonlat[1]),
                        centerPoint = [lon, lat];

                    vm.map.getView().setCenter(centerPoint);
                    vm.map.getView().setZoom(value.zoom());
                    vm.selectedBaseLayer(value.background());
                    mapViewPortSetDfd.resolve();
                    // add overlay layers from local storage when the map is loaded
                    vm.map.layers = eval(application.layers);
                    for (var i = 0; i < vm.map.layers.length; i++) {
                        var layer = layerConfig.getOverlayLayerFromPool(vm.map.layers[i]);
                        if (layer) {
                            vm.map.getLayers().insertAt(3, layer); // Add overlay as layer nr 3, in front of background
                        }
                    }
                }
            });
            vm.updateViewport();
        });
        return vm;
    });

define('viewmodels/treeview',['services/logger', "knockout", 'durandal/app', 'services/dataServices', "services/application", "viewmodels/mapOl3", 'viewmodels/nav', 'services/codeLists', "services/knockoutExtensions", 'services/adbFuncs', 'services/layerConfig', 'services/config', 'services/resource'],
    function (logger, ko, app, dataServices, application, map, nav, codeLists, jqAutoComplete, adb, layerConfig, config, resource) {
        var title = "treeview",
            vm = {
                activate: function() {
                    logger.log(title + ' View Activated', null, title, true);
                },
                toggleCheckedCollapse: ko.observable(true),
                admAreaMatches: ko.observableArray(),
                collectionMatches: ko.observableArray(),
                datasetMatches: ko.observableArray(),
                artNames: ko.observableArray(),
                taxons: ko.observableArray(), //gui version of application.filter.TaxonIds
                areas: ko.observableArray(), //gui version of application.filter.AreaIds
                collections: ko.observableArray(), //gui version of application.filter.CollectionIds
                catalogNumbers: ko.observableArray(), //gui version of application.filter.CatalogNumbers
                reducedObservations: ko.observable(0),
                locationName: application.locationName,
                totalListItems: application.totalCount, //ko.observable(0),
                res: resource.res,
                institutionMapping: ko.observableArray(),
                taxonGroupMapping: ko.observableArray(),
                updateReduced: function() {
                    dataServices.getObservationCount(application.reduceFilter(), 'Treeview').then(function(result) {
                            //console.debug(result);
                            vm.reducedObservations(result || 0);
                        },
                        function(reason) {
                            // failed
                            if (reason.statusText !== "Ignore") {
                                console.debug(reason.statusText);
                                application.setFooterWarning(vm.res().warningServerUnavailable);
                            }
                        });
                },
                isMapView: ko.computed(function() {
                    return nav.activeView() === 'map';
                }),

                hasAdvancedFilterSelected: ko.computed(function() {
                    return application.filter.CollectionIds().length +
                        application.filter.Img().length +
                        application.filter.Found().length +
                        application.filter.NotRecovered().length +
                        application.filter.Valid().length +
                        application.filter.UnsureId().length +
                        application.filter.Spontan().length +
                        application.filter.Cons().length +
                        application.filter.CatalogNumbers().length >
                        0;
                }),
                hasNodesSelected: ko.computed(function() {
                    return application.filter.Categories().length +
                        application.filter.BasisOfRecords().length +
                        application.filter.Behaviors().length +
                        application.filter.Months().length +
                        application.filter.TaxonGroupIds().length +
                        application.filter.InstitutionIds().length >
                        0 ||
                        application.filter.YearFrom() > config.minYear ||
                        application.filter.YearTo() > 0 && application.filter.YearTo() < config.maxYear ||
                        application.filter.CoordinatePrecisionFrom() > config.minCoordinatePrecision ||
                        application.filter.CoordinatePrecisionTo() > 0 &&
                        application.filter.CoordinatePrecisionTo() < config.maxCoordinatePrecision;
                }),
                hasGeometryFilter: ko.computed(function() {
                    return application.filter.Geometry() && application.filter.Geometry().length > 0 ||
                        application.filter.AreaIds().length > 0 ||
                        application.filter.LocationId() > 0;
                }),
                hasLocationFilter: ko.computed(function() {
                    return application.filter.LocationId() > 0;
                }),
                hasSourceFilter: ko.computed(function() {
                    return application.filter.InstitutionIds() && application.filter.InstitutionIds().length > 0;
                }),
                hasTaxonFilter: ko.computed(function() {
                    return application.filter.TaxonIds() && application.filter.TaxonIds().length > 0;
                }),
                geoInfoVisible: ko.observable(false),
                toggleGeoInfo: function() {
                    vm.geoInfoVisible(!vm.geoInfoVisible());
                },
                filterInfoVisible: ko.observable(false),
                toggleFilterInfo: function() {
                    vm.filterInfoVisible(!vm.filterInfoVisible());
                },
                advancedInfoVisible: ko.observable(false),
                toggleFilterAdvanced: function() {
                    vm.advancedInfoVisible(!vm.advancedInfoVisible());
                },

                showPopNamesFirst:
                    //sjekk om verdi finnes i localstorage. Hvis ikke eller om den har verdi 'true', sette den som true
                    localStorage.getItem("showPopNames") == 'false' ? ko.observable(false) : ko.observable(true),                

                setShowPopNames: function(show) {
                    localStorage.setItem("showPopNames", show);
                    if (show == 'true') {
                        vm.showPopNamesFirst(true);
                    } else if (show == 'false') {
                        vm.showPopNamesFirst(false);
                    }
                },

                toggleSciName: function () {                    
                    vm.showPopNamesFirst(!vm.showPopNamesFirst());
                    $('#jstreeTaxon').jstree(true).refresh();
                    //document.getElementById("chkVitNavn").checked = true;
                },

                chooseBokmal: function() {
                    application.treeLanguage('nb-NO');
                    application.setTreeLanguage('nb-NO');
                    $('#bokmal-tre').addClass("active");
                    $('#nynorsk-tre').removeClass("active");
                    $('#samisk').removeClass("active");
                    $('#jstreeTaxon').jstree(true).refresh();
                },
                chooseNynorsk: function() {
                    application.treeLanguage('nn-NO');
                    application.setTreeLanguage('nn-NO');
                    $('#nynorsk-tre').addClass("active");
                    $('#bokmal-tre').removeClass("active");
                    $('#samisk').removeClass("active");
                    $('#jstreeTaxon').jstree(true).refresh();
                },
                chooseSamisk: function() {
                    application.treeLanguage('se-NO');
                    application.setTreeLanguage('se-NO');
                    $('#samisk').addClass("active");
                    $('#nynorsk-tre').removeClass("active");
                    $('#bokmal-tre').removeClass("active");
                    $('#jstreeTaxon').jstree(true).refresh();
                },
                languageVisible: ko.observable(false),
                toggleLanguageVisible: function () {
                    if (vm.languageVisible()) {
                        vm.closeDropdown();
                        vm.languageVisible(false);
                    } else {
                        vm.openDropdown();
                        vm.languageVisible(true);
                    };
                },
                
                GUILang: application.languagePreference,
                treeLang: application.treeLanguage,

                openDropdown: function () {
                    $(".dropdown-menu-tree").css("display", "block");
                    vm.languageVisible(true);
                },

                closeDropdown: function () {
                    $(".dropdown-menu-tree").css("display", "none");
                    vm.languageVisible(false);
                },

                createDisplayName: function (item) {
                    if (vm.showPopNamesFirst() ) {
                        const language = application.treeLanguage();
                        
                        var popularname = adb.getPopularName(item, language, true);
                        return vm.makeNodeText(popularname, item.CumulativeObservationCount);
                        
                    } else {
                        return vm.makeNodeText(adb.firstToUpperCase(item.ScientificName || ""), item.CumulativeObservationCount);
                    }
                },
                makeNodeText: function (name, count, maxLength) {
                    if (maxLength) {
                        name = name.length > maxLength ? name.substring(0, maxLength - 1) + '...' : name;
                    }
                    var badgeColor = count > 0 ? codeLists.badgeColors.some.color : codeLists.badgeColors.none.color;
                    var badgeWidth = (count+'').length * 8 + 15;
                    var badgeLeft = Number(270 - badgeWidth);
                    var nodeText = name + "<span class='badge' style='position: absolute; left: " + badgeLeft + "px; width: "+ badgeWidth + "px; top: inherit; background-color:" + badgeColor + "'>" + vm.addSeparator(count) + "</span>";
                    return nodeText;
                },

                loadTaxonTree: function () {
                    $('#jstreeTaxon').jstree({
                        'core': {
                            "themes": {
                                "name": "adb"
                            },
                            'data': function (node, cb) {
                                if (node.id === "#") {
                                    dataServices.getTaxonChildren(0).then(function (data) {
                                        var children = [];
                                        data.forEach(function (item) {
                                            children.push(
                                                {
                                                    "text": vm.createDisplayName(item),
                                                    "id": item.Id, "children": true,
                                                    "PopularName": item.PopularName,
                                                    "ScientificName": item.ScientificName,
                                                    "PopularNames": item.PopularNames
                                                });
                                        });

                                        cb(children);
                                    }, function (reason) {
                                        // failed
                                        if (reason.statusText !== "Ignore") {
                                            console.debug(reason.statusText);
                                            application.setFooterWarning(vm.res().warningServerUnavailable);
                                        }
                                    });

                                }
                                else {
                                    dataServices.getTaxonChildren(node.id).then(function (childData) {
                                        var children = [];
                                        childData.forEach(function (item) {
                                            children.push(
                                                {
                                                    "text": vm.createDisplayName(item),
                                                    "id": item.Id, "children": true,
                                                    "PopularName": item.PopularName,
                                                    "ScientificName": item.ScientificName,
                                                    "PopularNames": item.PopularNames,
                                                    "type": "child"
                                                });
                                        });

                                        cb(children);
                                    }, function (reason) {
                                        // failed
                                        if (reason.statusText !== "Ignore") {
                                            console.debug(reason.statusText);
                                            application.setFooterWarning(vm.res().warningServerUnavailable);
                                        }
                                    });
                                }
                            },
                            "check_callback": true
                        },
                        "types": {
                            "root": {
                                "valid_children": ["default"]
                            },
                            "default": {
                                "icon": "noicon"
                                //"icon": "glyphicon glyphicon-leaf"
                            }//,
                            //"child": {
                                //"icon": "glyphicon glyphicon-grain"
                            //}
                        },
                        "plugins": [
                            "search", "contextmenu", "sort", "types"
                        ],
                        "contextmenu": {
                            "items": function ($node) {
                                var tree = $("#tree").jstree(true);
                                return {
                                    "Populærnavn": {
                                        "separator_before": false,
                                        "separator_after": false,
                                        "label": vm.res().popularNameMenu,
                                        "action": function (obj) {
                                            vm.showPopNamesFirst(true);
                                            vm.setShowPopNames('true');                                            
                                            $('#jstreeTaxon').jstree(true).refresh();
                                            //$node = tree.create_node($node);
                                            //tree.edit($node);
                                        }
                                    },
                                    "Vitenskapelig navn": {
                                        "separator_before": false,
                                        "separator_after": false,
                                        "label": vm.res().scientificNameMenu,
                                        "action": function (obj) {
                                            vm.showPopNamesFirst(false);
                                            vm.setShowPopNames('false');
                                            $('#jstreeTaxon').jstree(true).refresh();
                                            //tree.edit($node);
                                        }
                                    }
                                };
                            }
                        }
                    });
                    $('#jstreeTaxon').on("changed.jstree", function (e, data) {
                        if (data.event && data.event.button !== 0) return;
                        var obj = data.instance.get_node(data.selected[0]);
                        if (obj) {
                            var selection = {
                                name: adb.firstToUpperCase(obj.original.ScientificName || ""),
                                id: Number(obj.id),
                                title: vm.makeDisplayName(obj.original)
                            };
                            if (vm.arrContains(application.filter.TaxonIds(), selection.id)) {
                                // ignore
                                //vm.removeTaxon(selection);
                                //application.updateFilter(false, "TaxonIds", selection.id);
                            } else {
                                if (selection && selection.id && selection.id !== "#") {
                                    vm.taxons.push(selection);
                                    application.updateFilter(true, "TaxonIds", selection.id);
                                }
                            }
                        }
                    });
                    $('#jstreeTaxon').on('hover_node.jstree',
                        function(e, data) {
                            var hasPopName = data.node.original
                                .PopularName &&
                                data.node.original.PopularName.length > 0;
                            var title = data.node.original.ScientificName || "";
                            if (hasPopName) {
                                title = title + " (" + data.node.original.PopularName + ")";
                            }
                            $("#" + data.node.id).prop('title', title);
                        });
                },
                arrContains: function (arr, s) {
                    var r, i;
                    r = false;
                    i = arr.length;
                    while (i--) {
                        if (arr[i] === s) {
                            r = true;
                            i = 0;
                        }
                    }
                    return r;
                },

                matrikkelEnheter: ko.observableArray(),
                selectedAdmArea: ko.observable(),
                selectedDataset: ko.observable(),
                selectedCollection: ko.observable(),
                selectedArtName: ko.observable(),
                geoType: ko.observable("adm"),
                searchType: ko.observable("simple"),
                admSpinner: ko.observable(false),
                datasetsSpinner: ko.observable(false),
                artNameSpinner: ko.observable(false),
                conservationSpinner: ko.observable(false),
                selectedConservationArea: ko.observable(),
                selectedCatalogNumber: ko.observable(),
                matrikkelSpinner: ko.observable(false),
                includeSubTaxon: application.filter.IncludeSubTaxonIds,
                changeName: function () {
                    vm.showPopNamesFirst(!vm.showPopNamesFirst());
                    document.getElementById("chkVitNavn").checked = false;
                    //vm.setShowPopNames('true');                   
                    $('#jstreeTaxon').jstree(true).refresh();
                },
                
                selectedMatrikkelEnhet: ko.observable(),
                artName: function (id, popName, sciName, matchName, text, count) {
                    return {
                        id: ko.observable(id),
                        popularName: ko.observable(popName),
                        scientificName: ko.observable(sciName),
                        matchName: ko.observable(matchName),
                        displayName: ko.observable(text),
                        count: ko.observable(count)
                    };
                },
                admArea: function (id, type, nr, text) {
                    return {
                        id: ko.observable(id),
                        type: ko.observable(type),
                        nr: ko.observable(nr),
                        displayName: ko.observable(text),
                        geometry: ko.observable()
                    };
                },
                dataset: function (id, name) {
                    return {
                        id: ko.observable(id),
                        name: ko.observable(name),
                        displayName: ko.observable(name)
                    };
                },
                matrikkelEnhet: function (nr, text) {
                    return {
                        nr: ko.observable(nr),
                        displayName: ko.observable(text)
                    };
                },
                prepareSearchTerm: function (searchTerm) {
                    searchTerm = searchTerm.replace(/\s+/g, ' ').toLowerCase(); // multiple whitespace to single space
                    searchTerm = searchTerm.replace(/^\s+/, ''); // remove leading space
                    searchTerm = searchTerm.replace(/\s+$/, ''); // remove trailing space
                    return searchTerm;
                },
                getDatasets: function (searchTerm, oarray) {
                    searchTerm = vm.prepareSearchTerm(searchTerm);
                    if (!/[a-zæøå\s]{2,}/.test(searchTerm)) {
                        return;
                    }
                    vm.datasetsSpinner(true);
                    dataServices.searchDatasets(searchTerm).then(function (data) {
                        //dataServices.searchMunicipality(searchTerm).then(function (data) {
                        var result = [];
                        _.forEach(data, function (dataset) {
                            result.push(vm.dataset(dataset.Id, dataset.Name));
                            //result.push(vm.kommune(place.MunicipalityNr, desc));
                        });
                        oarray(result);
                        vm.datasetsSpinner(false);
                    }, function (reason) {
                        // failed
                        if (reason.statusText !== "Ignore") {
                            console.debug(reason.statusText);
                            application.setFooterWarning(vm.res().warningServerUnavailable);
                        }
                    });
                },
                getCollections: function (searchTerm, oarray) {
                    searchTerm = vm.prepareSearchTerm(searchTerm);
                    if (!/[a-zæøå\s]{2,}/.test(searchTerm)) {
                        return;
                    }
                    vm.datasetsSpinner(true);
                    dataServices.searchCollections(searchTerm).then(function (data) {
                        //dataServices.searchMunicipality(searchTerm).then(function (data) {
                        var result = [];
                        _.forEach(data, function (coll) {
                            result.push(vm.dataset(coll.Id, coll.Name));
                            //result.push(vm.kommune(place.MunicipalityNr, desc));
                        });
                        oarray(result);
                        vm.datasetsSpinner(false);
                    }, function (reason) {
                        // failed
                        if (reason.statusText !== "Ignore") {
                            console.debug(reason.statusText);
                            application.setFooterWarning(vm.res().warningServerUnavailable);
                        }
                    });
                },
                getAdmAreas: function (searchTerm, oarray) {
                    searchTerm = vm.prepareSearchTerm(searchTerm);
                    if (!/[a-zæøå\s]{1,}/.test(searchTerm)) {
                        return;
                    }
                    vm.admSpinner(true);
                    dataServices.searchAreas(searchTerm, 0).then(function (data) {
                        //dataServices.searchMunicipality(searchTerm).then(function (data) {
                        var result = [];
                        _.forEach(data, function (place) {
                            //if (place.Type !== 3) {
                                var desc = place.Name;
                                if (place.Type === 1) {
                                    // Kommune, find fylke
                                    var countyNr = Math.floor(place.Code / 100);
                                    desc = place.Name + ", " + codeLists.counties[countyNr];
                                } else if (place.Type === 2) {
                                    desc = place.Name + " fylke";
                                } else if (place.Type === 3) {
                                    desc = place.Name + ", verneområde";
                                }
                                result.push(vm.admArea(place.Id, place.Type, place.Code, desc));
                                //var desc = place.Name + ", " + place.CountyName;
                                //result.push(vm.kommune(place.MunicipalityNr, desc));
                            //}
                        });
                        oarray(result);
                        vm.admSpinner(false);
                    }, function (reason) {
                        // failed
                        if (reason.statusText !== "Ignore") {
                            console.debug(reason.statusText);
                            application.setFooterWarning(vm.res().warningServerUnavailable);
                        }
                    });
                },
                makeDisplayName: function (item) {
                   var popularname = adb.getPopularName(item, application.treeLanguage(), !(application.GUILang == 'EN'));
                   return !popularname || popularname.length == 0 ?
                        adb.firstToUpperCase(item.ScientificName || "") :
                        adb.firstToUpperCase(popularname) + " - " + adb.firstToUpperCase(item.ScientificName || "");
                                            
                },
                getArtNames: function (searchTerm, oarray) {
                    searchTerm = vm.prepareSearchTerm(searchTerm);
                    if (!/[a-zæøå\s]{2,}/.test(searchTerm)) {
                        return;
                    }

                    vm.artNameSpinner(true);
                    dataServices.searchTaxons(searchTerm, 20).then(function (data) {
                        //dataServices.searchMunicipality(searchTerm).then(function (data) {
                        var result = [];
                        /*var newResult = [];
                        var newResult2 = [];
                        var newResult3 = [];*/
                        _.forEach(data, function (taxon) {

                            var displayName = vm.makeDisplayName(taxon);
                            if (taxon.MatchedName != taxon.ScientificName && taxon.MatchedName != taxon.PopularName) {
                                displayName = taxon.MatchedName + " ==> " + displayName;
                            }
                            if (taxon.ObservationCount !== taxon.CumulativeObservationCount) {
                                displayName = displayName +
                                    " (" +
                                    taxon.ObservationCount +
                                    " / " +
                                    taxon.CumulativeObservationCount +
                                    ")";
                            } else {
                                displayName = displayName +
                                    " (" +
                                    taxon.ObservationCount +
                                    ")";
                            }
                            result.push(vm.artName(taxon.Id, taxon.PopularName, taxon.ScientificName, taxon.MatchedName, displayName, taxon.ObservationCount));   
                            
                        });
                        // setting the exact search term as the first result
                      /*  if (result.length > 0 && result[0].popularName() != searchTerm && result[0].scientificName().toLowerCase() != searchTerm) {
                            // go through the whole array and search for exact term                            
                            for (var i = 1; i < result.length; i++) {
                                // if it is found, set the temporary value as the search term 
                                if (result[i].popularName() == searchTerm || result[i].scientificName().toLowerCase() == searchTerm) {                                    
                                    newResult.push(result[i]);
                                } else if (result[i].popularName() != null && result[i].popularName().startsWith(searchTerm) || result[i].scientificName().toLowerCase().startsWith(searchTerm)) {
                                    newResult2.push(result[i]);    
                                } else if ((result[i].popularName() != null && result[i].popularName().endsWith(searchTerm)) || result[i].scientificName().toLowerCase().endsWith(searchTerm)) {
                                    newResult3.push(result[i]);     
                                }
                            }
                            var tempResult = newResult2.concat(newResult3);
                            // sort by observation count, descending 
                            tempResult.sort(function (a, b) {
                                return b.count() - a.count();
                            }) 
                            newResult = newResult.concat(tempResult);                          
                        }

                        if (newResult.length > 0) {
                            oarray(newResult);
                        } else */

                        if (result.length > 0) {
                            oarray(result);
                        } else {
                            result.push(vm.artName(null, null, null, null, "Beklager, søket ditt ga ingen resultater. Vennligst endre søket og prøv på nytt. "));
                            oarray(result);
                        }
                        // TODO: spellcheck (delete the first or last letter, add a letter at the beginning or at the end of the word, swap letters in the word)
                        vm.artNameSpinner(false);
                    }, function (reason) {
                        // failed
                        if (reason.statusText !== "Ignore") {
                            console.debug(reason.statusText);
                            application.setFooterWarning(vm.res().warningServerUnavailable);
                        }
                    });
                },
                //getMatrikkelEnheter: function (searchTerm, oarray) {
                //    var params = searchTerm.match(/(\d+)/g);
                //    if (params.length >= 2 && /\d{4}/.test(params[0])) {
                //        (params.length === 2) && params.push(0);
                //        vm.matrikkelSpinner(true);
                //        dataServices.finnMatrikkelenheter.apply(this, params).then(function (data) {
                //            var result = [];
                //            _.forEach(data, function (enhet) {
                //                var nr = enhet.kommunenummer + "-" + enhet.gaardsnummer + "/" + enhet.bruksnummer;
                //                var desc = enhet.kommunenummer + "-" + enhet.gaardsnummer + "/" + enhet.bruksnummer;
                //                result.push(vm.matrikkelEnhet(nr, desc));
                //            });
                //            oarray(result);
                //            vm.matrikkelSpinner(false);
                //        });
                //    }
                //},
                clearSearchFields: function () {
                    $('#adm-search').val('');
                    $('#art-search').val('');
                    $('#dataset-search').val('');
                    $('#collection-search').val('');
                    $('#catalogNumber-search').val('');
                },
                removeCollection: function (obj) {
                    if (obj) {
                        vm.collections.remove(function (item) {
                            return item.id === obj.id;
                        });
                        application.updateFilter(false, "CollectionIds", obj.id);
                        vm.refreshTrees();
                    }
                },
                removeCatalogNumber: function (obj) {
                    if (obj) {
                        vm.catalogNumbers.remove(function (item) {
                            return item === obj;
                        });
                        application.updateFilter(false, "CatalogNumbers", obj);
                        vm.refreshTrees();
                    }
                },

                removeLocation: function () {
                    application.filter.LocationId(0);
                    vm.refreshTrees();
                },

                removeTaxon: function (obj) {
                    if (obj) {
                        vm.taxons.remove(function (item) {
                            return item.id === obj.id;
                        });
                        application.updateFilter(false, "TaxonIds", obj.id);
                        vm.refreshTrees();
                    }
                },
                removeArea: function (obj) {
                    if (obj) {
                        vm.areas.remove(function (item) {
                            return item.id() === obj.id();
                        });
                        application.updateFilter(false, "AreaIds", obj.id());
                        vm.refreshTrees();
                        vm.redrawAreas();
                    }
                    //if (vm.areas().length == 0){
                    if (obj.id() === -1) {
                        if (map.selectionLayer) {
                            map.selectionLayer.getSource().clear();
                        }
                        application.filter.Geometry("");
                        app.trigger('currentSelection:remove');
                    }
                },
                compositionComplete: function () {
                    application.fixDates(); // Init norsk format for datoer
                    vm.loadInstitutions();
                    vm.loadTaxonGroups();
                    vm.createTrees();
                    vm.loadRangeSliders();
                    $('#input-search').on('keyup', vm.search);

                    $('#input-search').on('click', function (e) {
                        $('#input-search').val('');
                    });
                    $('#adm-search').on('click', function (e) {
                        vm.clearSearchFields();
                    });
                    $('#art-search').on('click', function (e) {
                        vm.clearSearchFields();
                    });
                    $('#dataset-search').on('click', function (e) {
                        vm.clearSearchFields();
                    });
                    $('#collection-search').on('click', function (e) {
                        vm.clearSearchFields();
                    });
                    $('#catalogNumber-search').on('click', function (e) {
                        vm.clearSearchFields();
                    });
                    $('#drawpolygon').on('click', function (e) {
                        vm.clearSearchFields();
                    });
                    app.on('currentSelection:remove').then(function () {
                        vm.clearSearchFields();
                        vm.refreshTrees();

                    });
                    app.on('currentSelection:add').then(function (area) {
                        vm.setUserDefinedAreaInFilterList("Polygon " + area + "km²");
                        vm.refreshTrees();
                    });
                    app.on('mapview:activate').then(function () {
                        vm.refreshTrees();
                    });
                    app.on('resource:languageChanged').then(function () {
                        vm.destroyTrees();
                        vm.createTrees();
                        //vm.refreshTrees();
                    });

                    vm.loadTaxonTree();
                    $('.nav-tabs a[href="#searchTab"]').tab('show');

                    vm.recreateFilter();

                    app.on('main:resized').then(function (elem) {
                        vm.resizeTreeviewElements();
                    });

                    $('#collapseOne').on('shown.bs.collapse', function () {
                        vm.resizeTreeviewElements();
                    });
                    $('#collapseOne').on('hidden.bs.collapse', function () {
                        vm.resizeTreeviewElements();
                    });
                    $('#collapseAdvanced').on('shown.bs.collapse', function () {
                        vm.resizeTreeviewElements();
                    });
                    $('#collapseAdvanced').on('hidden.bs.collapse', function () {
                        vm.resizeTreeviewElements();
                    });
                    $('#collapseTwo').on('shown.bs.collapse', function () {
                        vm.resizeTreeviewElements();
                    });
                    vm.resizeTreeviewElements();

                }
            };
        vm.resizeTreeviewElements = function () {
            var pageHeight = $('#main').height();
            var mainTreePanel = $('#collapseTwo .panel-body');
            var advancedTreePanel = $('#collapseAdvanced .panel-body');
            var reduceHeight = $('#panel-reduce').height();
            var advancedHeight = $('#panel-advanced').height();
            var mainHeight = $('#panel-tree').height();
            var selectedOptionsHeight = 0;
            //$.each($('.selectedOptions'), function () {
            //    selectedOptionsHeight += $(this).height();
            //});
            $.each($('.bio'), function () {
                selectedOptionsHeight += $(this).height();
            });
            $.each($('.areas'), function () {
                selectedOptionsHeight += $(this).height();
            });
            // Need to detect changes in selectedOptions and call this function on change.
            if (selectedOptionsHeight === 0 && application.filter.TaxonIds().length > 0){    // 'hack'
                selectedOptionsHeight = application.filter.TaxonIds().length / 2 * 15;
            }
            var title = 45;
            var footerMenu = 42;
            var margin = 136;

            var newMainHeight = pageHeight - title - footerMenu - reduceHeight - advancedHeight - selectedOptionsHeight - margin;
            var newAdvancedHeight = pageHeight - title - footerMenu - reduceHeight - mainHeight - selectedOptionsHeight - margin;
            mainTreePanel.height(newMainHeight);
            advancedTreePanel.height(newAdvancedHeight);
        };
        vm.loadInstitutions = function () {
            dataServices.getInstitutions('_tree').then(function (institutions) {
                var mapping = [];
                config.filterGroupCounts.InstitutionIds = institutions.length;

                institutions.forEach(function (item, index) {
                    mapping[item.Id] = item;
                });
                vm.institutionMapping(mapping);
            }, function (reason) {
                // failed
                if (reason.statusText !== "Ignore") {
                    console.debug(reason.statusText);
                    application.setFooterWarning(vm.res().warningServerUnavailable);
                }
            });
        };
        vm.loadTaxonGroups = function () {
            dataServices.getTaxonGroups().then(function (taxonGroups) {
                var mapping = [];
                config.filterGroupCounts.TaxonGroupIds = taxonGroups.length;
                taxonGroups.forEach(function (item, index) {
                    item.Name = adb.firstToUpperCase(item.Name);
                    mapping[item.Id] = item;
                });
                vm.taxonGroupMapping(mapping);
            }, function (reason) {
                // failed
                if (reason.statusText !== "Ignore") {
                    console.debug(reason.statusText);
                    application.setFooterWarning(vm.res().warningServerUnavailable);
                }
            });
        };
        vm.createTrees = function () {
            var filterTreeConfig = [
                { name: "TaxonGroupIds", description: vm.res().taxonGroups },
                { name: "Categories", description: vm.res().categories },
                { name: "BasisOfRecords", description: vm.res().basisOfRecords },
                { name: "Behaviors", description: vm.res().behaviors },
                { name: "InstitutionIds", description: vm.res().institutions },
                { name: "Months", description: vm.res().months }
            ];
            var advancedTreeConfig = [
                { name: "Img", description: vm.res().images }, // , addClass: "no_checkbox" - for aa legge paa class for ikke vise checkbox
                { name: "Found", description: vm.res().foundStatus },
                { name: "NotRecovered", description: vm.res().notRecoveredStatus },
                { name: "Valid", description: vm.res().valid },
                { name: "UnsureId", description: vm.res().unsureIdentification },
                { name: "Spontan", description: vm.res().spontanious }
                //{ name: "Cons", description: vm.res().conservationStatus }
            ];
            vm.createTree('#filterTree', filterTreeConfig);
            vm.createTree('#advancedTree', advancedTreeConfig);

        };
        vm.refreshTrees = function () {
            $("#filterTree").jstree("refresh");
            $("#advancedTree").jstree("refresh");
        };
        vm.destroyTrees = function () {
            $("#filterTree").jstree("destroy");
            $("#advancedTree").jstree("destroy");
        };

        vm.loadRangeSliders = function () {
            $( function() {
                $( "#slider-year" ).slider({
                    range: true,
                    min: config.minYear,
                    max: config.maxYear,
                    values: [ config.minYear, config.maxYear ],
                    slide: function( event, ui ) {
                        $("#yearFrom").val(ui.values[0]);
                        $("#yearTo").val(ui.values[1]);
                    },
                    change: function (event, ui) {
                        //if (ui.values[0] > ui.values[1]) {return;}  
                        if (ui.values[0] > config.minYear) {
                            application.filter.YearFrom(ui.values[0]);
                        } else {
                            application.filter.YearFrom(0);
                        }
                        if (ui.values[1] < config.maxYear) {
                            application.filter.YearTo(ui.values[1]);
                        } else {
                            application.filter.YearTo(0);
                        }
                        $("#yearFrom").val(ui.values[ 0 ]);
                        $("#yearTo").val(ui.values[ 1 ]);

                    }
                });
                $("#yearFrom").val($("#slider-year").slider("values", 0));
                $("#yearTo").val($("#slider-year").slider("values", 1));

                $("#yearFrom").change(function () {
                    var currentValue = application.filter.YearFrom();
                    if (currentValue === 0) {currentValue = config.minYear; }
                    var maxValue = application.filter.YearTo();
                    if (maxValue === 0) {maxValue = config.maxYear; }
                    var newVal = $("#yearFrom").val();

                    if ($.isNumeric(newVal) && newVal >= config.minYear && newVal <= maxValue) {
                        $("#slider-year").slider("values", [newVal, application.filter.YearTo() || config.maxYear]);
                    } else {
                        $("#yearFrom").val(currentValue);
                    }
                });

                $("#yearTo").change(function () {
                    var currentValue = application.filter.YearTo();
                    if (currentValue === 0) { currentValue = config.maxYear; }
                    var minValue = application.filter.YearFrom();
                    if (minValue === 0) { minValue = config.minYear; }
                    var newVal = $("#yearTo").val();

                    if ($.isNumeric(newVal) && newVal >= minValue && newVal <= config.maxYear) {
                        $("#slider-year").slider("values", [application.filter.YearFrom() || config.minYear, newVal]);
                    } else {
                        $("#yearTo").val(currentValue);
                    }
                });

                $( "#slider-precision" ).slider({
                    range: true,
                    min: config.minCoordinatePrecision,
                    max: config.maxCoordinatePrecision,
                    values: [ config.minCoordinatePrecision, config.maxCoordinatePrecision ],
                    slide: function( event, ui ) {
                        $("#precisionFrom").val(ui.values[0]);
                        $("#precisionTo").val(ui.values[1]);

                    },
                    change: function( event, ui ) {
                        if (ui.values[0] > config.minCoordinatePrecision) {
                            application.filter.CoordinatePrecisionFrom(ui.values[0]);
                        } else {
                            application.filter.CoordinatePrecisionFrom(0);
                        }
                        if (ui.values[1] < config.maxCoordinatePrecision) {
                            application.filter.CoordinatePrecisionTo(ui.values[1]);
                        } else {
                            application.filter.CoordinatePrecisionTo(0);
                        }
                        $("#precisionFrom").val(ui.values[0]);
                        $("#precisionTo").val(ui.values[1]);
                    }
                });
                $("#precisionFrom").val($("#slider-precision").slider("values", 0));
                $("#precisionTo").val($("#slider-precision").slider("values", 1));

                $("#precisionFrom").change(function () {
                    var currentValue = application.filter.CoordinatePrecisionFrom();
                    if (currentValue === 0) { currentValue = config.minCoordinatePrecision; }
                    var maxValue = application.filter.CoordinatePrecisionTo();
                    if (maxValue === 0) { maxValue = config.maxCoordinatePrecision; }
                    var newVal = $("#precisionFrom").val();

                    if ($.isNumeric(newVal) && newVal >= config.minCoordinatePrecision && newVal <= maxValue) {
                        $("#slider-precision").slider("values", [newVal, application.filter.CoordinatePrecisionTo()]);
                    } else {
                        $("#precisionFrom").val(currentValue);
                    }
                });

                $("#precisionTo").change(function () {
                    var currentValue = application.filter.CoordinatePrecisionTo();
                    if (currentValue === 0) { currentValue = config.maxCoordinatePrecision; }
                    var minValue = application.filter.CoordinatePrecisionFrom();
                    if (minValue === 0) { minValue = config.minCoordinatePrecision; }
                    var newVal = $("#precisionTo").val();

                    if ($.isNumeric(newVal) && newVal >= minValue && newVal <= config.maxCoordinatePrecision) {
                        $("#slider-precision").slider("values", [application.filter.CoordinatePrecisionFrom(), newVal]);
                    } else {
                        $("#precisionTo").val(currentValue);
                    }
                });

            } );
        };



        vm.createTree = function (divId, nodeConfig) {
            function makeRootNode(text, id, type, preselectArr, addClass) {
                var selected = preselectArr.length > 0;
                return {
                    "text": text,
                    "id": id,
                    "type": type,
                    "children": true,
                    "state": {
                        "undetermined": selected
                    },
                    "a_attr": {
                        class: addClass || ""
                    }
                };
            }

            function makeNode(text, id, type, filterType, value, disabled, preselectArr, title, addClass) {
                var selected = vm.arrContains(preselectArr, value);
                return {
                    "text": text,
                    "title": title ? title : "",
                    "id": id,
                    "type": type,
                    "filterType": filterType,
                    "value": value,
                    "state": {
                        "selected": selected,
                        "disabled": false//disabled
                    },
                    "a_attr": {
                        class: addClass || ""
                    }
                };
            }

            var compareNodeFunction = function (a, b) {
                if (a.text < b.text) {
                    return -1;
                }
                if (a.text > b.text) {
                    return 1;
                }
                // a == b
                return 0;
            };

            var addAllToFilter = function (data) {
                var children = data.children ? data.children : data.node.children;
                children.forEach(function (nodeId) {
                    var node = $(divId).jstree(true).get_node(nodeId);
                    var inFilter = vm.arrContains(application.filter[node.original.filterType](), node.original.value);
                    if (!inFilter) {
                        application.updateFilter(true, node.original.filterType, node.original.value);
                    }
                });
            };


            function nodeIsLoaded(nodeName) {
                var node = $(divId).jstree(true).get_node(nodeName);
                return node.state.loaded;
            }

            function refreshOthers(ownNode) {
                app.trigger('refreshOthers', ownNode);
            }

            // Do it via a trigger so that all trees will be refreshed.
            app.on('refreshOthers').then(function (ownNode) {
                nodeConfig.forEach(function (n) {
                    if (ownNode !== n.name && nodeIsLoaded(n.name)) $(divId).jstree(true).refresh_node(n.name);
                });
            });

            $(divId).jstree({
                'core': {
                    'themes': {
                        "name": "adb"
                    },
                    'data': function (node, callback) {
                        var countFilter = application.countFilter();
                        countFilter[node.id] = [];

                        var mapNodes = function (childData, mapping, reverse, icons, offset) {
                            config.filterGroupCounts[node.id] = mapping.length-1;
                            icons = icons || [];
                            offset = offset || 0;
                            var children = [];
                            for (var index = 1; index < mapping.length; index++) { // NB! Start on 1 to skip the unknown categories
                                if (mapping[index]) {
                                    var itemCount = 0;
                                    childData.forEach(function (childItem) {
                                        if (childItem.Type === index) {
                                            itemCount = childItem.Count;
                                        }
                                    });
                                    var nodeText = vm.makeNodeText(mapping[index], itemCount);
                                    if (reverse) {
                                        children.push(
                                            makeNode(nodeText, node.id + index, icons[index] || node.id, node.id, index - offset, itemCount === 0, application.filter[node.id](), mapping[index]));
                                    } else {
                                        children.unshift(
                                            makeNode(nodeText, node.id + index, icons[index] || node.id, node.id, index - offset, itemCount === 0, application.filter[node.id](), mapping[index]));
                                    }
                                }
                            }

                            callback(children);
                        };
                        if (node.id === "#") {
                            var children = [];
                            nodeConfig.forEach(function(n) {
                                children.push(makeRootNode(n.description, n.name, "root", application.filter[n.name](), n.addClass));
                            });
                            callback(children);

                        }
                        else if (node.id === "Categories") {
                            dataServices.getObservationCategoryCount(countFilter, '_tree').then(function (childData) {
                                mapNodes(childData, config['categoryNameMapping' + vm.res().code], false, config.categoryMapping);
                            }, function (reason) {
                                // failed
                                if (reason.statusText !== "Ignore") {
                                    console.debug(reason.statusText);
                                    application.setFooterWarning(vm.res().warningServerUnavailable);
                                }
                            });
                        }
                        else if (node.id === "BasisOfRecords") {
                            dataServices.getObservationBasisOfRecordCount(countFilter, '_tree').then(function (childData) {
                                mapNodes(childData, config['basisOfRecordMapping' + vm.res().code]);
                            }, function (reason) {
                                // failed
                                if (reason.statusText !== "Ignore") {
                                    console.debug(reason.statusText);
                                    application.setFooterWarning(vm.res().warningServerUnavailable);
                                }
                            });
                        }
                        else if (node.id === "Months") {
                            dataServices.getObservationMonthCount(countFilter, '_tree').then(function (childData) {
                                mapNodes(childData, config['monthsMapping' + vm.res().code], true);
                            }, function (reason) {
                                // failed
                                if (reason.statusText !== "Ignore") {
                                    console.debug(reason.statusText);
                                    application.setFooterWarning(vm.res().warningServerUnavailable);
                                }
                            });
                        }
                        else if (node.id === "Behaviors") {
                            dataServices.getObservationBehaviorCount(countFilter, '_tree').then(function (childData) {
                                mapNodes(childData, config['behaviorMapping' + vm.res().code]);
                            }, function (reason) {
                                // failed
                                if (reason.statusText !== "Ignore") {
                                    console.debug(reason.statusText);
                                    application.setFooterWarning(vm.res().warningServerUnavailable);
                                }
                            });
                        }
                        else if (node.id === "Img") {
                            dataServices.getObservationImgCount(countFilter).then(function (childData) {
                                mapNodes(childData, config['imgMapping' + vm.res().code], true, [], 0);
                            }, function (reason) {
                                // failed
                                if (reason.statusText !== "Ignore") {
                                    console.debug(reason.statusText);
                                    application.setFooterWarning(vm.res().warningServerUnavailable);
                                }
                            });
                        }
                        else if (node.id === "Found") {
                            dataServices.getObservationFoundCount(countFilter).then(function (childData) {
                                mapNodes(childData, config['foundMapping' + vm.res().code], true, [], 0);
                            }, function (reason) {
                                // failed
                                if (reason.statusText !== "Ignore") {
                                    console.debug(reason.statusText);
                                    application.setFooterWarning(vm.res().warningServerUnavailable);
                                }
                            });
                        }
                        else if (node.id === "NotRecovered") {
                            dataServices.getObservationNotRecoveredCount(countFilter).then(function (childData) {
                                mapNodes(childData, config['notRecoveredMapping' + vm.res().code], true, [], 0);
                            }, function (reason) {
                                // failed
                                if (reason.statusText !== "Ignore") {
                                    console.debug(reason.statusText);
                                    application.setFooterWarning(vm.res().warningServerUnavailable);
                                }
                            });
                        }
                        else if (node.id === "Valid") {
                            dataServices.getObservationValidCount(countFilter).then(function (childData) {
                                mapNodes(childData, config['validMapping' + vm.res().code], true, [], 0);
                            }, function (reason) {
                                // failed
                                if (reason.statusText !== "Ignore") {
                                    console.debug(reason.statusText);
                                    application.setFooterWarning(vm.res().warningServerUnavailable);
                                }
                            });
                        }
                        else if (node.id === "UnsureId") {
                            dataServices.getObservationUnsureIdCount(countFilter).then(function (childData) {
                                mapNodes(childData, config['unsureIdMapping' + vm.res().code], true, [], 0);
                            }, function (reason) {
                                // failed
                                if (reason.statusText !== "Ignore") {
                                    console.debug(reason.statusText);
                                    application.setFooterWarning(vm.res().warningServerUnavailable);
                                }
                            });
                        }
                        else if (node.id === "Spontan") {
                            dataServices.getObservationSpontanCount(countFilter).then(function (childData) {
                                mapNodes(childData, config['spontanMapping' + vm.res().code], true, [], 0);
                            }, function (reason) {
                                // failed
                                if (reason.statusText !== "Ignore") {
                                    console.debug(reason.statusText);
                                    application.setFooterWarning(vm.res().warningServerUnavailable);
                                }
                            });
                        }
                        else if (node.id === "Cons") {
                            dataServices.getObservationConservationCount(countFilter).then(function (childData) {
                                mapNodes(childData, config['consMapping' + vm.res().code], true, [], 0);
                            }, function (reason) {
                                // failed
                                if (reason.statusText !== "Ignore") {
                                    console.debug(reason.statusText);
                                    application.setFooterWarning(vm.res().warningServerUnavailable);
                                }
                            });
                        }
                        else if (node.id === "InstitutionIds") {
                            dataServices.getObservationInstitutionCount(countFilter, '_tree').then(function (childData) {
                                var children = [];
                                vm.institutionMapping().forEach(function (item, index) {
                                    var itemCount = 0;
                                    childData.forEach(function (childItem) {
                                        if (childItem.Type === index) {
                                            itemCount = childItem.Count;
                                        }
                                    });
                                    var nodeText = vm.makeNodeText(vm.institutionMapping()[index].Name, itemCount, 23);
                                    children.unshift(makeNode(nodeText, node.id + index, node.id, node.id, index, itemCount === 0, application.filter[node.id](), vm.institutionMapping()[index].Name));
                                });
                                callback(children.sort(compareNodeFunction));
                            }, function (reason) {
                                // failed
                                if (reason.statusText !== "Ignore") {
                                    console.debug(reason.statusText);
                                    application.setFooterWarning(vm.res().warningServerUnavailable);
                                }
                            });
                        }
                        else if (node.id === "TaxonGroupIds") {
                            dataServices.getObservationTaxonGroupCount(countFilter, '_tree').then(function (childData) {
                                var children = [];
                                vm.taxonGroupMapping().forEach(function (item, index) {
                                    var itemCount = 0;
                                    childData.forEach(function (childItem) {
                                        if (childItem.Type === index) {
                                            itemCount = childItem.Count;
                                        }
                                    });
                                    var nodeText = vm.makeNodeText(vm.taxonGroupMapping()[index].Name, itemCount, 24);
                                    children.unshift(makeNode(nodeText, node.id + index, node.id, node.id, index, itemCount === 0, application.filter[node.id](), vm.taxonGroupMapping()[index].Name));
                                });
                                callback(children.sort(compareNodeFunction));
                            }, function (reason) {
                                // failed
                                if (reason.statusText !== "Ignore") {
                                    console.debug(reason.statusText);
                                    application.setFooterWarning(vm.res().warningServerUnavailable);
                                }
                            });
                        }

                    },
                    "check_callback": true
                },
                "types": {
                    "root": {
                        "valid_children": ["default"]
                    },
                    "default": {
                        "icon": "noicon" // css-class to hide icon
                    },
                    "NE": {
                        "icon": "icon-ne"
                    },
                    "NA": {
                        "icon": "icon-na"
                    },
                    "NR": {
                        "icon": "icon-nr"
                    },
                    "NK": {
                        "icon": "icon-nk"
                    },
                    "LO": {
                        "icon": "icon-lo"
                    },
                    "PH": {
                        "icon": "icon-ph"
                    },
                    "HI": {
                        "icon": "icon-hi"
                    },
                    "SE": {
                        "icon": "icon-se"
                    },
                    "LC": {
                        "icon": "icon-lc"
                    },
                    "DD": {
                        "icon": "icon-dd"
                    },
                    "NT": {
                        "icon": "icon-nt"
                    },
                    "VU": {
                        "icon": "icon-vu"
                    },
                    "EN": {
                        "icon": "icon-en" //  "content/adb/16EN.png" // "glyphicon glyphicon-leaf"
                    },
                    "CR": {
                        "icon": "icon-cr" 
                    },
                    "RE": {
                        "icon": "icon-re" 
                    }
                    //    "alien": {
                //        "icon": "content/adb/16SE.png"
                //    },
                //    "extinct": {
                //        "icon": "content/adb/16EN.png" // "content/adb/16RE.png"
                //}
            },

                "checkbox": {
                    three_state: true,
                    // klikk på tekst for ekspander
                    // https://stackoverflow.com/questions/35502382/jstree-checkbox-check-event
                    //whole_node : false,
                    //tie_selection : false,
                    cascade: 'up+down+undetermined'
                },
                "plugins": [
                    "search", "types", "checkbox" //, "sort"
                ]
            });
            $(divId).on("after_close.jstree", function (e, data) {
                console.log("after_close:" + data.node.id);
                var hasFilter = data.node.state.selected || data.node.state.undetermined;
                if (!hasFilter) {
                    // Mark as not loaded to avoid updates until it's opened again
                    data.node.state.loaded = false;
                }
            });
            $(divId).on("changed.jstree", function (e, data) {
                //console.log("changed:" + data.node.id);
                if (!(data.action === "select_node" || data.action === "deselect_node")) return;

                if (data.event && data.event.button !== 0) return;
                var obj = data.instance.get_node(data.selected[0]);
                if (!data.node) return;
                if (data.node.original.filterType === undefined || data.node.original.filterType === "root") {
                    if (data.action === "deselect_node") {
                        application.filter[data.node.id]([]);
                        refreshOthers(data.node.id);
                    } else if (data.action === "select_node") {
                        if (!data.node.state.loaded) {
                            $(divId).jstree(true).load_node(data.node.id, addAllToFilter);
                        } else {
                            addAllToFilter(data);
                        }
                        refreshOthers(data.node.id);
                    }


                } else {
                    // Todo: Noen filtergrupper er slik at velger du alt innenfor
                    // gruppa har du valgt samtlige poster i basen som er lik det å
                    // ikke ha satt noe filter i det hele tatt. Disse kan evt
                    // spesialbehandles for å slippe å legge til alt i filteret.
                    var inFilter = vm.arrContains(application.filter[data.node.original.filterType](), data.node.original.value);
                    var isSelected = data.node.state.selected;
                    if (inFilter && isSelected) return;
                    if (!inFilter && !isSelected) return;
                    var doAdd = !inFilter && isSelected;
                    application.updateFilter(doAdd, data.node.original.filterType, data.node.original.value);

                    doAdd ? $(divId).jstree(true).select_node(data.node.id) :
                        $(divId).jstree(true).deselect_node(data.node.id);

                    refreshOthers(data.node.original.filterType);
                }
                //e.stopPropagation();

            });
            $(divId).on("ready.jstree", function (e, data) {
                console.debug(divId + " ready!");
            });

            $(divId).on('hover_node.jstree',
                function(e, data) {
                    var title = data.node.original.title || "";
                    if (title.length > 0) {
                        $("#" + data.node.id).prop('title', title);
                    }
                });
        };
        vm.recreateFilter = function () {
            if (vm.taxons().length === 0 && application.filter.TaxonIds().length > 0) {
                application.filter.TaxonIds().forEach(function (id) {
                    dataServices.getTaxon(id).then(function (value) {

                        var selection = {
                            name: value.ScientificName,
                            id: value.Id,
                            title: vm.makeDisplayName(value)
                        };
                        vm.taxons.push(selection);
                    }, function (reason) {
                        // failed
                        if (reason.statusText !== "Ignore") {
                            console.debug(reason.statusText);
                            application.setFooterWarning(vm.res().warningServerUnavailable);
                        }
                    });
                });
            }
            if (vm.areas().length === 0 && application.filter.AreaIds().length > 0) {
                application.filter.AreaIds().forEach(function (id) {
                    dataServices.getArea(id).then(function (obj) {
                        var desc = obj.Name;
                        if (obj.Type === 1) {
                            // Kommune, find fylke
                            var countyNr = Math.floor(obj.Code / 100);
                            desc = obj.Name + ", " + codeLists.counties[countyNr];
                        }
                        vm.getAreaPolygon(vm.admArea(obj.Id, obj.Type, obj.Code, desc));
                    }, function (reason) {
                        // failed
                        if (reason.statusText !== "Ignore") {
                            console.debug(reason.statusText);
                            application.setFooterWarning(vm.res().warningServerUnavailable);
                        }
                    });
                });
            }
            vm.updateReduced();

            if (vm.collections().length === 0 && application.filter.CollectionIds().length > 0) {
                application.filter.CollectionIds().forEach(function (id) {
                    dataServices.getOrganization(id).then(function (obj) {
                        var selection = {
                            name: obj.Name,
                            id: obj.Id,
                            title: obj.Name
                        };
                        vm.collections.push(selection);
                    }, function (reason) {
                        // failed
                        if (reason.statusText !== "Ignore") {
                            console.debug(reason.statusText);
                            application.setFooterWarning(vm.res().warningServerUnavailable);
                        }
                    });
                });
            }

            if (vm.catalogNumbers().length === 0 && application.filter.CatalogNumbers().length > 0) {
                application.filter.CatalogNumbers().forEach(function (id) {
                    vm.catalogNumbers.push(id);
                });
            }

            $("#slider-year").slider("values", [application.filter.YearFrom() || config.minYear, application.filter.YearTo() || config.maxYear]);
            $("#slider-precision").slider("values", [application.filter.CoordinatePrecisionFrom() || config.minCoordinatePrecision, application.filter.CoordinatePrecisionTo() || config.maxCoordinatePrecision]);

            if (application.filter.Geometry() && application.filter.Geometry().length > 0) {
                vm.setUserDefinedAreaInFilterList("Polygon");
            }
        };

        vm.clearCheckedNodes = function () {
            $("#filterTree").jstree(true).uncheck_all();

            application.filter.Categories([]);
            application.filter.InstitutionIds([]);
            application.filter.TaxonGroupIds([]);
            application.filter.BasisOfRecords([]);
            application.filter.Behaviors([]);
            application.filter.Months([]);

            $("#slider-year").slider("values", [config.minYear, config.maxYear]);
            $("#slider-precision").slider("values", [config.minCoordinatePrecision, config.maxCoordinatePrecision]);

            application.filter.YearFrom(0);
            application.filter.YearTo(0);
            application.filter.CoordinatePrecisionFrom(0);
            application.filter.CoordinatePrecisionTo(0);

            vm.toggleCheckedCollapse(true);
            vm.refreshTrees();
            event.stopPropagation();

        };
        vm.clearAdvancedFilter = function () {
            $("#advancedTree").jstree(true).uncheck_all();
            application.filter.CollectionIds([]);
            application.filter.CatalogNumbers([]);
            application.filter.Img([]);
            application.filter.Found([]);
            application.filter.NotRecovered([]);
            application.filter.Valid([]);
            application.filter.UnsureId([]);
            application.filter.Spontan([]);
            application.filter.Cons([]);

            vm.collections([]);
            vm.catalogNumbers([]);
            vm.refreshTrees();
            event.stopPropagation();

        };
        application.filter.IncludeSubTaxonIds.subscribe(function (filter) {
            logger.log("IncludeSubTaxonIds changed - recount");
            vm.updateReduced();
        });
        application.filter.TaxonIds.subscribe(function (filter) {
            logger.log("TaxonIds changed - recount");
            vm.updateReduced();
        });
        application.filter.AreaIds.subscribe(function (filter) {
            logger.log("AreaIds changed - recount");
            vm.updateReduced();
        });
        application.filter.Geometry.subscribe(function (filter) {
            logger.log("Geometry changed - recount");
            vm.updateReduced();
        });
        application.filter.LocationId.subscribe(function (filter) {
            logger.log("LocationId changed - recount");
            vm.updateReduced();
            vm.refreshTrees();
        });

        vm.selectedCatalogNumber.subscribe(function (value) {
            if (value) {
                application.updateFilter(true, "CatalogNumbers", value);
                vm.catalogNumbers.push(value);
                vm.refreshTrees();
            }
        });

        vm.selectedConservationArea.subscribe(function (value) {
            if (value) {
                application.updateFilter(true, "AreaIds", value.id());
                vm.areas.push(value);
                vm.refreshTrees();
                return vm.getAreaPolygon(value);    // ConservationArea == 3
            }
            return null;
        });

        vm.selectedArtName.subscribe(function (value) {
            if (!value) {
                return null;
            }
            var selection = {
                name: value.scientificName(),
                id: value.id(),
                title: value.displayName()
            };
            if (vm.arrContains(application.filter.TaxonIds(), selection.id)) {
                // ignore
                //vm.removeTaxon(selection);
                //application.updateFilter(false, "TaxonIds", selection.id);
            } else {
                if (selection && selection.id !== "#") {
                    vm.taxons.push(selection);
                    application.updateFilter(true, "TaxonIds", selection.id);
                    vm.resizeTreeviewElements();
                }
            }
            vm.refreshTrees();
            return null;
        });

        vm.selectedDataset.subscribe(function (value) {
            vm.updateCollectionOrDataset(value);
        });

        vm.selectedCollection.subscribe(function (value) {
            vm.updateCollectionOrDataset(value);
        });
        vm.updateCollectionOrDataset = function(value){
            if (!value) {
                return null;
            }
            var selection = {
                name: value.name(),
                id: value.id(),
                title: value.name()
            };
            if (vm.arrContains(application.filter.CollectionIds(), selection.id)) {
                //vm.removeCollection(selection);
                //application.updateFilter(false, "TaxonIds", selection.id);
            } else {
                if (selection && selection.id !== "#") {
                    vm.collections.push(selection);
                    application.updateFilter(true, "CollectionIds", selection.id);
                    vm.resizeTreeviewElements();
                }
            }
            vm.refreshTrees();
        };

        vm.selectedAdmArea.subscribe(function (value) {
            if (value) {
                if (!vm.arrContains(application.filter.AreaIds(), value.id())) {
                    application.updateFilterNoDupe(true, "AreaIds", value.id());
                    //application.filter.AreaIds([value.id()]);
                    vm.resizeTreeviewElements();
                    vm.refreshTrees();
                    return vm.getAreaPolygon(value); // Municipality == 1
                }
            }
            return null;
        });

        vm.redrawAreas = function () {
            map.removeAreas();
            vm.areas().forEach(function (area) {
                if (area.id() !== -1) {
                    map.areaLayer.getSource().addFeatures(
                        new ol.format.GeoJSON({ defaultDataProjection: "EPSG: " + application.filter.EpsgCode() })
                        .readFeatures(area.geometry(), { dataProjection: "EPSG: " + application.filter.EpsgCode() })
                    );
                }
            });
            map.fitSelectionPolygon();

        };
        vm.getAreaPolygon = function (areaInfo) {
            var areaExist = false;
            vm.areas().forEach(function (area) {
                if (areaInfo.id() === area.id()) {
                    areaExist = true;
                }
            });
            if (areaExist) {
                return;
            }
            return dataServices.getAreas(areaInfo.type(), areaInfo.nr()).then(function (geojsonObject) {
                areaInfo.geometry(geojsonObject);
                vm.areas.push(areaInfo);

                if (map.areaLayer) {
                    vm.redrawAreas();
                } else {
                    // Todo: endre til å kun lagre nr (areaid) i filter for hentede polygon
                    // Hack! If map has not been initialized (example: refresh on list view), update filter instead of polygon
                    //application.updateFilter(true, "Municipalities", nr);
                }
            }, function (reason) {
                // failed
                if (reason.statusText !== "Ignore") {
                    console.debug(reason.statusText);
                    application.setFooterWarning(vm.res().warningLoadArea);
                }
            });
        };

        vm.setCurrentView = function () {
            var wktObject = map.getBoundingBox();
            if (wktObject.length > 0 && wktObject !== "POLYGON EMPTY") {
                map.selectionLayer.getSource().addFeatures(
                    new ol.format.WKT({ defaultDataProjection: "EPSG: " + application.filter.EpsgCode() }).readFeatures(wktObject, { dataProjection: "EPSG: " + application.filter.EpsgCode() })
                );
                vm.setUserDefinedAreaInFilterList("Polygon fra gjeldende visning");
            } else {
                console.debug("Ingen boundingbox funnet");
            }
        };
        vm.clearTaxonAndPolygon = function () {
            vm.clearPolygon();
            vm.clearTaxon();
            application.filter.IncludeSubTaxonIds(true);
            event.stopPropagation();
        };
        vm.clearPolygon = function () {
            if (map.selectionLayer) {
                map.selectionLayer.getSource().clear();
            }
            application.filter.Geometry("");
            application.filter.AreaIds([]);
            application.filter.LocationId(0);
            map.removeAreas();
            app.trigger('currentSelection:remove');
            vm.areas([]);
        };
        vm.clearTaxon = function () {
            application.filter.TaxonIds([]);
            vm.taxons([]);
            $('#jstreeTaxon').jstree('close_all');
        };

        vm.zoomToPolygon = function () {
            map.fitSelectionPolygon();
            event.stopPropagation();
        };
        vm.addSeparator = function (number) {
            number += '';
            var x = number.split('.');
            var x1 = x[0];
            var x2 = x.length > 1 ? '.' + x[1] : '';
            var rgx = /(\d+)(\d{3})/;
            while (rgx.test(x1)) {
                x1 = x1.replace(rgx, '$1' + ' ' + '$2');
            }
            return x1 + x2;
        };
        vm.totalListItemsDisplay = ko.computed(function () {
            return vm.addSeparator(vm.totalListItems());
        });
        vm.reducedObservationsDisplay = ko.computed(function () {
            return vm.addSeparator(vm.reducedObservations());
        });
        vm.selectedMatrikkelEnhet.subscribe(function (value) {
            if (value === null) return undefined;
            var params = value.nr().match(/(\d+)/g);
            if (params.length >= 3) {
                return dataServices.hentOmraadeForMatrikkelenhet.apply(this, params).then(function (wktObject) {
                    if (wktObject !== "POLYGON EMPTY") {
                        map.selectionLayer.getSource().addFeatures(
                            new ol.format.WKT({defaultDataProjection: "EPSG: 32633"}).readFeatures(wktObject, {dataProjection: "EPSG: 32633"})
                        );
                        vm.setUserDefinedAreaInFilterList("Polygon fra matrikkelen");
                    } else {
                        console.debug("Ingen geometri funnet for " + params);
                    }
                }, function (reason) {
                    // failed
                    if (reason.statusText !== "Ignore") {
                        console.debug(reason.statusText);
                        application.setFooterWarning(vm.res().warningServerUnavailable);
                    }
                });
            }
            return undefined;
        });

        vm.setUserDefinedAreaInFilterList = function (text) {
            var hasUserDefined = false;
            vm.areas().forEach(function (area) {
                if (area.id() === -1) {
                    hasUserDefined = true;
                    area.displayName(text);
                }
            });
            if (!hasUserDefined) {
                vm.areas.push({
                    'id': ko.observable(-1),
                    'displayName': ko.observable(text)
                });
            }

        };

        vm.GUILang.subscribe(function () {
            if (vm.GUILang() == 'EN') {
               // vm.showPopNamesFirst(false);
                vm.setShowPopNames('false');
                $('#jstreeTaxon').jstree(true).refresh();
            } else {
              //  vm.showPopNamesFirst(true);
                vm.setShowPopNames('true');
            }
        });

        return vm;
    });

define('viewmodels/bookmark',['services/logger', "knockout", 'services/application', 'services/dataServices', 'viewmodels/nav', 'viewmodels/treeview', 'services/resource'],
    function (logger, ko, application, dataServices, nav, treeview, resource) {
        var title = "bookmark",
            vm = {
                res: resource.res,
                activate: function (guid) {
                    //logger.log(title + ' View Activated', null, title, true)
                    if (guid) {

                        dataServices.getSearchFilter(guid).then(function (filter) {
                            application.setFilter(filter);
                            if (filter.ViewportZoom) application.viewportState.zoom(filter.ViewportZoom);
                            if (filter.ViewportCenter) application.viewportState.center(filter.ViewportCenter);
                            if (filter.ViewportBackground) application.viewportState.background(filter.ViewportBackground);
                            nav.restart();
                            treeview.recreateFilter();
                            //treeview.loadFilterTree();
                            //treeview.refreshFilterTree();
                            //location.reload();
                        }, function (reason) {
                            // failed
                            if (reason.statusText !== "Ignore") {
                                console.debug(reason.statusText);
                                application.setFooterWarning(vm.res().warningServerUnavailable);
                            }
                        });
                    }
                },
                compositionComplete: function () {
                }
            };

        return vm;
    });

define('viewmodels/exportStatus',[
        'services/application', 'services/resource'
    ],
    function (application, resource) {
        vm = {
            activate: function() {
                application.initExportStatusList();
            },
            
            removeExportStatus: function (index, element, event) {
                console.log(element);
                application.exportStatusList.remove(element);
                application.saveExportStatusList();
            },
            title: "Export Job Statuses",
            res: resource.res,
            exportStatusList: application.exportStatusList,
        };
        return vm;
    }
);
define('viewmodels/featureInfo',['services/logger', "knockout", 'durandal/app', 'services/application', 'services/config', 'services/codeLists', 'services/pieChart', 'services/dataServices', 'viewmodels/nav', 'services/adbFuncs', 'viewmodels/mapOl3', 'services/resource', 'services/knockoutExtensions'],
    function (logger, ko, app, application, config, codelists, pieChart, dataServices, nav, adb, map, resource, kox) {
        "use strict";

        var vm = {
            res: resource.res,
            language: application.languagePreference, 
            config: config,
            collector: ko.observable(""),
            pleaseWaitWhileLoading: ko.observable(false),
            showAll: ko.observable(false),
            showVerbatim: ko.observable(false),
            isRedlistCategory: ko.observable(false),
            isAlienSpeciesCategory: ko.observable(false),
            isRegionallyAssessed: ko.observable(false),
            regionallyAssessedUrl: ko.observable(''),
            totalListItems: ko.observable(0),
            currentListItem: ko.observable(0),
            nodeId: ko.observable(""),
            observationId: ko.observable(""),
            files: ko.observableArray(""),
            taxonHierarchy: ko.observableArray([]),
            taxonomy: ko.observable(""),
            taxonCategory: ko.observable(""),
            displayName: ko.observable(""),
            //FeatureInfo
            categoryColor: ko.observable(""),
            statusUrl: ko.observable(""),
            taxonUrl: ko.observable(""),
            datelastmodified: ko.observable(""),
            institutionName: ko.observable(""),
            institutionUrl: ko.observable(""),
            collectionName: ko.observable(""),
            occurrenceID: ko.observable(""),
            catalogNumber: ko.observable(""),
            dataSetName: ko.observable(""),
            scientificName: ko.observable(""),
            scientificNameAuthor: ko.observable(""),
            matchedScientificName: ko.observable(""),
            matchedScientificNameAuthor: ko.observable(""),
            taxonGroup: ko.observable(""), // artgruppenavn
            popularName: ko.observable(""), // norskNavn
            basisOfRecord: ko.observable(""),
            identifiedBy: ko.observable(""),
            yearIdentified: ko.observable(""),
            monthIdentified: ko.observable(""),
            dayIdentified: ko.observable(""),
            yearCollected: ko.observable(""),
            //monthCollected: ko.observable(""),
            //dayCollected: ko.observable(""),
            //timeOfDay: ko.observable(""),
            country: ko.observable("Norge"),
            county: ko.observable(""), // stateProvince
            conservationArea: ko.observable(""),
            conservationAreaCode: ko.observable(""),
            municipality: ko.observable(""), // county
            locality: ko.observable(""),
            localitystring: ko.observable(""),
            locationId: ko.observable(0),
            longitude: ko.observable(""),
            latitude: ko.observable(""),
            coordinatePrecision: ko.observable(""),
            minimumElevation: ko.observable(""),
            maximumElevation: ko.observable(""),
            minimumDepth: ko.observable(""),
            maximumDepth: ko.observable(""),
            sex: ko.observable(""),
            individualCount: ko.observable(""),
            notes: ko.observable(""),
            collectingMethod: ko.observable(""),
            okologi: ko.observable(""),
            habitat: ko.observable(""),
            substrat: ko.observable(""),
            utmSone: ko.observable(""),
            utmOst: ko.observable(""),
            utmNord: ko.observable(""),
            mgrsFra: ko.observable(""),
            mgrsTil: ko.observable(""),
            koordinatKilde: ko.observable(""),
            elevationKilde: ko.observable(""),
            category: ko.observable(""),
            url: ko.observable(""),
            behavior: ko.observable(""),
            unspontaneous: ko.observable(""),
            identification: ko.observable(""),
            hasPictures: ko.observable(""),
            verified: ko.observable(""),
            absent: ko.observable(""),
            notRecovered: ko.observable(""),
            protectedSpecies: ko.observable(""),
            associatedReferences: ko.observableArray([]),
            dynamicProperties: ko.observableArray([]),
            addSeparator: application.addSeparator
        };

        vm.showSourceScientificName = ko.computed(function (){
            return (vm.scientificNameAuthor() != vm.matchedScientificNameAuthor() || vm.scientificName() != vm.matchedScientificName()); 
        });
        
        vm.setShowMode = function (value) {
            vm.showAll(value === '1');
            vm.showVerbatim(value === '2');
        };

        vm.pageString = ko.computed(function () {
            return vm.currentListItem() + 1 + "/" + vm.totalListItems();
        });
        vm.reportAdress = ko.computed(function() {
            if (vm.associatedReferences()[0]) {
                if (vm.associatedReferences()[0].indexOf('artsobservasjoner') >= 0) {
                    return config.reportAdressArtsObs;
                }
            }
            return config.reportAdress;
        });
        
        vm.reportBody = ko.computed(function () {
            var linebreak = "%0D%0A";
            return vm.res().feedbackBody1 + linebreak + linebreak +
                    vm.res().institutionNameTitle + vm.institutionName() + linebreak +
                    vm.res().collectionTitle + vm.collectionName() + linebreak +
                    vm.res().occurrenceIdTitle + vm.occurrenceID() + linebreak +
                    vm.res().catalogNumberTitle + vm.catalogNumber() + linebreak + linebreak +
                    vm.res().feedbackBody2;
        });
        vm.reportSubject = ko.computed(function () {
            return vm.res().feedbackMailSubject1 + vm.observationId();
        });
        vm.collectorLength = ko.computed(function () {
            return vm.collector.length;
        });

        vm.resetFeatureInfo = function () {
            vm.files([]);
            vm.categoryColor("");
            vm.statusUrl("");
            vm.datelastmodified("");
            vm.institutionName("");
            vm.institutionUrl("");
            vm.collectionName("");
            vm.occurrenceID("");
            vm.catalogNumber("");
            vm.dataSetName("");
            vm.scientificName("");
            vm.scientificNameAuthor("");
            vm.matchedScientificName("");
            vm.matchedScientificNameAuthor("");
            vm.taxonGroup("");
            vm.popularName("");
            vm.basisOfRecord("");
            vm.identifiedBy("");
            vm.yearIdentified("");
            vm.monthIdentified("");
            vm.dayIdentified("");
            vm.collector("");
            vm.yearCollected("");
            //vm.monthCollected("");
            //vm.dayCollected("");
            //vm.timeOfDay("");
            vm.country("Norge");
            vm.county("");
            vm.conservationArea("");
            conservationAreaCode: ko.observable(""),
            vm.municipality("");
            vm.locality("");
            vm.locationId(0);
            vm.longitude("");
            vm.latitude("");
            vm.coordinatePrecision("");
            vm.minimumElevation("");
            vm.maximumElevation("");
            vm.minimumDepth("");
            vm.maximumDepth("");
            vm.sex("");
            vm.individualCount("");
            vm.notes("");
            vm.collectingMethod("");
            vm.okologi("");
            vm.habitat("");
            vm.substrat("");
            vm.utmSone("");
            vm.utmOst("");
            vm.utmNord("");
            vm.mgrsFra("");
            vm.mgrsTil("");
            vm.koordinatKilde("");
            vm.elevationKilde("");
            vm.category("");
            vm.url("");
            vm.behavior("");
            vm.unspontaneous(vm.res().no);
            vm.identification(vm.res().no);
            vm.hasPictures(vm.res().no);
            vm.verified(vm.res().no);
            vm.absent(vm.res().no);
            vm.notRecovered(vm.res().no);
            vm.protectedSpecies("");
            vm.associatedReferences([]);
            vm.dynamicProperties([]);
            vm.regionallyAssessedUrl('');
        };

        vm.previousPage = function () {
            if (vm.currentListItem() > 0) {
                vm.currentListItem(vm.currentListItem() - 1);

                // Don't need to fetch data on previous since that's already loaded.
                vm.showFeature();
            }
        };
        vm.nextPage = function () {
            if (vm.currentListItem() < vm.totalListItems() - 1) {
                vm.currentListItem(vm.currentListItem() + 1);

                // Got only the id. Fetch rest of observation.
                dataServices.getObservation(application.currFeature.data[0].Observations[vm.currentListItem()].Id).then(function (obsInfo) {
                    application.currFeature.data[0].Observations[vm.currentListItem()] = obsInfo;
                    vm.showFeature();
                });
            }
        };
        vm.setLocationInFilter = function () {
            application.filter.LocationId(vm.locationId());
            application.locationName((vm.locality() ? vm.locality() : 'Enkeltlokasjon') + ', ' + vm.municipality());
        };
        vm.clearLocationInFilter = function () {
            application.filter.LocationId(0);
        };
        vm.hasThisLocationInFilter = ko.computed(function () {
            return application.filter.LocationId() === vm.locationId();
        });

        app.on("currentFeatureChanged:trigger").then(function () {
            vm.currentListItem(0);
            vm.totalListItems(application.currFeature.data[0].Observations.length);
            vm.showFeature();
        });
        //app.on('main:resized').then(function (elem) {
        //    vm.resizeTreeviewElements();
        //});

        //vm.resizeTreeviewElements = function () {
        //    var pageHeight = $('#main').height();
        //    var $myPanel = $('#featureInfoContent');
    
        //    var title = 45;
        //    var footerMenu = 42;
        //    var margin = 120;

        //    $myPanel.height(pageHeight - title - footerMenu - margin);
        //};

        vm.showFeature = function () {
            vm.pleaseWaitWhileLoading(true);
            vm.resetFeatureInfo();
            
            var location = application.currFeature.data[0];
            
            vm.coordinatePrecision(location.CoordinatePrecision);
            vm.locality(location.Locality);
            vm.locationId(location.Id);
            vm.longitude(location.Longitude);
            vm.latitude(location.Latitude);

            for (var j = 0; j < (location.Areas ? location.Areas.length : 0); j++) {
                var area = location.Areas[j];
                switch (area.Type) {
                    case 1:
                        vm.municipality(area.Name);
                        break;
                    case 2:
                        vm.county(area.Name);
                        break;
                    case 3:
                        vm.conservationArea(area.Name);
                        if (area.Code && area.Code.indexOf("Naturbase ") === 0 ) {
                            vm.conservationAreaCode(config.factSheetBaseUrl + area.Code.substr(10));
                        }

                        break;
                }
            }

           
            if (vm.totalListItems() > vm.currentListItem()) {
                var observation = location.Observations[vm.currentListItem()];
                vm.observationId(observation.Id);
                vm.nodeId(observation.NodeId);
                vm.basisOfRecord(config['basisOfRecordMapping' + vm.res().code][observation.BasisOfRecord]);
                if (observation.Behaviors){
                    for (var i = 0; i <= observation.Behaviors.length - 1; i++) {
                        vm.behavior(vm.behavior() + config['behaviorMapping' + vm.res().code][observation.Behaviors[i]] + " ");
                    }
                }
                vm.catalogNumber(observation.CatalogNumber);
                vm.collector(dataServices.setCollectorsNames(observation.Collector) || '');
                
                vm.datelastmodified(application.formatDate(observation.LastModified));
                vm.yearCollected(application.formatDate(observation.Collected)); 
                //vm.monthCollected(application.formatDate(observation.Collected)); // todo: trengs disse?
                //vm.dayCollected(application.formatDate(observation.Collected));
                //vm.timeOfDay(application.formatDate(observation.Collected));
                vm.individualCount(observation.IndividualCount);
                vm.identifiedBy(observation.IdentifiedBy || '');
                vm.yearIdentified(application.formatDate(observation.Identified));
                vm.sex(observation.Sex);
                vm.habitat(observation.Habitat);
                vm.occurrenceID(observation.OccurenceId || '');
                vm.minimumElevation(observation.MinimumElevationInMeters || '');
                vm.maximumElevation(observation.MaximumElevationInMeters || '');
                vm.minimumDepth(observation.MinimumDepthInMeters || '');
                vm.maximumDepth(observation.MaximumDepthInMeters || '');
                vm.collectingMethod(observation.CollectingMethod || '');
                vm.associatedReferences(observation.AssociatedReferences || []);
                vm.protectedSpecies(observation.Protected || '');
                if (observation.Notes) {
                    if (adb.isValidUrl(observation.Notes)) {
                        vm.associatedReferences.push(observation.Notes);
                    } else {
                        vm.notes(observation.Notes);
                    }
                }

                if (observation.Files) {
                    //vm.hasPictures(observation.Files.length);
                    observation.Files.forEach(function (file) {
                        file.RightsHolder = file.RightsHolder || "";
                        file.License = file.License || "";
                        vm.files.push(file);
                    });
                }
                if (observation.Datasets) {
                    vm.dataSetName(observation.Datasets[0].Name);
                }
                if (observation.Collection) {
                    vm.collectionName(observation.Collection.Name);
                }
                if (observation.Institution) {
                    vm.institutionName(observation.Institution.Name);
                    vm.institutionUrl(observation.Institution.Url || config.contributorUrl);
                }
                if (observation.TaxonGroup) {
                    vm.taxonGroup(adb.firstToUpperCase(observation.TaxonGroup.Name));
                }
                // todo: Bruk mapping istedenfor magiske tall
                if (observation.Tags) { // Se tagMapping i config.js
                    // feature 1-2
                    vm.unspontaneous(observation.Tags.indexOf(1) >= 0 ? vm.res().yes : vm.res().no);
                    vm.identification(observation.Tags.indexOf(2) >= 0 ? vm.res().yes : vm.res().no);

                    vm.verified(observation.Tags.indexOf(3) >= 0 ? vm.res().yes : vm.res().no);
                    vm.hasPictures(observation.Tags.indexOf(4) >= 0 ? vm.res().yes : vm.res().no);

                    // feature 5-6
                    vm.absent(observation.Tags.indexOf(5) >= 0 ? vm.res().yes : vm.res().no);
                    vm.notRecovered(observation.Tags.indexOf(6) >= 0 ? vm.res().yes : vm.res().no);
                }
                if (observation.DynamicProperties) {
                    var obj = JSON.parse(observation.DynamicProperties);
                    for (var prop in obj) {
                        if (obj.hasOwnProperty(prop)) {
                            vm.dynamicProperties.push({
                                name: prop,
                                value: obj[prop]
                            });
                            //obj[prop] = 'xxx';
                        }
                    }
                    //vm.dynamicProperties(observation.DynamicProperties)

                    //console.debug("Posten har dynamiske egenskaper: " + observation.DynamicProperties);
                }
                vm.statusUrl(observation.CategoryUrl);
                vm.category(config.categoryMapping[observation.Category] || "XX");
                vm.categoryColor(config.categoryColors[vm.category()].color);


                vm.isAlienSpeciesCategory(observation.Category >= 3 && observation.Category <= 8);
                vm.isRedlistCategory(!vm.isAlienSpeciesCategory());

                var newCoord = ol.proj.transform([vm.longitude(), vm.latitude()], 'EPSG:4326', 'EPSG:' + application.filter.EpsgCode());
                if (nav.activeView() === 'map' && application.currFeature.data.geometryType === "Point") {
                    map.drawPrecisionCircle(newCoord, vm.coordinatePrecision());
                }
                vm.taxonHierarchy([]);
                vm.taxonomy("");
                vm.taxonCategory("");
                vm.displayName("");

                if (observation.Taxons) {
                    for (var k = 0; k <= observation.Taxons.length - 1; k++) {
                        var tax = observation.Taxons[k];
                        var raId = config.regionallyAssessedScientificIds.indexOf(tax.ScientificNameId);
                        if (raId > -1) {
                            vm.isRegionallyAssessed(true);
                            vm.regionallyAssessedUrl(config.regionallyAssessedUrls[raId]);
                        }
                        vm.taxonHierarchy.push({
                            category: codelists['taxonCategories' + vm.res().code][tax.TaxonCategory],
                            name: adb.firstToUpperCase(tax.ScientificName || tax.PopularName),
                            displayName: (tax.PopularName ? adb.firstToUpperCase(tax.PopularName) + ' - ' : '') +
                                adb.firstToUpperCase(tax.ScientificName) +
                                (tax.ScientificNameAuthor ? ', ' + tax.ScientificNameAuthor : ''),
                            obj: tax

                        });
                        vm.taxonCategory(codelists['taxonCategories' + vm.res().code][tax.TaxonCategory]);
                        if (tax.PopularName != null && vm.language() != 'EN') {                            
                            vm.displayName(adb.firstToUpperCase(tax.PopularName));
                        } else {
                            vm.displayName(adb.firstToUpperCase(tax.ScientificName));
                        }
                        // setter taksonomi 
                        vm.taxonomy(vm.taxonomy() + vm.taxonCategory() + ": " + vm.displayName() + " \n");
                        
                    }
                    
                    var taxon = observation.Taxons[observation.Taxons.length - 1];
                    vm.scientificName(taxon.ScientificName);
                    vm.scientificNameAuthor(taxon.ScientificNameAuthor);
                    vm.matchedScientificName(observation.MatchedScientificName);
                    vm.matchedScientificNameAuthor(observation.MatchedScientificNameAuthor);
                    vm.popularName(adb.firstToUpperCase(taxon.PopularName || ""));
                    vm.taxonUrl(config.taxonBaseUrl + taxon.Id);
                    vm.localitystring(observation.Locality);
                }
            }
            $('a[rel=popover]').popover({
                html: true,
                //delay: { "show": 500, "hide": 100 },
                trigger: 'hover',
                placement: 'right',
                container: 'body',
                content: function(){
                    return '<img class="mapPopover" src="' + $(this).data('img') + '" />';
                }
            });
            //$(".popover").css("top","0px");
            //vm.resizeTreeviewElements();
            vm.pleaseWaitWhileLoading(false);

        };      
        // update popular names in view model on change of the language
        vm.language.subscribe(function () {
            if (application.currFeature.data != null) {
                vm.showFeature();
            }
        });
        return vm;
    });

define('viewmodels/footer',['knockout', 'services/application', 'services/layerConfig', 'services/resource'],
    function (ko, application, layerConfig, resource) {
    "use strict";

    return {
        title: "Footer",
        res: resource.res,
        footerWarning: application.footerWarning,
        footerWarningText: application.footerWarningText,
        toggleShowWarning: function() {
            this.footerWarning(!this.footerWarning());
        },

        showTokenError: ko.observable(true),
        toggleShowToken: function() {
            this.showTokenError(!this.showTokenError());
        },

        noToken: ko.computed(function () {
            return !application.ndToken();
        }),

        noTokenForNDLayer: ko.computed(function () {
            var layer = application.currentLayer() && layerConfig.getBaseLayerFromPool(application.currentLayer());
            return layer && layer.needsToken && !application.ndToken();
        })
    };
});


define('viewmodels/gallery',['services/logger', "knockout", 'durandal/app', 'services/config', 'services/adbFuncs', 'services/application', 'services/dataServices', 'viewmodels/nav', 'services/resource', 'services/adbFuncs'],
    function (logger, ko, app, config, adbfuncs, application, dataServices, nav, resource, adb) {
        var title = "gallery",
            vm = {
                res: resource.res,
                nObservationsWithImages: ko.observable(0),
                mainWidth: ko.observable(660),
                mainHeight: ko.observable(650),
                galleryItems: ko.observableArray([]),
                indexFrom: ko.observable(1),
                indexTo: ko.observable(25),                
                language: application.treeLanguage,                

                activate: function (center, zoom, background, id, filter) {
                    //logger.log(title + ' View Activated', null, title, true)

                    application.viewportState.center(center);
                    application.viewportState.zoom(zoom);
                    application.viewportState.background(background);
                    application.parseUrlFilter(filter);                   

                    vm.mainWidth($('#main').width() - 20);
                    vm.mainHeight($('#main').height() - 20);
                                        
                    vm.reloadGallery();                    
                    
                },
                reloadGallery: function() {
                    vm.galleryItems([]);
                    vm.indexFrom(1);
                    vm.indexTo(25);
                    vm.getGallery();                    
                },
                loadingPictures: ko.observable(false),
                loadMore: function () {
                    var step = vm.indexTo() - vm.indexFrom() + 1;
                    vm.indexFrom(vm.indexTo() + 1);
                    vm.indexTo(vm.indexTo() + step);
                    vm.getGallery();
                },
                getGallery: function () {
                    vm.loadingPictures(true);
                    var galleryFilter = application.listFilter();
                    galleryFilter.Img = [1];
                    galleryFilter.IndexFrom = vm.indexFrom();
                    galleryFilter.IndexTo = vm.indexTo();

                    dataServices.searchObservations(galleryFilter).then(function (result) {
                        for (var i = 0; i < result.length; i++) {
                            var location = result[i];
                            for (var j = 0; j < location.Observations.length; j++) {
                                var observation = location.Observations[j];
                                var taxon = observation.Taxons[observation.Taxons.length - 1];
                                //const names = eval(taxon.PopularNames);
                                
                                const lang = vm.language();
                                
                                if (observation.Files) {
                                    for (var k = 0; k < observation.Files.length; k++) {
                                        var file = observation.Files[k];
                                        var galleryItem = {
                                            id: observation.Id,
                                            originalurl: file.Url,
                                            url: config.mediaProxyUrl + file.Id + "?maxWidth=250&maxHeight=200",
                                            scientificName: taxon.ScientificName,
                                            autor: taxon.ScientificNameAuthor,                                            
                                            popularName: adb.getPopularName(taxon, lang, false),
                                            locality: location.Locality,
                                            locationId: location.Id,
                                            coordinatePrecision: location.CoordinatePrecision,
                                            longitude: location.Longitude,
                                            latitude: location.Latitude,
                                            license: file.License,
                                            isCopyright: file.License.indexOf("©") >= 0 || file.License.toLowerCase().indexOf("copyright") >= 0,
                                            rightsHolder: file.RightsHolder
                                        };
                                        for (var l = 0; l < location.Areas.length; l++) {
                                            var area = location.Areas[l];
                                            switch (area.Type) {
                                                case 1:
                                                    galleryItem.municipality = area.Name || 'Ukjent';
                                                    break;
                                                case 2:
                                                    galleryItem.county = area.Name || 'Ukjent';
                                                    break;
                                            }
                                        }
                                        vm.galleryItems.push(galleryItem);
                                    }
                                }
                            }
                        }
                        vm.loadingPictures(false);
                    });

                    dataServices.getObservationCount(application.listFilter(), 'Gallery1').then(function (result) {
                        application.totalCount(result || 0);
                    }, function (reason) {
                        // failed
                        if (reason.statusText !== "Ignore") {
                            console.debug(reason.statusText);
                            application.setFooterWarning(vm.res().warningServerUnavailable);
                        }
                    });

                    dataServices.getObservationCount(galleryFilter, 'Gallery2').then(function (result) {
                        vm.nObservationsWithImages(result || 0);
                    }, function (reason) {
                        // failed
                        if (reason.statusText !== "Ignore") {
                            console.debug(reason.statusText);
                            application.setFooterWarning(vm.res().warningServerUnavailable);
                        }
                    });
                },

                compositionComplete: function () {
                    application.filterChanged.subscribe(function (value) {
                        if (nav.activeView() === 'gallery') {
                            vm.reloadGallery();
                        }
                    });
                    //app.on('main:resized').then(function (elem) {
                    //    vm.mainWidth($('#main').width() - 20);
                    //    vm.mainHeight($('#main').height() - 20);
                    //    vm.getGallery();
                    //});
                }
            };
        vm.showDetails = function (index, feature) {
            dataServices.getObservation(feature.id).then(function (obsInfo) {
                var data = [{
                    CoordinatePrecision: feature.coordinatePrecision,
                    Locality: feature.locality,
                    Id: feature.locationId,
                    Longitude: feature.longitude,
                    Latitude: feature.latitude,
                    ObservationCount: 1,
                    Observations: [
                        obsInfo
                    ],
                    Areas: [
                        {
                            Name: feature.county,
                            Type: 2
                        },
                        {
                            Name: feature.municipality,
                            Type: 1
                        }
                    ]
                }];
                application.currentFeature(data);
                app.trigger("currentFeatureChanged:trigger");
            });

        };
        // update popular names in view model on change of the language
        vm.language.subscribe(function (changeLang) {
            vm.reloadGallery();
        });
        return vm;
    });

define(
    'viewmodels/shell',["services/cssclass", "lodash", "durandal/app"],
    function (dom, _, app) {
        "use strict";
        var resizeDebounceTimeout = 250,
            resizePollingTimeout = 1750,
            toggleleftmenu = null,
            viewleftmenu = null,
            toggleFullscreen = null,
            viewnormal = null,
            init = function() {
                var prevSize = { width: -1, height: -1 },
                    main = dom.getElement("main"),
                    leftpanel = dom.getElement("leftpanel"),
                    doRedrawMain = function() {
                        var h = main.clientHeight,
                            w = main.clientWidth;
                        if (!(w === 0 && h === 0) && !(w === prevSize.width && h === prevSize.height)) {
                            prevSize = { width: w, height: h };
                            resizeMain();
                        }
                    },
                    debouncedRedrawMain = _.debounce(doRedrawMain, resizeDebounceTimeout),

                    mainResized = function(immediate) {
                        if (immediate === true) {
                            doRedrawMain();
                        } else {
                            debouncedRedrawMain();
                        }
                    },
                    $content = dom.getElement("content"),
                    showleftmenu = function() {
                        dom.addClass($content, 'showleftMenu');
                        dom.replaceClass(dom.getElement("toggleLeftMenuButton"), 'glyphicon-menu-right', 'glyphicon-menu-left');

                        resizeMain();

                    },
                    shownormal = function() {
                        dom.removeClass($content, 'showleftMenu');
                        dom.replaceClass(dom.getElement("toggleLeftMenuButton"), 'glyphicon-menu-left', 'glyphicon-menu-right');
                        resizeMain();
                    },
                    resizeMain = function() {
                        var mainwidth = main.clientWidth;
                        var leftpanelWidth = leftpanel.clientWidth;

                        if (dom.checkForClass($content, 'showleftMenu')) {
                            $("#mainview").css("width", mainwidth-leftpanelWidth);
                        } else {
                            $("#mainview").css("width", mainwidth);
                        }
                        $("#toggleLeftMenuButton").css("top", main.clientHeight/2);

                        app.trigger('main:resized', main);
                    };

                viewleftmenu = function() {
                    if (!dom.checkForClass($content, 'showleftMenu')) {
                        showleftmenu();
                    }
                };
                viewnormal = function () {
                    if (dom.checkForClass($content, 'showleftMenu')) {
                        shownormal();
                    }
                };
                toggleleftmenu = function() {
                    if (dom.checkForClass($content, 'showleftMenu')) {
                        shownormal();
                    } else {
                        showleftmenu();
                    }
                };
                toggleFullscreen = function() {
                    dom.toggleClass("viewport", "l-mainfullscreen");
                    mainResized(true);
                    app.trigger('app:toggleFullscreen', '');

                };
                dom.addEvent(window, "resize", mainResized);
                //dom.addEvent(dom.getElement("main"), "click", toggleFullscreen);
                window.setInterval(mainResized, resizePollingTimeout);
                mainResized();
                showleftmenu();
            },
            module = {
                attached: init,
                showleftmenu: function() {
                    if (viewleftmenu) {
                        viewleftmenu();
                    }
                },
                toggleleftmenu: function() {
                    if (toggleleftmenu) {
                        toggleleftmenu();
                    }
                },
                showNormal: function () {
                    if (viewnormal) {
                        viewnormal();
                    }
                },
                toggleFullscreen: function () {
                    if (toggleFullscreen) {
                        toggleFullscreen();
                    }
                }

    };

        return module;
    }
);

define('viewmodels/galleryToolbar',['services/logger', "knockout", "services/application", 'viewmodels/shell', 'services/resource'],
    function (logger, ko, application, shell, resource) {
        "use strict";

        var vm = {
            title: "Gallery toolbar",
            resource: resource,
            res: resource.res,
            activate: function () {
                application.setActiveLanguage();
                application.initBookmarks();
            },
            //toggleFullscreen: shell.toggleFullscreen,
            bookmarks: application.bookmarks,
            openBookmarks: ko.observable(false),
            toggleBookmarksContainer: function() {
                vm.openBookmarks(!vm.openBookmarks());
            },
            showLicenseInfo: function() {
                
            },
            applyFilter: function(bookmark) {
                application.applyFilter(bookmark);

                // Transform url to point to gallery
                var url = bookmark.url;
                url = url.replace("#map", "#gallery");
                window.location.assign(url);
            }
        };
        vm.tiledBookmarks = ko.computed(function () {
            var c = 0, r = [], b = application.bookmarks();
            while (c < b.length) {
                r.push(b.slice(c, c += 5));
            }
            return r;
        });

        return vm;
    });
  

define('viewmodels/headerPanel',['viewmodels/nav'],
function (nav) {
    var title = 'Header';
    var vm = {
        title: title,
        restart: function () {
            nav.restart();
        }
    };

    return vm;
});

define('viewmodels/languageBar',["services/application", 'services/resource'],
    function (application, resource) {
        "use strict";

        var vm = {
            res: resource.res,
            language: application.languagePreference,
            chooseNorwegian: function () {
                application.chooseNorwegian();
                $('#jstreeTaxon').jstree(true).refresh();
            },
            chooseNynorsk: function () {
                application.chooseNynorsk();
                $('#jstreeTaxon').jstree(true).refresh();
            },
            chooseEnglish: function () {
                application.chooseEnglish();
                //$('#jstreeTaxon').jstree(true).refresh();
            },
            languageVisible: ko.observable(false),
            toggleLanguageVisible: function() {

                if (vm.languageVisible()) {
                    vm.closeDropdown();
                } else {
                    vm.openDropdown();
                };
            },

            openDropdown: function () {
                $(".dropdown-menu-lang").css("display", "block");
                vm.languageVisible(true);
            },

            closeDropdown: function () {
                $(".dropdown-menu-lang").css("display", "none");
                vm.languageVisible(false);
            },

            showAbout: application.showAbout
        };

        return vm;
    });
  

define('viewmodels/leftPanel',['services/logger', 'viewmodels/shell', 'durandal/app', 'services/resource'],
    function (logger, shell, app, resource) {
    var title = 'Selected';
    function activate() {
        return true;
    }
    var vm = {
        activate: activate,
        title: title,
        res: resource.res,
        toggleview: shell.toggleleftmenu,
        showleftmenu: shell.showleftmenu,
        showNormal: shell.showNormal,
        notifications: ko.observable(0), // Add number here to show number of notifications in a badge
        compositionComplete: function () {
            var sidebar = document.getElementsByClassName("l-sidebarcontent")[0];
            var togglebar = document.getElementsByClassName("toggle-full-bar")[0];
            var menubar = document.getElementsByClassName("menubar")[0];
            //var mainview = document.getElementById("mainview");
            
            // Test via a getter in the options object to see if the passive property is accessed
            var supportsPassive = false;
            try {
                var opts = Object.defineProperty({}, 'passive', {
                    get: function () {
                        supportsPassive = true;
                    }
                });
                window.addEventListener("test", null, opts);
            } catch (e) { }

            sidebar.addEventListener('touchstart', handleTouchStart, supportsPassive ? { passive: true } : false);
            sidebar.addEventListener('touchmove', handleTouchMove, supportsPassive ? { passive: true } : false);
            togglebar.addEventListener('touchstart', handleTouchStart, supportsPassive ? { passive: true } : false);
            togglebar.addEventListener('touchmove', handleTouchMove, supportsPassive ? { passive: true } : false);
            menubar.addEventListener('touchstart', handleTouchStart, supportsPassive ? { passive: true } : false);
            menubar.addEventListener('touchmove', handleTouchMove, supportsPassive ? { passive: true } : false);
            //mainview.addEventListener('touchstart', handleTouchStart, supportsPassive ? { passive: true } : false);
            //mainview.addEventListener('touchmove', handleTouchMove, supportsPassive ? { passive: true } : false);
        }

    };

    app.on("currentFeatureChanged:trigger").then(function () {
        $('.nav-tabs a[href="#observationDetailsTab"]').tab('show');
        vm.showleftmenu();
    });
    app.on("showAboutPage:trigger").then(function () {
        $('.nav-tabs a[href="#aboutTab"]').tab('show');
        vm.showleftmenu();
    });
    app.on("showLegendPage:trigger").then(function () {
        $('.nav-tabs a[href="#legendTab"]').tab('show');
        vm.showleftmenu();
    });

    var xDown = null;
    var yDown = null;

    function handleTouchStart(evt) {
        xDown = evt.touches[0].clientX;
        yDown = evt.touches[0].clientY;
    }

    function handleTouchMove(evt) {
        if (!xDown || !yDown) {
            return;
        }

        var xUp = evt.touches[0].clientX;
        var yUp = evt.touches[0].clientY;

        var xDiff = xDown - xUp;
        var yDiff = yDown - yUp;

        if (Math.abs(xDiff) > Math.abs(yDiff)) {/*most significant*/
            if (xDiff > 0) {
                /* left swipe */
                vm.showNormal();
            } else {
                vm.showleftmenu();
                /* right swipe */
            }
        } else {
            if (yDiff > 0) {
                /* up swipe */
            } else {
                /* down swipe */
            }
        }
        /* reset values */
        xDown = null;
        yDown = null;
    }

    return vm;
});

define('viewmodels/legend',['services/logger', "knockout", 'durandal/app', 'services/application', 'services/layerConfig', 'services/resource'],
    function (logger, ko, app, application, layerConfig, resource) {
        "use strict";

        var vm = {
            res: resource.res,
            categoryLegendVisible: ko.observable(true),
            speciesLegendVisible: ko.observable(false),
            precisionLegendVisible: ko.observable(false),

            legendInfoVisible: ko.observable(false),
            toggleLegendInfo: function () {
                vm.legendInfoVisible(!vm.legendInfoVisible());
            },
            taxonLegend: application.taxonLegend,
            precisionLegend: application.precisionLegend
        };
        vm.useCategoryLegend = function () {
            vm.categoryLegendVisible(true);
            vm.speciesLegendVisible(false);
            vm.precisionLegendVisible(false);
            layerConfig.setStyleMode("category");
            application.filter.Style(1);
            application.filter.ForceRefreshToggle(!application.filter.ForceRefreshToggle());
        };
        vm.useSpeciesLegend = function () {
            vm.categoryLegendVisible(false);
            vm.speciesLegendVisible(true);
            vm.precisionLegendVisible(false);
            application.filter.Style(3);
            layerConfig.setStyleMode("species");
            application.filter.ForceRefreshToggle(!application.filter.ForceRefreshToggle());
        };
        vm.usePrecisionLegend = function () {
            vm.precisionLegendVisible(true);
            vm.categoryLegendVisible(false);
            vm.speciesLegendVisible(false);
            application.filter.Style(2);
            layerConfig.setStyleMode("precision");
            application.filter.ForceRefreshToggle(!application.filter.ForceRefreshToggle());
        };
        return vm;
    });

/*!
 * Knockout Mapping plugin v2.6.0
 * (c) 2013 Steven Sanderson, Roy Jacobs - http://knockoutjs.com/
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */
(function(factory) {
    'use strict';

    /*jshint sub:true,curly:false*/
    /*global ko,require,exports,define,module*/

    if (typeof require === "function" && typeof exports === "object" && typeof module === "object") {
        // CommonJS or Node: hard-coded dependency on "knockout"
        factory(require("knockout"), exports);
    }
    else if (typeof define === "function" && define["amd"]) {
        // AMD anonymous module with hard-coded dependency on "knockout"
        define('knockout-mapping',["knockout", "exports"], factory);
    }
    else {
        // <script> tag: use the global `ko` object, attaching a `mapping` property
        if (typeof ko === 'undefined') {
            throw new Error('Knockout is required, please ensure it is loaded before loading this mapping plug-in');
        }
        factory(ko, ko.mapping = {});
    }
}(function(ko, exports) {
    /*jshint sub:true,curly:false*/
    'use strict';

    ko.mapping = exports;

    var DEBUG=true;
    var mappingProperty = "__ko_mapping__";
    var realKoDependentObservable = ko.dependentObservable;
    var mappingNesting = 0;
    var dependentObservables;
    var visitedObjects;
    var recognizedRootProperties = ["create", "update", "key", "arrayChanged"];
    var emptyReturn = {};

    var _defaultOptions = {
        include: ["_destroy"],
        ignore: [],
        copy: [],
        observe: []
    };
    var defaultOptions = _defaultOptions;

    function unionArrays() {
        var args = arguments,
            l = args.length,
            obj = {},
            res = [],
            i, j, k;

        while (l--) {
            k = args[l];
            i = k.length;

            while (i--) {
                j = k[i];
                if (!obj[j]) {
                    obj[j] = 1;
                    res.push(j);
                }
            }
        }

        return res;
    }

    function extendObject(destination, source) {
        var destType;

        for (var key in source) {
            if (source.hasOwnProperty(key) && source[key]) {
                destType = exports.getType(destination[key]);
                if (key && destination[key] && destType !== "array" && destType !== "string") {
                    extendObject(destination[key], source[key]);
                }
                else {
                    var bothArrays = exports.getType(destination[key]) === "array" && exports.getType(source[key]) === "array";
                    if (bothArrays) {
                        destination[key] = unionArrays(destination[key], source[key]);
                    }
                    else {
                        destination[key] = source[key];
                    }
                }
            }
        }
    }

    function merge(obj1, obj2) {
        var merged = {};
        extendObject(merged, obj1);
        extendObject(merged, obj2);

        return merged;
    }

    exports.isMapped = function(viewModel) {
        var unwrapped = ko.utils.unwrapObservable(viewModel);
        return unwrapped && unwrapped[mappingProperty];
    };

    exports.fromJS = function(jsObject /*, inputOptions, target*/) {
        if (arguments.length === 0) {
            throw new Error("When calling ko.fromJS, pass the object you want to convert.");
        }
        try {
            if (!mappingNesting) {
                dependentObservables = [];
                visitedObjects = new ObjectLookup();
            }
            mappingNesting++;

            var options;
            var target;

            if (arguments.length === 2) {
                if (arguments[1][mappingProperty]) {
                    target = arguments[1];
                }
                else {
                    options = arguments[1];
                }
            }
            if (arguments.length === 3) {
                options = arguments[1];
                target = arguments[2];
            }

            if (target) {
                options = merge(options, target[mappingProperty]);
            }
            options = fillOptions(options);

            var result = updateViewModel(target, jsObject, options);
            if (target) {
                result = target;
            }

            // Evaluate any dependent observables that were proxied.
            // Do this after the model's observables have been created
            if (!--mappingNesting) {
                while (dependentObservables.length) {
                    var DO = dependentObservables.pop();
                    if (DO) {
                        DO();
                        // Move this magic property to the underlying dependent observable
                        DO.__DO["throttleEvaluation"] = DO["throttleEvaluation"];
                    }
                }
            }

            // Save any new mapping options in the view model, so that updateFromJS can use them later.
            result[mappingProperty] = merge(result[mappingProperty], options);

            return result;
        }
        catch (e) {
            mappingNesting = 0;
            throw e;
        }
    };

    exports.fromJSON = function(jsonString /*, options, target*/) {
        var args = Array.prototype.slice.call(arguments, 0);
        args[0] = ko.utils.parseJson(jsonString);
        return exports.fromJS.apply(this, args);
    };

    exports.toJS = function(rootObject, options) {
        if (!defaultOptions) exports.resetDefaultOptions();

        if (arguments.length === 0) throw new Error("When calling ko.mapping.toJS, pass the object you want to convert.");
        if (exports.getType(defaultOptions.ignore) !== "array") throw new Error("ko.mapping.defaultOptions().ignore should be an array.");
        if (exports.getType(defaultOptions.include) !== "array") throw new Error("ko.mapping.defaultOptions().include should be an array.");
        if (exports.getType(defaultOptions.copy) !== "array") throw new Error("ko.mapping.defaultOptions().copy should be an array.");

        // Merge in the options used in fromJS
        options = fillOptions(options, rootObject[mappingProperty]);

        // We just unwrap everything at every level in the object graph
        return exports.visitModel(rootObject, function(x) {
            return ko.utils.unwrapObservable(x);
        }, options);
    };

    exports.toJSON = function(rootObject, options, replacer, space) {
        var plainJavaScriptObject = exports.toJS(rootObject, options);
        return ko.utils.stringifyJson(plainJavaScriptObject, replacer, space);
    };

    exports.defaultOptions = function() {
        if (arguments.length > 0) {
            defaultOptions = arguments[0];
        }
        else {
            return defaultOptions;
        }
    };

    exports.resetDefaultOptions = function() {
        defaultOptions = {
            include: _defaultOptions.include.slice(0),
            ignore: _defaultOptions.ignore.slice(0),
            copy: _defaultOptions.copy.slice(0),
            observe: _defaultOptions.observe.slice(0)
        };
    };

    exports.getType = function(x) {
        if ((x) && (typeof (x) === "object")) {
            if (x.constructor === Date) return "date";
            if (x.constructor === Array) return "array";
        }
        return typeof x;
    };

    function fillOptions(rawOptions, otherOptions) {
        var options = merge({}, rawOptions);

        // Move recognized root-level properties into a root namespace
        for (var i = recognizedRootProperties.length - 1; i >= 0; i--) {
            var property = recognizedRootProperties[i];

            // Carry on, unless this property is present
            if (!options[property]) continue;

            // Move the property into the root namespace
            if (!(options[""] instanceof Object)) options[""] = {};
            options[""][property] = options[property];
            delete options[property];
        }

        if (otherOptions) {
            options.ignore = mergeArrays(otherOptions.ignore, options.ignore);
            options.include = mergeArrays(otherOptions.include, options.include);
            options.copy = mergeArrays(otherOptions.copy, options.copy);
            options.observe = mergeArrays(otherOptions.observe, options.observe);
        }
        options.ignore = mergeArrays(options.ignore, defaultOptions.ignore);
        options.include = mergeArrays(options.include, defaultOptions.include);
        options.copy = mergeArrays(options.copy, defaultOptions.copy);
        options.observe = mergeArrays(options.observe, defaultOptions.observe);

        options.mappedProperties = options.mappedProperties || {};
        options.copiedProperties = options.copiedProperties || {};
        return options;
    }

    function mergeArrays(a, b) {
        if (a === undefined) {
            a = [];
        }
        else if (exports.getType(a) !== "array") {
            a = [a];
        }

        if (b === undefined) {
            b = [];
        }
        else if (exports.getType(b) !== "array") {
            b = [b];
        }

        return ko.utils.arrayGetDistinctValues(a.concat(b));
    }

    // When using a 'create' callback, we proxy the dependent observable so that it doesn't immediately evaluate on creation.
    // The reason is that the dependent observables in the user-specified callback may contain references to properties that have not been mapped yet.
    function withProxyDependentObservable(dependentObservables, callback) {
        var localDO = ko.dependentObservable;
        ko.dependentObservable = function(read, owner, options) {
            options = options || {};

            if (read && typeof read === "object") { // mirrors condition in knockout implementation of DO's
                options = read;
            }

            var realDeferEvaluation = options.deferEvaluation;
            var realIsPure = options.pure;

            var isRemoved = false;

            // We wrap the original dependent observable so that we can remove it from the 'dependentObservables' list we need to evaluate after mapping has
            // completed if the user already evaluated the DO themselves in the meantime.
            var wrap = function(DO) {
                // Temporarily revert ko.dependentObservable, since it is used in ko.isWriteableObservable
                var tmp = ko.dependentObservable;
                ko.dependentObservable = realKoDependentObservable;
                var isWriteable = ko.isWriteableObservable(DO);
                ko.dependentObservable = tmp;

                var wrapped = realKoDependentObservable({
                    read: function() {
                        if (!isRemoved) {
                            ko.utils.arrayRemoveItem(dependentObservables, DO);
                            isRemoved = true;
                        }
                        return DO.apply(DO, arguments);
                    },
                    write: isWriteable && function(val) {
                        return DO(val);
                    },
                    deferEvaluation: true
                });
                if (DEBUG) wrapped._wrapper = true;
                wrapped.__DO = DO;
                return wrapped;
            };

            options.deferEvaluation = true; // will either set for just options, or both read/options.
            var realDependentObservable = realKoDependentObservable(read, owner, options);

            if (!realDeferEvaluation && !realIsPure) {
                realDependentObservable = wrap(realDependentObservable);
                dependentObservables.push(realDependentObservable);
            }

            return realDependentObservable;
        };
        ko.dependentObservable.fn = realKoDependentObservable.fn;
        ko.computed = ko.dependentObservable;
        var result = callback();
        ko.dependentObservable = localDO;
        ko.computed = ko.dependentObservable;
        return result;
    }

    function updateViewModel(mappedRootObject, rootObject, options, parentName, parent, parentPropertyName, mappedParent) {
        var isArray = exports.getType(ko.utils.unwrapObservable(rootObject)) === "array";

        parentPropertyName = parentPropertyName || "";

        // If this object was already mapped previously, take the options from there and merge them with our existing ones.
        if (exports.isMapped(mappedRootObject)) {
            var previousMapping = ko.utils.unwrapObservable(mappedRootObject)[mappingProperty];
            options = merge(previousMapping, options);
        }

        var callbackParams = {
            data: rootObject,
            parent: mappedParent || parent
        };

        var hasCreateCallback = function() {
            return options[parentName] && options[parentName].create instanceof Function;
        };

        var createCallback = function(data) {
            return withProxyDependentObservable(dependentObservables, function() {

                if (ko.utils.unwrapObservable(parent) instanceof Array) {
                    return options[parentName].create({
                        data: data || callbackParams.data,
                        parent: callbackParams.parent,
                        skip: emptyReturn
                    });
                }
                else {
                    return options[parentName].create({
                        data: data || callbackParams.data,
                        parent: callbackParams.parent
                    });
                }
            });
        };

        var hasUpdateCallback = function() {
            return options[parentName] && options[parentName].update instanceof Function;
        };

        var updateCallback = function(obj, data) {
            var params = {
                data: data || callbackParams.data,
                parent: callbackParams.parent,
                target: ko.utils.unwrapObservable(obj)
            };

            if (ko.isWriteableObservable(obj)) {
                params.observable = obj;
            }

            return options[parentName].update(params);
        };

        var alreadyMapped = visitedObjects.get(rootObject);
        if (alreadyMapped) {
            return alreadyMapped;
        }

        parentName = parentName || "";

        if (!isArray) {
            // For atomic types, do a direct update on the observable
            if (!canHaveProperties(rootObject)) {
                switch (exports.getType(rootObject)) {
                    case "function":
                        if (hasUpdateCallback()) {
                            if (ko.isWriteableObservable(rootObject)) {
                                rootObject(updateCallback(rootObject));
                                mappedRootObject = rootObject;
                            }
                            else {
                                mappedRootObject = updateCallback(rootObject);
                            }
                        }
                        else {
                            mappedRootObject = rootObject;
                        }
                        break;
                    default:
                        if (ko.isWriteableObservable(mappedRootObject)) {
                            var valueToWrite;
                            if (hasUpdateCallback()) {
                                valueToWrite = updateCallback(mappedRootObject);
                                mappedRootObject(valueToWrite);
                                return valueToWrite;
                            }
                            else {
                                valueToWrite = ko.utils.unwrapObservable(rootObject);
                                mappedRootObject(valueToWrite);
                                return valueToWrite;
                            }
                        }
                        else {
                            var hasCreateOrUpdateCallback = hasCreateCallback() || hasUpdateCallback();

                            if (hasCreateCallback()) {
                                mappedRootObject = createCallback();
                            }
                            else {
                                mappedRootObject = ko.observable(ko.utils.unwrapObservable(rootObject));
                            }

                            if (hasUpdateCallback()) {
                                mappedRootObject(updateCallback(mappedRootObject));
                            }

                            if (hasCreateOrUpdateCallback) return mappedRootObject;
                        }
                }

            }
            else {
                mappedRootObject = ko.utils.unwrapObservable(mappedRootObject);
                if (!mappedRootObject) {
                    if (hasCreateCallback()) {
                        var result = createCallback();

                        if (hasUpdateCallback()) {
                            result = updateCallback(result);
                        }
                        return result;
                    }
                    else {
                        if (hasUpdateCallback()) {
                            //Removed ambiguous parameter result
                            return updateCallback();
                        }
                        mappedRootObject = {};
                    }
                }

                if (hasUpdateCallback()) {
                    mappedRootObject = updateCallback(mappedRootObject);
                }

                visitedObjects.save(rootObject, mappedRootObject);
                if (hasUpdateCallback()) return mappedRootObject;

                // For non-atomic types, visit all properties and update recursively
                visitPropertiesOrArrayEntries(rootObject, function(indexer) {
                    var fullPropertyName = parentPropertyName.length ? parentPropertyName + "." + escapePropertyNameComponent(indexer) : escapePropertyNameComponent(indexer);

                    if (ko.utils.arrayIndexOf(options.ignore, fullPropertyName) !== -1) {
                        return;
                    }

                    if (ko.utils.arrayIndexOf(options.copy, fullPropertyName) !== -1) {
                        mappedRootObject[indexer] = rootObject[indexer];
                        return;
                    }

                    if (typeof rootObject[indexer] !== "object" && exports.getType(rootObject[indexer]) !== "array" && options.observe.length > 0 && ko.utils.arrayIndexOf(options.observe, fullPropertyName) === -1) {
                        mappedRootObject[indexer] = rootObject[indexer];
                        options.copiedProperties[fullPropertyName] = true;
                        return;
                    }

                    // In case we are adding an already mapped property, fill it with the previously mapped property value to prevent recursion.
                    // If this is a property that was generated by fromJS, we should use the options specified there
                    var prevMappedProperty = visitedObjects.get(rootObject[indexer]);
                    var retval = updateViewModel(mappedRootObject[indexer], rootObject[indexer], options, indexer, mappedRootObject, fullPropertyName, mappedRootObject);
                    var value = prevMappedProperty || retval;

                    if (options.observe.length > 0 && ko.utils.arrayIndexOf(options.observe, fullPropertyName) === -1) {
                        mappedRootObject[indexer] = ko.utils.unwrapObservable(value);
                        options.copiedProperties[fullPropertyName] = true;
                        return;
                    }

                    if (ko.isWriteableObservable(mappedRootObject[indexer])) {
                        value = ko.utils.unwrapObservable(value);
                        if (mappedRootObject[indexer]() !== value) {
                            mappedRootObject[indexer](value);
                        }
                    }
                    else {
                        value = mappedRootObject[indexer] === undefined ? value : ko.utils.unwrapObservable(value);
                        mappedRootObject[indexer] = value;
                    }

                    options.mappedProperties[fullPropertyName] = true;
                });
            }
        }
        else { //mappedRootObject is an array
            var changes = [];

            var hasKeyCallback = false;
            var keyCallback = function(x) {
                return x;
            };
            if (options[parentName] && options[parentName].key) {
                keyCallback = options[parentName].key;
                hasKeyCallback = true;
            }

            if (!ko.isObservable(mappedRootObject)) {
                // When creating the new observable array, also add a bunch of utility functions that take the 'key' of the array items into account.
                mappedRootObject = ko.observableArray([]);

                mappedRootObject.mappedRemove = function(valueOrPredicate) {
                    var predicate = typeof valueOrPredicate === "function" ? valueOrPredicate : function(value) {
                        return value === keyCallback(valueOrPredicate);
                    };
                    return mappedRootObject.remove(function(item) {
                        return predicate(keyCallback(item));
                    });
                };

                mappedRootObject.mappedRemoveAll = function(arrayOfValues) {
                    var arrayOfKeys = filterArrayByKey(arrayOfValues, keyCallback);
                    return mappedRootObject.remove(function(item) {
                        return ko.utils.arrayIndexOf(arrayOfKeys, keyCallback(item)) !== -1;
                    });
                };

                mappedRootObject.mappedDestroy = function(valueOrPredicate) {
                    var predicate = typeof valueOrPredicate === "function" ? valueOrPredicate : function(value) {
                        return value === keyCallback(valueOrPredicate);
                    };
                    return mappedRootObject.destroy(function(item) {
                        return predicate(keyCallback(item));
                    });
                };

                mappedRootObject.mappedDestroyAll = function(arrayOfValues) {
                    var arrayOfKeys = filterArrayByKey(arrayOfValues, keyCallback);
                    return mappedRootObject.destroy(function(item) {
                        return ko.utils.arrayIndexOf(arrayOfKeys, keyCallback(item)) !== -1;
                    });
                };

                mappedRootObject.mappedIndexOf = function(item) {
                    var keys = filterArrayByKey(mappedRootObject(), keyCallback);
                    var key = keyCallback(item);
                    return ko.utils.arrayIndexOf(keys, key);
                };

                mappedRootObject.mappedGet = function(item) {
                    return mappedRootObject()[mappedRootObject.mappedIndexOf(item)];
                };

                mappedRootObject.mappedCreate = function(value) {
                    if (mappedRootObject.mappedIndexOf(value) !== -1) {
                        throw new Error("There already is an object with the key that you specified.");
                    }
                    var item = hasCreateCallback() ? createCallback(value) : value;
                    if (hasUpdateCallback()) {
                        var newValue = updateCallback(item, value);
                        if (ko.isWriteableObservable(item)) {
                            item(newValue);
                        }
                        else {
                            item = newValue;
                        }
                    }
                    mappedRootObject.push(item);
                    return item;
                };
            }

            var currentArrayKeys = filterArrayByKey(ko.utils.unwrapObservable(mappedRootObject), keyCallback).sort();
            var newArrayKeys = filterArrayByKey(rootObject, keyCallback);
            if (hasKeyCallback) newArrayKeys.sort();
            var editScript = ko.utils.compareArrays(currentArrayKeys, newArrayKeys);

            var ignoreIndexOf = {};

            var i, j, key;

            var unwrappedRootObject = ko.utils.unwrapObservable(rootObject);
            var itemsByKey = {};
            var optimizedKeys = true;
            for (i = 0, j = unwrappedRootObject.length; i < j; i++) {
                key = keyCallback(unwrappedRootObject[i]);
                if (key === undefined || key instanceof Object) {
                    optimizedKeys = false;
                    break;
                }
                itemsByKey[key] = unwrappedRootObject[i];
            }

            var newContents = [];
            var passedOver = 0;
            var item, index;

            for (i = 0, j = editScript.length; i < j; i++) {
                key = editScript[i];
                var mappedItem;
                var fullPropertyName = parentPropertyName + "[" + escapePropertyNameComponent(i) + "]";

                switch (key.status) {
                    case "added":
                        item = optimizedKeys ? itemsByKey[key.value] : getItemByKey(ko.utils.unwrapObservable(rootObject), key.value, keyCallback);
                        mappedItem = updateViewModel(undefined, item, options, parentName, mappedRootObject, fullPropertyName, parent);
                        if (!hasCreateCallback()) {
                            mappedItem = ko.utils.unwrapObservable(mappedItem);
                        }

                        index = ignorableIndexOf(ko.utils.unwrapObservable(rootObject), item, ignoreIndexOf);

                        if (mappedItem === emptyReturn) {
                            passedOver++;
                        }
                        else {
                            newContents[index - passedOver] = mappedItem;
                        }

                        ignoreIndexOf[index] = true;
                        break;
                    case "retained":
                        item = optimizedKeys ? itemsByKey[key.value] : getItemByKey(ko.utils.unwrapObservable(rootObject), key.value, keyCallback);
                        mappedItem = getItemByKey(mappedRootObject, key.value, keyCallback);
                        updateViewModel(mappedItem, item, options, parentName, mappedRootObject, fullPropertyName, parent);

                        index = ignorableIndexOf(ko.utils.unwrapObservable(rootObject), item, ignoreIndexOf);
                        newContents[index] = mappedItem;
                        ignoreIndexOf[index] = true;
                        break;
                    case "deleted":
                        mappedItem = getItemByKey(mappedRootObject, key.value, keyCallback);
                        break;
                }

                changes.push({
                    event: key.status,
                    item: mappedItem
                });
            }

            mappedRootObject(newContents);

            if (options[parentName] && options[parentName].arrayChanged) {
                ko.utils.arrayForEach(changes, function(change) {
                    options[parentName].arrayChanged(change.event, change.item);
                });
            }
        }

        return mappedRootObject;
    }

    function ignorableIndexOf(array, item, ignoreIndices) {
        for (var i = 0, j = array.length; i < j; i++) {
            if (ignoreIndices[i] === true) continue;
            if (array[i] === item) return i;
        }
        return null;
    }

    function mapKey(item, callback) {
        var mappedItem;
        if (callback) mappedItem = callback(item);
        if (exports.getType(mappedItem) === "undefined") mappedItem = item;

        return ko.utils.unwrapObservable(mappedItem);
    }

    function getItemByKey(array, key, callback) {
        array = ko.utils.unwrapObservable(array);
        for (var i = 0, j = array.length; i < j; i++) {
            var item = array[i];
            if (mapKey(item, callback) === key) return item;
        }

        throw new Error("When calling ko.update*, the key '" + key + "' was not found!");
    }

    function filterArrayByKey(array, callback) {
        return ko.utils.arrayMap(ko.utils.unwrapObservable(array), function(item) {
            if (callback) {
                return mapKey(item, callback);
            }
            else {
                return item;
            }
        });
    }

    function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {
        if (exports.getType(rootObject) === "array") {
            for (var i = 0; i < rootObject.length; i++)
                visitorCallback(i);
        }
        else {
            for (var propertyName in rootObject) {
                if (rootObject.hasOwnProperty(propertyName)) {
                    visitorCallback(propertyName);
                }
            }
        }
    }

    function canHaveProperties(object) {
        if (object === null) {
            return false;
        }
        var type = exports.getType(object);
        return (type === "object") || (type === "array");
    }

    // Based on the parentName, this creates a fully classified name of a property

    function getPropertyName(parentName, parent, indexer) {
        var propertyName = parentName || "";
        if (exports.getType(parent) === "array") {
            if (parentName) {
                propertyName += "[" + escapePropertyNameComponent(indexer) + "]";
            }
        }
        else {
            if (parentName) {
                propertyName += ".";
            }
            propertyName += escapePropertyNameComponent(indexer);
        }
        return propertyName;
    }

    function escapePropertyNameComponent(indexer) {
        var escapedIndexer  = (''+indexer)
            .replace(/~/g, '~~')
            .replace(/\[/g, '~[')
            .replace(/]/g, '~]')
            .replace(/\./g, '~.');
        return escapedIndexer;
    }


    exports.visitModel = function(rootObject, callback, options) {
        options = options || {};
        options.visitedObjects = options.visitedObjects || new ObjectLookup();

        var mappedRootObject;
        var unwrappedRootObject = ko.utils.unwrapObservable(rootObject);

        if (!canHaveProperties(unwrappedRootObject)) {
            return callback(rootObject, options.parentName);
        }
        else {
            options = fillOptions(options, unwrappedRootObject[mappingProperty]);

            // Only do a callback, but ignore the results
            callback(rootObject, options.parentName);
            mappedRootObject = exports.getType(unwrappedRootObject) === "array" ? [] : {};
        }

        options.visitedObjects.save(rootObject, mappedRootObject);

        var parentName = options.parentName;
        visitPropertiesOrArrayEntries(unwrappedRootObject, function(indexer) {
            var escapedIndexer = escapePropertyNameComponent(indexer);
            if (options.ignore && ko.utils.arrayIndexOf(options.ignore, escapedIndexer) !== -1) return;

            var propertyValue = unwrappedRootObject[indexer];
            options.parentName = getPropertyName(parentName, unwrappedRootObject, indexer);

            // If we don't want to explicitly copy the unmapped property...
            if (ko.utils.arrayIndexOf(options.copy, escapedIndexer) === -1) {
                // ...find out if it's a property we want to explicitly include
                if (ko.utils.arrayIndexOf(options.include, escapedIndexer) === -1) {
                    // The mapped properties object contains all the properties that were part of the original object.
                    // If a property does not exist, and it is not because it is part of an array (e.g. "myProp[3]"), then it should not be unmapped.
                    var unwrappedRootMappingProperty = unwrappedRootObject[mappingProperty];
                    if (unwrappedRootMappingProperty) {
                        var mappedProperties = unwrappedRootMappingProperty.mappedProperties;
                        if (mappedProperties && !mappedProperties[escapedIndexer]) {
                            var copiedProperties = unwrappedRootMappingProperty.copiedProperties;
                            if (copiedProperties && !copiedProperties[escapedIndexer] && (exports.getType(unwrappedRootObject) !== "array")) {
                                return;
                            }
                        }
                    }
                }
            }

            switch (exports.getType(ko.utils.unwrapObservable(propertyValue))) {
                case "object":
                case "array":
                case "undefined":
                    var previouslyMappedValue = options.visitedObjects.get(propertyValue);
                    mappedRootObject[indexer] = (exports.getType(previouslyMappedValue) !== "undefined") ? previouslyMappedValue : exports.visitModel(propertyValue, callback, options);
                    break;
                default:
                    mappedRootObject[indexer] = callback(propertyValue, options.parentName);
            }
        });

        return mappedRootObject;
    };

    function SimpleObjectLookup() {
        var keys = [];
        var values = [];
        this.save = function(key, value) {
            var existingIndex = ko.utils.arrayIndexOf(keys, key);
            if (existingIndex >= 0) values[existingIndex] = value;
            else {
                keys.push(key);
                values.push(value);
            }
        };
        this.get = function(key) {
            var existingIndex = ko.utils.arrayIndexOf(keys, key);
            var value = (existingIndex >= 0) ? values[existingIndex] : undefined;
            return value;
        };
    }

    function ObjectLookup() {
        var buckets = {};

        var findBucket = function(key) {
            var bucketKey;
            try {
                bucketKey = key;//JSON.stringify(key);
            }
            catch (e) {
                bucketKey = "$$$";
            }

            var bucket = buckets[bucketKey];
            if (!buckets.hasOwnProperty(bucketKey)) {
                bucket = new SimpleObjectLookup();
                buckets[bucketKey] = bucket;
            }
            return bucket;
        };

        this.save = function(key, value) {
            findBucket(key).save(key, value);
        };
        this.get = function(key) {
            return findBucket(key).get(key);
        };
    }
}));

define('viewmodels/listToolbar',['services/logger', "knockout", 'services/dataServices', 'services/application', 'viewmodels/shell', 'durandal/app', 'services/resource', 'viewmodels/nav', 'knockout-mapping'],
    function (logger, ko, dataServices, application, shell, app, resource, nav) {
        "use strict";

        var vm = {
            title: "List toolbar",
            resource: resource,
            res: resource.res,
            activate: function () {
                application.setActiveLanguage();
                application.initBookmarks();
                vm.updateTotal();
            },         
            totalListItems: application.totalCount, //ko.observable(0),
            maxExportItems: ko.observable(application.config.maxExportItems),

            showSpinner: ko.observable(false),
            exportGml: function() {
                vm.showSpinner(true);
                dataServices.exportObservationsAsGmlBySearchFilter(application.filter)
                    .then(function(exportFile) {
                        dataServices.downloadFile(exportFile, 'text/xml', 'data.gml', false);
                        vm.showSpinner(false);
                    });
            },
            exportXml: function() {
                vm.showSpinner(true);
                dataServices.exportObservationsBySearchFilter(application.filter)
                    .then(function(exportFile) {
                        dataServices.downloadFile(exportFile, 'text/xml', 'data.xml', false);
                        vm.showSpinner(false);
                    });
            },
            exportShape: function() {
                vm.showSpinner(true);
                dataServices.exportObservationsAsShapeBySearchFilter(application.filter);
            },
            exportExcel: function() {
                vm.showSpinner(true);
                //dataServices.exportObservationsToXlsx(application.filter);
                // todo: Svetlana 
                // Informasjon om eksportformat parameter excel/csv må være med inn
                dataServices.createObservationsExportJob(application.filter, "xlsx")
                    .then(function(newExportStatus) {
                        application.addExport(newExportStatus);
                        nav.gotoTab(nav.navTabs.find(function (element) {
                            return element.id === 'exportStatus';
                        }));
                        vm.showSpinner(false);
                    });
            },
            
            exportCsv: function () {
                vm.showSpinner(true);
                // Informasjon om eksportformat parameter excel/csv må være med inn
                dataServices.createObservationsExportJob(application.filter, "csv")
                    .then(function (newExportStatus) {
                        application.addExport(newExportStatus);
                        var desc = newExportStatus.Filter;
                        nav.gotoTab(nav.navTabs.find(function (element) {
                            return element.id === 'exportStatus';
                        }));
                        vm.showSpinner(false);
                    });
                dataServices.getSearchFilterDescription(application.filter).then(function (data) {
                    var test = data;

                })
                //var test = dataServices
            },
            exportVerbatim: function () {
                vm.showSpinner(true);
                dataServices.exportObservationsVerbatim(application.filter);
            },
            //toggleFullscreen: shell.toggleFullscreen,

            bookmarks: application.bookmarks,

            openBookmarks: ko.observable(false),
            toggleBookmarksContainer: function() {
                vm.openBookmarks(!vm.openBookmarks());
            },
            applyFilter: function(bookmark) {
                application.applyFilter(bookmark);

                // Transform url to point to list
                var listUrl = bookmark.url;
                listUrl = listUrl.replace("#map", "#list");
                window.location.assign(listUrl);
            },
            updateTotal: function() {
                dataServices.getObservationCount(application.listFilter(), 'List').then(function (result) {
                    //console.debug(result);
                    vm.totalListItems(result || 0);
                });
            }
        };

        vm.tiledBookmarks = ko.computed(function () {
            var c = 0, r = [], b = application.bookmarks();
            while (c < b.length) {
                r.push(b.slice(c, c += 5));
            }
            return r;
        });

        app.on('downloadFile:done').then(function(filename) {
            vm.showSpinner(false);
        });
        application.filterChanged.subscribe(function (value) {
            vm.updateTotal();
        });
        vm.exportEnabled = ko.computed(function() {
            return vm.totalListItems() < application.config.maxExportItems;
        }, this);

        return vm;
    });
  

define('viewmodels/listView',['durandal/app', 'services/createPagedList', 'lodash', 'knockout', 'services/config', 'services/dataServices', 'services/application', 'viewmodels/listToolbar', 'viewmodels/nav', 'services/adbFuncs', 'services/codeLists', 'services/resource'],
    function (app, pagedList, _, ko, config, dataServices, application, toolbar, nav, adb, codelists, resource) {
                  
        
        var getListData = function (page) {
                var maxListItems = $('body').width() > 481 ? application.config.maxListItems : application.config.maxMobileListItems;
                var listFilter = application.listFilter();
                listFilter.IndexFrom = maxListItems * page + 1;
                listFilter.IndexTo = maxListItems + maxListItems * page;      
                

                var promise = dataServices.searchObservations(listFilter /*, page*/),
                    result = promise.then(function (featureData) {
                        var resultList = [];
                        var totalPages = ko.observable(1);
                        if (featureData !== undefined && featureData !== null) {

                            for (var i = 0; i < featureData.length; i++) {
                                var location = featureData[i];
                                for (var j = 0; j < location.Observations.length; j++) {

                                    var feature = {};
                                    feature.municipality = '';
                                    feature.county = '';
                                    feature.coordinatePrecision = location.CoordinatePrecision;
                                    //feature.locality = location.Locality;
                                    feature.locationId = location.Id;
                                    feature.longitude = location.Longitude;
                                    feature.latitude = location.Latitude;
                                    
                                    for (var k = 0; k < (location.Areas ? location.Areas.length : 0); k++) {
                                        var area = location.Areas[k];
                                        switch (area.Type) {
                                            case 1:
                                                feature.municipality = area.Name || '';
                                                break;
                                            case 2:
                                                feature.county = area.Name || '';
                                                break;
                                            case 3:
                                                feature.conservationArea = area.Name || '';
                                                feature.conservationAreaCode = area.Code || '';
                                                break;
                                        }
                                    }
                                    
                                    var observation = location.Observations[j];
                                    feature.locality = observation.Locality;
                                    
                                    if (observation.Institution) {
                                        feature.institutionName = observation.Institution.Name;
                                        feature.institutionUrl = observation.Institution.Url;
                                    }
                                    if (observation.Collection) {
                                        feature.collectionName = observation.Collection.Name || '';
                                    }
                                    feature.id = observation.Id || '';
                                    feature.status = config.categoryMapping[observation.Category] || '';
                                    if (observation.Taxons) {
                                        var taxon = observation.Taxons[observation.Taxons.length - 1];
                                        feature.scientificName = taxon.ScientificName || '';
                                        feature.scientificNameAuthor = taxon.ScientificNameAuthor || '';
                                                                                              
                                        feature.popularName = adb.getPopularName(taxon, vm.language());                                       
                                    }
                                    feature.taxonGroupName = observation.TaxonGroup.Name || '';
                                    feature.collected = application.formatDate(observation.Collected) || '';
                                    feature.collector = dataServices.setCollectorsNames(observation.Collector) || '';
                                    feature.individualCount = observation.IndividualCount || '';
                                    feature.basisOfRecord = observation.BasisOfRecord  ? config['basisOfRecordMapping' + vm.res().code][observation.BasisOfRecord] : '';
                                    feature.behavior = '';
                                    if (observation.Behaviors){
                                        for (var b = 0; b <= observation.Behaviors.length - 1; b++) {
                                            feature.behavior = feature.behavior + config['behaviorMapping' + vm.res().code][observation.Behaviors[b]] + " ";
                                        }
                                    }
                                    feature.identifiedBy = observation.IdentifiedBy || '';
                                    feature.verified = observation.Verified || '';

                                    resultList.push(feature);
                                }
                            }
                            totalPages(Math.ceil(toolbar.totalListItems() / maxListItems));
                        }
                        return {
                            itemList: resultList,
                            totalPages: totalPages
                        };
                    });
                return result;
            },

            vm = pagedList(getListData);           

        // // Check if the array has a term in a given language and return the number of the element in the array that has this language 
        // vm.containsLanguage = function (nameList, lang) {
        //     var index = -1;
        //     for (var i = 0; i < nameList.length; i++) {
        //         if (nameList[i].Lang == lang) {
        //             index = i;
        //         }
        //     }
        //     return index;
        // };
        
        vm.listSortOrder({
            NatureLevelDescription: true,
            SurveyScale: true,
            SurveyedYear: true,
            Contractor: true,
            Surveyer: true,
            Program: true,
            Parameters: {
                MainTypeDescription: true,
                CodeDescription: true,
                Share: true
            },
            natureAreaDescriptionVariables: {
                codeAndValue: true
            }
        });
        // Initial language
        vm.language = application.treeLanguage;    
        vm.title = "FeatureList";
        vm.totalListItems = toolbar.totalListItems;
        vm.addSeparator = application.addSeparator;

        // Language choice when user clicks on a button in the tree       
        vm.changeLanguage = function () {
            $('#bokmal-tre').on('click', function () {
                vm.language('nb-NO');
                vm.updateSelection();
            });
            $('#nynorsk-tre').on('click', function () {
                vm.language('nn-NO');
                vm.updateSelection();
            });

            $('#samisk').on('click', function () {
                vm.language('se-NO');
                vm.updateSelection();
            });                        
        };

        vm.setLanguage = function () {
            if ($('#bokmal-tre').hasClass('active')) {                
                vm.language('nb-NO');
            } else if ($('#nynorsk-tre').hasClass('active')) {                
                vm.language('nn-NO');
            } else if ($('#samisk').hasClass('active')) {
                vm.language('se-NO');
            }
        };

        vm.maxListItems = ko.computed(function () {
            // Check for mobile and limit nr of rows to 3 if on mobile
            if ($('body').width() > 481) {
                return Math.min(application.config.maxListItems, toolbar.totalListItems());
            }
            return Math.min(application.config.maxMobileListItems, toolbar.totalListItems());
        }, this);

        application.filterChanged.subscribe(function (value) {
            if (nav.activeView() === 'list') {
                vm.updateSelection();
            }
        });
        vm.showDetails = function (index, feature, event, position, container) {
            dataServices.getObservation(feature.id).then(function (obsInfo) {
                var data = [{
                    CoordinatePrecision: feature.coordinatePrecision,
                    Locality: feature.locality,
                    Id: feature.locationId,
                    Longitude: feature.longitude,
                    Latitude: feature.latitude,
                    ObservationCount: 1,
                    Observations: [
                        obsInfo
                    ],
                    Areas: [
                        {
                            Name: feature.county,
                            Type: 2
                        },
                        {
                            Name: feature.municipality,
                            Type: 1
                        },
                        {
                            Name: feature.conservationArea,
                            Code: feature.conservationAreaCode,
                            Type: 3
                        }]
                }];
                application.currentFeature(data);
                app.trigger("currentFeatureChanged:trigger");
            });

        };
        // update popular names in view model on change of the language
        vm.language.subscribe(function (changeLang) {
            vm.updateSelection();
        });
        return vm;
    });



define('viewmodels/mainPanel',['services/logger', "knockout", "durandal/app", "services/cssclass", 'viewmodels/shell', 'viewmodels/nav', 'services/resource', "services/application"],
    function (logger, ko, app, selector, shell, nav, resource, application) {
        var title = 'MainPanel',
            vm,
            //mainviewSize = ko.observable(null),
            activate = function () {
                nav.activate();
                return true;
            },
            toolbar = ko.computed(function () {
                var activeView = nav.activeView();
                switch(activeView) {
                    case "map":
                        return "viewmodels/mapToolbar";
                    case "list":
                        return "viewmodels/listToolbar";
                    case "statistics":
                        return "viewmodels/statisticsToolbar";
                    case "gallery":
                        return "viewmodels/galleryToolbar";
                    default:
                        return undefined;
                }
            }),
            attached = function () {
                var mainview = selector.getElement("mainview");
                //app.on('main:resized').then(function (elem) {
                //    mainviewSize("height: " + mainview.clientHeight + " width: " + mainview.clientWidth);
                //});
                app.on('mainToolbar:show').then(function (toolbar) {
                    vm.toolbar(toolbar);
                });
                app.on('mainToolbar:remove').then(function (toolbar) {
                    if (vm.toolbar() === toolbar) {
                        vm.toolbar(undefined);
                    }
                });
            };

        vm = {
            res: resource.res,
            activate: activate,
            attached: attached,
            title: title,
            //mainviewSize: mainviewSize,
            //toggleFullscreen: shell.toggleFullscreen,
            toggleleftmenu: shell.toggleleftmenu,
            toolbar: toolbar,
            activeView: nav.activeView,
            navTabs: nav.navTabs,
            activeNavTab: nav.activeNavTab,
            gotoTab: nav.gotoTab,
            lastLink: ko.observable(""),

            languageVisible: ko.observable(false),
            toggleLanguageVisible: function () {

                if (vm.languageVisible()) {
                    vm.closeDropdown();
                } else {
                    vm.openDropdown();
                };
            },

            openDropdown: function () {
                $(".dropdown-menu-left").css("display", "block");
                vm.languageVisible(true);
            },

            closeDropdown: function () {
                $(".dropdown-menu-left").css("display", "none");
                vm.languageVisible(false);
            }
        };
        return vm;
    });

define('viewmodels/mapToolbar',['services/logger', "knockout", 'durandal/app', "services/application", "services/config", "services/dataServices", "viewmodels/mapOl3", "services/layerConfig", "viewmodels/mainPanel", 'services/resource', "services/knockoutExtensions", 'viewmodels/shell'],
    function (logger, ko, app, application, config, dataServices, map, layerConfig, mainPanel, resource, jqAutoComplete, shell) {
        "use strict";

        var bookmarkThumbCanvas;

        var vpstate = application.viewportState,
            isGBNr = function(searchTerm) {
                return searchTerm.match(/^\d+[\/-]\d+[\/-]\d+$/);
            },

            vm = {
                currentBaseLayer: ko.observable(""),
                baseLayerList: ([
                    "greyMap", "openStreetMap", "nibwmts", "terreng", "sjokart", "topo2", "svalbard", "janMayen",
                    "road", "aerialWithLabels"
                ]),
                activeOverlayLayers: ko.observable(""),
                title: "Map toolbar",
                resource: resource,
                res: resource.res,
                locations: ko.observableArray(),
                bookmarks: application.bookmarks,
                showLegend: application.showLegend,
                showRemoveBookmark: ko.observable(false),
                enableRemoveBookmark: function() {
                    vm.showRemoveBookmark(true);
                },
                disableRemoveBookmark: function() {
                    vm.showRemoveBookmark(false);
                },
                
                bsLayer: application.bsLayer,
                updateBaseLayer: function(layerName) {
                    application.updateBsLayer(layerName);
                },

                baseLayersOpen: ko.observable(false),
                toggleBaseLayers: function() {
                    if (vm.baseLayersOpen()) {
                        vm.closeBaseLayers();
                        vm.baseLayersOpen(false);
                    } else {
                        vm.openBaseLayers();
                        vm.baseLayersOpen(true);
                    };
                },

                openBaseLayers: function() {
                    $(".base-layers").css("display", "block");
                    vm.baseLayersOpen(true);
                    // menyen for kartlag lukkes når menyen for bagrunnskart åpnes
                    vm.closeOverlay();
                },

                closeBaseLayers: function() {
                    $(".base-layers").css("display", "none");
                    vm.baseLayersOpen(false);
                },

                changeBaseLayer: function(layerName) {
                    // change active class in the menu

                    var lName = "#" + layerName;
                    $(lName).addClass("active");

                    for (var i = 0; i < vm.baseLayerList.length; i++) {
                        // remove other layers if they were previously selected
                        if (vm.baseLayerList[i] !== layerName) {
                            var name = "#" + vm.baseLayerList[i];
                            $(name).removeClass("active");
                        }
                    }
                    vm.updateBaseLayer(layerName);
                    application.viewportState.background(layerName);
                    vm.toggleBaseLayers();
                },

                overlayOpen: ko.observable(false),
                toggleOverlayLayers: function() {
                    if (vm.overlayOpen()) {
                        vm.closeOverlay();
                        vm.overlayOpen(false);
                    } else {
                        vm.openOverlay();
                        vm.overlayOpen(true);
                    };
                },
                activeOverlayLayer: ko.observable(),
                setOverlayLayers: function(layerName) {
                    vm.activeOverlayLayer("#" + layerName);
                    $(vm.activeOverlayLayer()).addClass("active");
                },
                openOverlay: function() {
                    $(".overlay-layers").css("display", "block");
                    vm.closeBaseLayers();
                    vm.overlayOpen(true);
                },
                closeOverlay: function() {
                    $(".overlay-layers").css("display", "none");
                    vm.overlayOpen(false);
                },
                
                switchOverlayLayer: function (layerName) {
                    if (map.map != undefined) {
                        vm.activeOverlayLayer("#" + layerName);
                        // hvis klassen med kartlaget allerede er aktiv, bytter til ikke-aktiv og fjerner laget fra kartet
                        if ($(vm.activeOverlayLayer()).hasClass("active")) {
                            $(vm.activeOverlayLayer()).removeClass("active");
                            var layer = layerConfig.getOverlayLayerFromPool(layerName);
                            map.map.getLayers().remove(layer);
                            // remove the layer from array list 
                            application.removeLayer(layerName);
                        } else {
                            $(vm.activeOverlayLayer()).addClass("active");
                            var layer = layerConfig.getOverlayLayerFromPool(layerName);
                            if (layer) {
                                map.map.getLayers()
                                    .insertAt(3, layer); // Add overlay as layer nr 3, in front of background
                                // update the array of overlay layers and save in localStorage
                                application.updateOlLayers(layerName);
                            }
                        }
                   } 
                },
                
                /* baseLayerList: ko.computed(function() {
                     return layerConfig.baseLayerPool.filter(function(e) {
                         if (e.name === 'europa') return false;
                         e.description = layerConfig.res()[e.name];
                         return !e.needsToken || !!e.needsToken && !!application.ndToken();
                     });
                 }),*/
               
                selectedLocation: ko.observable(),
                currentLocation: null,
                isSecure: application.isSecure,
                location: function(x, y, text, zoom) {
                    return {
                        name: ko.observable(text),
                        x: ko.observable(x),
                        y: ko.observable(y),
                        displayName: ko.observable(text),
                        zoom: zoom
                    };
                },
                setPosition: function(position) {
                    var coord = ol.proj.fromLonLat([position.coords.longitude, position.coords.latitude], 'EPSG:' + application.filter.EpsgCode());
                    vm.currentLocation = vm.location();
                    vm.currentLocation.x(coord[0]);
                    vm.currentLocation.y(coord[1]);
                    if (position.coords.accuracy > 40000) {
                        vm.currentLocation.zoom = 10;
                    } // Todo: check values
                    else if (position.coords.accuracy > 20000) {
                        vm.currentLocation.zoom = 11;
                    } else if (position.coords.accuracy > 10000) {
                        vm.currentLocation.zoom = 12;
                    } else if (position.coords.accuracy > 5000) {
                        vm.currentLocation.zoom = 13;
                    } else if (position.coords.accuracy > 2500) {
                        vm.currentLocation.zoom = 14;
                    } else if (position.coords.accuracy > 1000) {
                        vm.currentLocation.zoom = 15;
                    } else {
                        vm.currentLocation.zoom = 16;
                    }
                    vm.zoomToCurrentLocation();
                },
                setActiveLanguage: application.setActiveLanguage(),
                
                zoomToCurrentLocation: function() {
                    if (vm.currentLocation) {
                        vpstate.center(vm.currentLocation.x() + "," + vm.currentLocation.y());
                        vpstate.zoom(vm.currentLocation.zoom);
                    } else {
                        vm.zoomToMyLocation();
                    }
                },
                zoomToMyLocation: function () {
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(vm.setPosition);
                    }
                },
                setSelectedBaseLayerName: function (layerName) {
                    map.selectedBaseLayer(layerName);
                },
                getPositions: function(searchTerm, oarray) {
                    if (isGBNr(searchTerm)) {
                        var st = searchTerm.replace(/[\/-]/g, "_");
                        dataServices.getGbnrByTerm(st).then(function(data) {
                            var result = [];
                            data.forEach(function(place) {
                                var desc = searchTerm; // + " areal: " + place.Area;
                                result.push(vm.location(place.CoordinateList[0]
                                    .X,
                                    place.CoordinateList[0].Y,
                                    place.Name,
                                    17));
                            });
                            oarray(result);
                        });
                    } else {
                        dataServices.getLocationByName(searchTerm + '*').then(function(data) {
                            var result = [];
                            data.forEach(function(place) {
                                var desc = place.Name +
                                    ", " +
                                    place.MunicipalityName +
                                    (place.CountyName ? ', ' + place.CountyName : '') +
                                    ', ' +
                                    place.TypeDescription; // + ', ' + place.Product;
                                result.push(vm.location(place.Coordinate.X,
                                    place.Coordinate.Y,
                                    desc,
                                    vm.getZoomByType(place.ProductTypeLevel)));
                            });
                            oarray(result);
                        });
                    }
                },

                createLink: function () {
                    dataServices.saveSearchFilter(application.saveableFilter()).then(function (data) {
                        mainPanel.lastLink(config.bookmarkurl + data);
                    });
                    return true;
                },
                createBookmark: function () {
                    var image;
                    var e;
                    try {
                        bookmarkThumbCanvas = bookmarkThumbCanvas || document.createElement('canvas');
                        bookmarkThumbCanvas.width = application.config.bookmarkThumbSize;
                        bookmarkThumbCanvas.height = application.config.bookmarkThumbSize;
                        bookmarkThumbCanvas.getContext('2d').drawImage(map.map.getViewport().children[0], 0, 0, application.config.bookmarkThumbSize, application.config.bookmarkThumbSize);

                        image = bookmarkThumbCanvas.toDataURL('image/png');
                    } catch (e) {
                        console.log(e);
                        // Probably tainted canvas (todo: resolve with CORS/proxy)
                        // for now, just fill
                        var canvas = document.createElement('canvas');
                        canvas.width = application.config.bookmarkThumbSize;
                        canvas.height = application.config.bookmarkThumbSize;
                        var ctx = canvas.getContext("2d");
                        var my_gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
                        my_gradient.addColorStop(0, "black");
                        my_gradient.addColorStop(1, "#00AA00");
                        ctx.fillStyle = my_gradient;
                        ctx.fillRect(0, 0, canvas.width, canvas.height);

                        image = canvas.toDataURL('image/png');
                    }

                    application.bookmarks.unshift({
                        baseLayer: vm.currentBaseLayer(),
                        image: image,
                        url: window.location.href,
                        filter: ko.toJSON(application.filter)
                    });

                    try {
                        window.localStorage.setItem(application.config.bookmarkLocalStorageKey, JSON.stringify(application.bookmarks()));
                    } catch (e) {
                        // TODO: handle this.
                        logger.log('local storage full?', e);
                    }
                },
                applyFilter: function (bookmark) {
                    application.applyFilter(bookmark);
                    vm.currentBaseLayer(bookmark.baseLayer);
                    application.currentLayer(bookmark.baseLayer);
                    // Hack because the two way binding for value is broken in multiselect.
                    $('#basisLayerSelect + .btn-group input').prop('checked', false);
                    $('.multiselect-container input[value="' + bookmark.baseLayer + '"').prop("checked", true);

                    window.location.assign(bookmark.url);
                },
                removeBookmark: function () {
                    application.bookmarks.remove(this);
                    window.localStorage.setItem(application.config.bookmarkLocalStorageKey, JSON.stringify(application.bookmarks()));
                },
                //toggleFullscreen: shell.toggleFullscreen,
                //toggle3d: function () {
                //    var ol3D = new olcs.OLCesium({ map: map.map });
                //    var scene = ol3D.getCesiumScene();
                //    scene.terrainProvider = new Cesium.CesiumTerrainProvider({
                //        url: 'https://assets.agi.com/stk-terrain/world'
                //    });
                //    ol3D.setEnabled(true);
                //},
                
                getZoomByType: function (productTypeLevel) {
                    var lev = Math.min(4, Math.max(1, productTypeLevel)),
                        result = (5 - lev) * 4;
                    return result;
                },
                /*dropdowntemplates: {
                    button: '<button id="baseLayerButton" type="button" class="btn multiselect dropdown-toggle icon-baselayers-sm" data-toggle="dropdown"></button>',
                    ul: '<ul class="multiselect-container dropdown-menu"></ul>',
                    li: '<li><a href="javascript:void(0);"><label></label></a></li>'
                },
                dropdownOverlaytemplates: {
                    button: '<button id="overlayButton" type="button" class="btn multiselect dropdown-toggle icon-picture-sm" data-toggle="dropdown" data-bind="attr: {title: res().showMapLayersPlaceholder}"></button>',
                    ul: '<ul class="multiselect-container dropdown-menu"></ul>',
                    li: '<li><a href="javascript:void(0);"><label></label></a></li>'
                },*/
                compositionComplete: function () {
                     /*$('#overlayMulti').multiselect({
                          templates: vm.dropdownOverlaytemplates,
                          onChange: function (option, checked) {
                              vm.toggleOverlayLayerName(option.val());
                          }
                      });
                    $('#basisLayerSelect').multiselect({
                          templates: vm.dropdowntemplates,
                          enableHTML: true,
                          optionLabel: function (element) {
                              return '<img src="content/images/layers/' + $(element).attr('value') + '.png"> ' + $(element).text();
                          },
                          onChange: function (option, checked) {
                              vm.setSelectedBaseLayerName(option.val());
                          }
                      });*/
                    vm.changeBaseLayer(application.bsLayer());
                    vm.closeBaseLayers();

                    // get overlay layers from layerConfig
                    application.setOverlayLayers();
                    var layers = eval(application.layers);
                    for (var i = 0; i < layers.length; i++) {
                        // set active layers in meny
                        vm.setOverlayLayers(layers[i]);
                       }
                    //$('#baseLayerButton').removeClass('btn-default');
                    //$('#overlayButton').removeClass('btn-default');
                },

                // bookmarks menu stuff                
                openBookmarks: ko.observable(false),
                toggleBookmarksContainer: function () {
                    vm.openBookmarks(!vm.openBookmarks());
                }
            };

        

        if (!vm.currentBaseLayer() && location.hash) {
            var baselayer = location.hash.replace(/^.*background\/(.*?)$/, '$1');
            vm.currentBaseLayer(baselayer);
            application.currentLayer(baselayer);
        }

        vm.tiledBookmarks = ko.computed(function () {
            var c = 0, r = [], b = application.bookmarks();
            while (c < b.length) {
                r.push(b.slice(c, c += 5));
            }
            return r;
        });

        application.initBookmarks();
        
        vm.selectedLocation.subscribe(function (newValue) {
            if (newValue && newValue.x()) {
                vm.currentLocation = newValue;
                vm.zoomToCurrentLocation();
            }
        });
        vm.drawPolygonActive = ko.observable(false);
        app.on('drawPolygon:deactivate').then(function () {
            vm.drawPolygonActive(false);
        });
        vm.togglePolygon = function () {
            if (vm.drawPolygonActive()) {
                map.deactivateDrawPolygon();
            } else {
                map.activateDrawPolygon();
                //vm.setUserDefinedAreaInFilterList("Egendefinert polygon")
            }
            vm.drawPolygonActive(!vm.drawPolygonActive());
        };
        

       application.viewportStateChanged.subscribe(function (value) {
            vm.currentBaseLayer(value.background());
            //$('#basisLayerSelect').multiselect('select', value.background());
        });

        return vm;
    });

define('viewmodels/siteInfo',['services/logger', 'viewmodels/leftPanel', 'services/dataServices', 'services/application', "knockout", 'services/resource', 'services/config'],
    function (logger, leftPanel, dataServices, application, ko, resource, config) {
        "use strict";
        var title = "SiteInfo",
            // rssUrl = "https://database.artsdatabanken.no/cms/artskart-feed.xml",

            vm = {
                res: resource.res,
                reportAdress: ko.observable(config.reportAdress),
                news: ko.observableArray([]),
                formatDate: application.formatDate,
                releaseInfo: application.currentReleaseInfo,
                compositionComplete: function () {
                    dataServices.getRssFeedItems().then(function (data) {
                        vm.news(data);
                        leftPanel.notifications(vm.countNew());

                    }, function (reason) {
                        // failed
                        if (reason.statusText !== "Ignore") {
                            console.debug(reason.statusText);
                            application.setFooterWarning(vm.res().feedErrorMessage);
                        }
                    });
                },
                countNew: function () {
                    var count = 0;
                    for (var i = 0; i < vm.news().length; i++) {
                        var item = vm.news()[i];
                        var newsDate = Date.parse(item.PublishDate);

                        var matchDate = new Date(); // now
                        matchDate.setDate(matchDate.getDate() - 14); // substract 14 days

                        if (newsDate > matchDate.getTime()) {
                            count++;
                        }
                    }
                    return count;
                }
            };

        dataServices.getReleaseInfo().then(function (releaseInfo) {
            application.currentReleaseInfo(releaseInfo);
        });

        return vm;
    });
  

define('viewmodels/statistics',['services/logger', "knockout", 'durandal/app', 'services/config', 'services/application', 'services/dataServices', 'viewmodels/nav', 'services/resource', 'services/adbFuncs', 'd3', 'viewmodels/featureInfo'],
    function (logger, ko, app, config, application, dataServices, nav, resource, adb, d3, feature) {
        var title = "statistics",
            vm = {
                res: resource.res,
                activate: function (center, zoom, background, id, filter) {
                    //logger.log(title + ' View Activated', null, title, true)

                    application.viewportState.center(center);
                    application.viewportState.zoom(zoom);
                    application.viewportState.background(background);
                    application.parseUrlFilter(filter);
                    // set default language according to what the user has chosen last time
                    vm.language = application.treeLanguage;
                    vm.mainWidth($('#mainview').width() - 20);
                    vm.mainHeight($('#mainview').height() - 20);

                    // dataServices.getAllTaxonNames().then(function (taxons) {
                    //     var mapping = [];
                    //     taxons.forEach(function (item, index) {
                    //         mapping[item.Id] = item;
                    //     });
                    //     vm.taxonMapping(mapping);
                    // });

                    vm.getSummary();
                },
                sortDirection: ko.observable(false),
                includeEmptyYearsInChart: ko.observable(false),
                speciesToShow: ko.observable(25),
                speciesPage: ko.observable(0),
                speciesSortParameter: ko.observable("count"),
                totalAreas: ko.observable(0),
                loadingAreas: ko.observable(false),
                mainWidth: ko.observable(660),
                mainHeight: ko.observable(650),
                totalTaxons: ko.observable(0),
                institutionResult: ko.observableArray(),
                institutionMapping: ko.observableArray(),
                taxonGroupResult: ko.observableArray(),
                taxonGroupMapping: ko.observableArray(),
                categoryRedlistResult: ko.observableArray(),
                categoryAlienResult: ko.observableArray(),
                categoryMapping: ko.observableArray(),
                categoryCodeMapping: ko.observableArray(),
                basisOfRecordResult: ko.observableArray(),
                basisOfRecordMapping: ko.observableArray(),
                behaviorResult: ko.observableArray(),
                behaviorMapping: ko.observableArray(),
                monthsResult: ko.observableArray(),
                monthsMapping: ko.observableArray(),
                tagResult: ko.observableArray(),
                tagMapping: ko.observableArray(),
                taxonResult: ko.observableArray(),
                taxonMapping: ko.observableArray(),
                yearResult: ko.observableArray([]),
                totalYears: ko.observable(0),
                yearsToShow: ko.observable(25),
                legendItemsToShow: ko.observable(10),
                showingAllInstitutions: ko.observable(false),
                yearPage: ko.observable(0),
                yearSortParameter: ko.observable("year"),
                taxonBaseUrl: config.taxonBaseUrl,
                language: application.treeLanguage, 
                GUILanguage: application.languagePreference,

                getTaxonomy: function (taxon) {
                    taxon.Taxonomy = ko.observable("");
                    dataServices.getFullTaxon(taxon.Type).then(function (res) {
                        res.forEach(function (element) {
                            
                            var names = { PopularNames: element.PopularNames, ScientificName: element.ScientificName };
                            if (vm.GUILanguage() == 'EN') {
                                var popularName = adb.getPopularName(names, vm.GUILanguage(), true);
                            } else {
                                var popularName = adb.getPopularName(names, vm.language(), true);
                            }                                                               
                                var navn = taxon.Taxonomy() + adb.firstToUpperCase(element.TaxonRank) + ": " + popularName + " \n";
                            
                                taxon.Taxonomy(navn);
                        });
                    });                            
                },

                loadMoreSpecies: function() {
                    vm.speciesToShow(vm.speciesToShow() + 25);
                    vm.orderTaxon();
                },
                loadAllSpecies: function () {
                    vm.speciesToShow(vm.totalTaxons());
                    vm.orderTaxon();
                },
                loadMoreYears: function () {
                    vm.yearsToShow(vm.yearsToShow() + 25);
                    vm.orderYears();
                },
                loadAllYears: function () {
                    vm.yearsToShow(vm.totalYears());
                    vm.orderYears();
                },
                loadAllInstitutions: function () {
                    $("#sourceChart").empty();
                    vm.showingAllInstitutions(true);
                    vm.makeSourceChart(vm.institutionResult(), "#sourceChart");
                },
                getSummary: function (filter) {
                    filter = filter || application.filter;
                    vm.loadingAreas(true);
                    vm.totalAreas(0); // Enable to hide while generating new
                    var countFilter = application.countFilter();

                    $("#sourceChart").empty();
                    vm.showingAllInstitutions(false);
                    vm.categoryRedlistResult([]);
                    vm.categoryAlienResult([]);
                    vm.basisOfRecordResult([]);
                    vm.institutionResult([]);
                    vm.taxonGroupResult([]);
                    vm.behaviorResult([]);
                    vm.monthsResult([]);
                    vm.tagResult([]);
                    vm.taxonResult([]);

                    dataServices.getObservationCount(application.listFilter(), '_stat').then(function (result) {
                        application.totalCount(result || 0);
                        vm.totalAreas(application.totalCount());
                    }, function (reason) {
                        // failed
                        if (reason.statusText !== "Ignore") {
                            console.debug(reason.statusText);
                            application.setFooterWarning(vm.res().warningServerUnavailable);
                        }
                    });

                    dataServices.getObservationCategoryCount(countFilter, '_stat').then(function (result) {

                        result.forEach(function (item, index) {
                            if (config.categoryRedlistCodeMapping[item.Type]) {
                                vm.categoryRedlistResult.push(item);
                            } else {
                                vm.categoryAlienResult.push(item);
                            }
                        });

                        vm.categoryRedlistResult.sort(function (left, right) {
                            return left.Type === right.Type ? 0 : left.Type < right.Type ? 1 : -1;
                        });
                        vm.categoryAlienResult.sort(function (left, right) {
                            return left.Type === right.Type ? 0 : left.Type < right.Type ? 1 : -1;
                        });

                        vm.categoryCodeMapping(config.categoryMapping);
                        vm.categoryMapping(config['categoryNameMapping' + vm.res().code]);
                    });

                    dataServices.getObservationBasisOfRecordCount(countFilter, '_stat').then(function (result) {
                        vm.basisOfRecordResult(result);
                        vm.basisOfRecordMapping(config['basisOfRecordMapping' + vm.res().code]);
                    });

                    dataServices.getObservationBehaviorCount(countFilter, '_stat').then(function (result) {
                        vm.behaviorResult(result);
                        vm.behaviorMapping(config['behaviorMapping' + vm.res().code]);
                    });

                    dataServices.getObservationMonthCount(countFilter, '_stat').then(function (result) {
                        vm.monthsResult(result);
                        vm.monthsMapping(config["monthsMapping" + vm.res().code ]);
                    });

                    dataServices.getObservationTagCount(countFilter).then(function (result) {
                        vm.tagResult(result);
                        vm.tagMapping(config['tagMapping' + vm.res().code]);
                    });

                    var observationTaxonCountPromise = dataServices
                        .getObservationTaxonCount(countFilter,
                            vm.speciesSortParameter(),
                            vm.sortDirection(),
                            vm.speciesPage(),
                            vm.speciesToShow());
                    observationTaxonCountPromise.then(function (result) {
                        result.Item1.forEach(function (t) {
                            t.Svalbard 
                                ? t.svalbardMerke = "(Svalbard)"
                                : t.svalbardMerke = '';

                            // set popular name
                            var taxon = {PopularNames : t.PopularNames, ScientificName : t.Name};
                            t.PopularName = adb.getPopularName(taxon, vm.language());
                            vm.getTaxonomy(t);
                        });
                        vm.taxonResult(result.Item1);
                        vm.totalTaxons(result.Item2);
                    });

                    dataServices.getObservationYearCount(countFilter, vm.yearSortParameter(), vm.sortDirection(), vm.yearPage(), vm.yearsToShow()).then(function (result) {
                        vm.yearResult(result.Item1);
                        vm.totalYears(result.Item2);
                        vm.makeYearChart("#yearChart");
                    });

                    dataServices.getInstitutions('_stat').then(function (institutions) {
                        var mapping = [];
                        institutions.forEach(function (item, index) {
                            mapping[item.Id] = item;
                        });
                        vm.institutionMapping(mapping);
                        dataServices.getObservationInstitutionCount(countFilter, '_stat').then(function (result) {
                            dataServices.getDistinctTaxonPerInstitutionCount(countFilter).then(function (distinctResult) {
                            $("#sourceChart").empty();
                            //vm.totalAreas(0);
                            for (var i = 0; i < result.length; i++) {
                                result[i].DistinctSpecies = 0;
                                //vm.totalAreas(vm.totalAreas() + result[i].Count);
                                for (var j = 0; j < distinctResult.length; j++) {
                                    if (result[i].Type === distinctResult[j].Type) {
                                        result[i].DistinctSpecies = distinctResult[j].Count;
                                    }
                                }
                            }
                            vm.institutionResult(result);
                            //vm.orderInstitutionsByName();
                            vm.orderInstitutionsByObservations();
                            vm.sortDirection(!vm.sortDirection());
                            vm.makeSourceChart(result, "#sourceChart", vm.legendItemsToShow());
                            vm.loadingAreas(false);
                            });
                        });
                    });

                    dataServices.getTaxonGroups().then(function (taxonGroups) {
                        var mapping = [];
                        taxonGroups.forEach(function (item, index) {
                            item.Name = adb.firstToUpperCase(item.Name);
                            mapping[item.Id] = item;
                        });
                        vm.taxonGroupMapping(mapping);
                        dataServices.getObservationTaxonGroupCount(countFilter, '_stat').then(function (result) {
                            vm.taxonGroupResult(result);
                            vm.taxonGroupResult.sort(function (left, right) {
                                return vm.taxonGroupMapping()[left.Type].Name ===
                                    vm.taxonGroupMapping()[right.Type].Name
                                    ? 0
                                    : vm.taxonGroupMapping()[left.Type].Name < vm.taxonGroupMapping()[right.Type].Name
                                        ? -1
                                        : 1;
                            });  
                        });
                    });

                },
                getSortOrderDirectionValue1 : function() {
                    return vm.sortDirection() ? 1 : -1;
                },
                getSortOrderDirectionValue2: function () {
                    return vm.sortDirection() ? -1 : 1;
                },
                orderTaxonGroupsByName: function () {
                    vm.sortDirection(!vm.sortDirection());
                    vm.taxonGroupResult.sort(function (left, right) {
                        return vm.taxonGroupMapping()[left.Type].Name === vm.taxonGroupMapping()[right.Type].Name
                            ? 0
                            : vm.taxonGroupMapping()[left.Type].Name < vm.taxonGroupMapping()[right.Type].Name
                                ? vm.getSortOrderDirectionValue1()
                                : vm.getSortOrderDirectionValue2();
                    });
                },
                orderTaxonGroupsByObservations: function () {
                    vm.sortDirection(!vm.sortDirection());
                    vm.taxonGroupResult.sort(function (left, right) {
                        return Number(left.Count) === Number(right.Count)
                            ? 0
                            : Number(left.Count) < Number(right.Count)
                                ? vm.getSortOrderDirectionValue1()
                                : vm.getSortOrderDirectionValue2();
                    });
                },

                orderInstitutionsByName: function () {
                    vm.sortDirection(!vm.sortDirection());
                    vm.institutionResult.sort(function (left, right) {
                        return vm.institutionMapping()[left.Type].Name === vm.institutionMapping()[right.Type].Name
                            ? 0
                            : vm.institutionMapping()[left.Type].Name < vm.institutionMapping()[right.Type].Name
                                ? vm.getSortOrderDirectionValue1()
                                : vm.getSortOrderDirectionValue2();
                    });
                },
                orderInstitutionsByObservations: function () {
                    vm.sortDirection(!vm.sortDirection());
                    vm.institutionResult.sort(function (left, right) {
                        return Number(left.Count) === Number(right.Count)
                            ? 0
                            : Number(left.Count) < Number(right.Count)
                                ? vm.getSortOrderDirectionValue1()
                                : vm.getSortOrderDirectionValue2();
                    });
                },
                orderInstitutionsByDistinctObservations: function () {
                    vm.sortDirection(!vm.sortDirection());
                    vm.institutionResult.sort(function (left, right) {
                        return Number(left.DistinctSpecies) === Number(right.DistinctSpecies)
                            ? 0
                            : Number(left.DistinctSpecies) < Number(right.DistinctSpecies)
                                ? vm.getSortOrderDirectionValue1()
                                : vm.getSortOrderDirectionValue2();
                    });
                },
                //  count, cummulativecount, scientificname, popularname, author
                orderTaxon: function (column) {
                    var countFilter = application.countFilter();
                    if (column) {
                        vm.speciesSortParameter(column);
                        vm.sortDirection(!vm.sortDirection());
                    }
                    dataServices.getObservationTaxonCount(countFilter, vm.speciesSortParameter(), vm.sortDirection(), vm.speciesPage(), vm.speciesToShow()).then(function (result) {
                        result.Item1.forEach(function (t) {
                            t.Svalbard
                                ? t.svalbardMerke = "(Svalbard)"
                                : t.svalbardMerke = '';
                            // set popular name
                            var taxon = {PopularNames : t.PopularNames, ScientificName : t.Name};
                            t.PopularName = adb.getPopularName(taxon, vm.language());
                            vm.getTaxonomy(t);                
                        });
                        vm.taxonResult(result.Item1);                        
                        vm.totalTaxons(result.Item2);                        
                    });
                },
               
                //  count, cummulativecount, scientificname, popularname, author
                orderYears: function (column) {
                    var countFilter = application.countFilter();
                    if (column) {
                        vm.yearSortParameter(column);
                        vm.sortDirection(!vm.sortDirection());
                    }
                    dataServices.getObservationYearCount(countFilter, vm.yearSortParameter(), vm.sortDirection(), vm.yearPage(), vm.yearsToShow()).then(function (result) {
                        vm.yearResult(result.Item1);
                        vm.totalYears(result.Item2);
                        vm.makeYearChart("#yearChart");
                    });
                },
                makeYearChart: function (element) {
                    $(element).empty();
                    var lastYear = 0;
                    var thisYear = 0;
                    var dataset = [];
                    if (vm.includeEmptyYearsInChart() && vm.yearSortParameter() === "year") {
                        vm.yearResult().forEach(function (year) {
                            dataset.push({
                                Count: year.Count,
                                CumulativeCount: year.CumulativeCount,
                                Type: year.Type
                            });
                            lastYear = thisYear;
                            thisYear = year.Type;
                            if (lastYear > 0) {
                                if (lastYear < thisYear) { // 2012, 2013, 2017 ...
                                    if (lastYear < thisYear - 1) {
                                        for (var i = lastYear + 1; i < thisYear; i++) {
                                            dataset.push({
                                                Count: 0,
                                                CumulativeCount: 0,
                                                Type: i
                                            });
                                        }
                                    }
                                } else {    // 2017, 2016, 2014 ...
                                    if (thisYear < lastYear - 1) {
                                        for (var i = lastYear - 1; i > thisYear; i--) {
                                            dataset.push({
                                                Count: 0,
                                                CumulativeCount: 0,
                                                Type: i
                                            });
                                        }
                                    }
                                }

                            }
                        });
                    } else {
                        dataset = vm.yearResult();
                    }

                    dataset.sort(function (a, b) {
                        return a.Type - b.Type;
                    });

                    var colorScale = d3.scale.linear()
                        .range(['lightblue', 'darkblue']);

                    var margin = {top: 20, right: 20, bottom: 40, left: 60},
                        width = vm.mainWidth() - margin.left - margin.right,
                        height = Math.min(vm.mainHeight() - 150, 650) - margin.top - margin.bottom;
                    height = height < 0 ? 150 : height;

                    var x = d3.scale.ordinal()
                        .rangeRoundBands([0, width], 0.1);

                    var y = d3.scale.linear()
                        .range([height, 0]);

                    var xAxis = d3.svg.axis()
                        .scale(x)
                        .orient("bottom");

                    var yAxis = d3.svg.axis()
                        .scale(y)
                        .orient("left");

                    var svg = d3.select(element).append("svg")
                        .attr("width", width + margin.left + margin.right)
                        .attr("height", height + margin.top + margin.bottom)
                        .append("g")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                    x.domain(dataset.map(function (d) {
                        return d.Type;
                    }));
                    y.domain([0, d3.max(dataset, function (d) {
                        return d.Count;
                    })]);
                    colorScale.domain([0, d3.max(dataset, function (d) {
                        return d.Count;
                    })]);

                    var alternating = false;
                    var numberOfBars = dataset.length;

                    svg.append("g")
                        .attr("class", "x axis")
                        .attr("transform", "translate(0," + height + ")")
                        .call(xAxis)
                        .selectAll("text")
                        .style("text-anchor", "end")
                        .style("display", function() {
                            alternating = !alternating;
                            if (alternating && numberOfBars > 60) {
                                return "none";
                            } else {
                                return "block";
                            }
                        })
                        .attr("dx", "-.8em")
                        .attr("dy", ".15em")
                        .attr("transform", "rotate(-65)");

                    svg.append("g")
                        .attr("class", "y axis")
                        .call(yAxis)
                        .append("text")
                        .attr("transform", "rotate(-90)")
                        .attr("y", 6)
                        .attr("dy", ".71em")
                        .style("text-anchor", "end")
                        .text(vm.res().yearChartYAxisText)
                        .append("title").text(vm.res().yearChartYAxisTitle);

                    var myBar = svg.selectAll(".bar")
                        .data(dataset)
                        .enter().append("rect")
                        .attr("class", "bar")
                        .attr("x", function (d) {
                            return x(d.Type);
                        })
                        .attr("width", x.rangeBand())
                        .attr("y", function (d) {
                            return y(0);
                        })
                        .attr("height", function (d) {
                            return height - y(0);
                        })
                        .attr("fill", function (d) {
                            return colorScale(d.Count);
                        });
                    myBar
                        .transition()
                        .attr("height", function (d) {
                            return height - y(d.Count);
                        })
                        .attr("y", function (d) {
                            return y(d.Count);
                        })
                        .duration(500);

                    myBar.append("title").text(function (d, i) {
                        return vm.res().yearChartBarTitle1 + d.Type + ": " + Math.round(d.Count * 100 / vm.totalAreas()) + vm.res().yearChartBarTitle2;
                    });
                },

                makeSourceChart: function (dataset, element, nElements) {
                    var legendCircleSize = 15;
                    var legendSpacing = 15;
                    nElements = nElements || dataset.length;
                    var r = vm.mainWidth() < 481 ? 50 : 150;

                    var color = d3.scale.category20();

                    var svg = d3.select(element)
                        .append("svg")
                        .attr("width", vm.mainWidth())
                        .attr("height", Math.max(2 * r + 20, nElements * 35) -2)
                        .append("g")
                        .attr("transform", "translate(" + r + "," + r + ")");

                    // declare an arc generator function
                    var arc = d3.svg.arc()
                        .outerRadius(r);

                    var pie = d3.layout.pie()
                        .value(function (d) {
                            return d.Count;
                        })
                        .sort(null);

                    // select paths, use arc generator to draw
                    var path = svg.selectAll("path")
                        .data(pie(dataset))
                        .enter()
                        .append("path")
                        .attr("d", arc)
                        .attr("class", "arc")
                        .attr("fill", function (d, i) {
                            return color(vm.institutionMapping()[d.data.Type].Name);
                        }).append("title").text(function (d, i) {
                            return vm.institutionMapping()[d.data.Type].Name + " " + Math.round(d.data.Count * 100 / vm.totalAreas()) + "% av utvalg";
                        });

                    var legend = svg.selectAll('.legend')
                        .data(color.domain())
                        .enter()
                        .append('g')
                        .attr('class', 'legend')
                        .attr('transform', function (d, i) {
                            var height = 20 + legendSpacing;
                            var offset = r - legendSpacing; //height * color.domain().length / 2;
                            var horz = r + 50;
                            var vert = i * height - offset;
                            return 'translate(' + horz + ',' + vert + ')';
                        });
                    legend.append('circle')
                        .attr('cx', 0)
                        .attr('cy', 0)
                        .attr('r', legendCircleSize)
                        .style('fill', color)
                        .style('stroke', color);

                    legend.append('text')
                        .attr('x', legendCircleSize + legendSpacing)
                        .attr('y', legendCircleSize - legendSpacing)
                        .text(function (d) {
                            return d;
                        });
                },

                wrap: function (text, width) {
                    text.each(function () {
                        var text = d3.select(this),
                            words = text.text().split(/\s+/).reverse(),
                            word,
                            line = [],
                            lineNumber = 0,
                            lineHeight = 1.1, // ems
                            y = text.attr("y"),
                            dy = parseFloat(text.attr("dy")),
                            tspan = text.text(null).append("tspan").attr("x", -10).attr("y", y).attr("dy", dy + "em");
                        while (word = words.pop()) {
                            line.push(word);
                            tspan.text(line.join(" "));
                            if (tspan.node().getComputedTextLength() > width) {
                                line.pop();
                                tspan.text(line.join(" "));
                                line = [word];
                                tspan = text.append("tspan").attr("x", -10).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
                            }
                        }
                    });
                },

                makeTypeChart: function (dataset, element) {
                    dataset.sort(function (a, b) {
                        if (a.level === b.level) {
                            return a.count > b.count;
                        }
                        return a.level > b.level;
                    });

                    var color = d3.scale.category20();

                    var margin = {top: 20, right: 20, bottom: 30, left: 40},
                        width = vm.mainWidth() - 200 - margin.left - margin.right,
                        height = 650 - margin.top - margin.bottom;

                    var y0 = d3.scale.ordinal()
                        .rangeRoundBands([0, height], 0.1);

                    var y1 = d3.scale.ordinal()
                        .rangeRoundBands([0, height], 0.1);

                    var x = d3.scale.linear()
                        .range([0, width]);

                    var yAxis0 = d3.svg.axis()
                        .scale(y0)
                        .orient("left");
                    var yAxis1 = d3.svg.axis()
                        .scale(y1)
                        .orient("left");

                    var xAxis = d3.svg.axis()
                        .scale(x)
                        .orient("top");

                    var svg = d3.select(element).append("svg")
                        .attr("width", width + margin.left + margin.right + 200)
                        .attr("height", height + margin.top + margin.bottom)
                        .append("g")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                    y0.domain(dataset.map(function (d) {
                        return d.type;
                    }));
                    y1.domain(dataset.map(function (d) {
                        return d.level;
                    }));

                    x.domain([0, d3.max(dataset, function (d) {
                        return d.count;
                    })]);

                    svg.append("g")
                        .attr("class", "y axis")
                        .attr("transform", "translate(200,0)")
                        .call(yAxis0)
                        .selectAll(".tick text")
                        .call(vm.wrap, y0.rangeBand());
                    //.selectAll("text")
                    //.append("title").text("Gjeldende nivå");
                    // todo: se http://bl.ocks.org/mbostock/7555321 for text-wrap

                    svg.append("g")
                        .attr("class", "y axis")
                        .attr("transform", "translate(20,0)")
                        .call(yAxis1)
                        //.append("text")
                        //.attr("transform", "rotate(-90)")
                        //.attr("y", 6)
                        //.attr("dy", ".71em")
                        //.style("text-anchor", "end")
                        //.text("Nivå")
                        .selectAll("text")
                        .style("text-anchor", "end")
                        .attr("dy", "-1.0em")
                        .attr("dx", "4.0em")
                        .attr("transform", "rotate(-90)")
                        .append("title").text("Overordnet nivå");

                    svg.append("g")
                        .attr("class", "x axis")
                        .attr("transform", "translate(200,0)")
                        .call(xAxis)
                        .append("text")
                        .attr("transform", "translate(-50,-10)")
                        .attr("x", 6)
                        .attr("dx", ".71em")
                        .style("text-anchor", "end")
                        .text("Antall")
                        .append("title").text("Antall naturområder");

                    var myBar = svg.selectAll(".bar")
                        .data(dataset)
                        .enter().append("rect")
                        .attr("transform", "translate(200,0)")
                        .attr("class", "bar")
                        .attr("y", function (d) {
                            return y0(d.type);
                        })
                        .attr("height", y0.rangeBand())
                        .attr("x", 0)
                        .attr("width", function (d) {
                            return x(0);
                        })
                        .attr("fill", function (d) {
                            return color(d.level);
                        });

                    myBar
                        .transition()
                        .attr("width", function (d) {
                            return x(d.count);
                        })
                        .duration(500);

                    myBar.append("title").text(function (d, i) {
                        return (d.base ? d.base + " - " : "") + d.level + " - " + d.type + " - " + Math.round(d.count * 100 / vm.totalAreas()) + "% av utvalg";
                    });
                },
                
                compositionComplete: function () {
                    application.filterChanged.subscribe(function (value) {
                        if (nav.activeView() === 'statistics') {
                            vm.getSummary();
                        }
                    });
                    vm.includeEmptyYearsInChart.subscribe(function () {
                        vm.makeYearChart("#yearChart");
                    }),
                    app.on('main:resized').then(function (elem) {
                        vm.mainWidth($('#mainview').width() - 20);
                        vm.mainHeight($('#mainview').height() - 20);
                        vm.makeYearChart("#yearChart");
                    });
                }
            };
        vm.addSeparator = application.addSeparator;

        vm.showTaxonomy = function (id) {
            console.log(id);
        };

        // update popular names in view model on change of the language
        vm.language.subscribe(function (changeLang) {
            vm.orderTaxon();
        });

        vm.GUILanguage.subscribe(function (changeLang) {
            vm.orderTaxon();
        });

        return vm;
    });

define('viewmodels/statisticsToolbar',['services/logger', "knockout", "services/application", 'viewmodels/shell', 'services/resource'],
    function (logger, ko, application, shell, resource) {
        "use strict";

        var vm = {
            title: "Statistics toolbar",
            resource: resource,
            res: resource.res,
            activate: function () {
                application.setActiveLanguage();
                application.initBookmarks();
            },
            //toggleFullscreen: shell.toggleFullscreen,
            bookmarks: application.bookmarks,
            openBookmarks: ko.observable(false),
            toggleBookmarksContainer: function() {
                vm.openBookmarks(!vm.openBookmarks());
            },

            applyFilter: function(bookmark) {
                application.applyFilter(bookmark);

                // Transform url to point to statistics
                var statUrl = bookmark.url;
                statUrl = statUrl.replace("#map", "#statistics");
                window.location.assign(statUrl);
            }
        };
        vm.tiledBookmarks = ko.computed(function () {
            var c = 0, r = [], b = application.bookmarks();
            while (c < b.length) {
                r.push(b.slice(c, c += 5));
            }
            return r;
        });

        return vm;
    });
  

/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * The dialog module enables the display of message boxes, custom modal dialogs and other overlays or slide-out UI abstractions. Dialogs are constructed by the composition system which interacts with a user defined dialog context. The dialog module enforced the activator lifecycle.
 * @module dialog
 * @requires system
 * @requires app
 * @requires composition
 * @requires activator
 * @requires viewEngine
 * @requires jquery
 * @requires knockout
 */
define('plugins/dialog',['durandal/system', 'durandal/app', 'durandal/composition', 'durandal/activator', 'durandal/viewEngine', 'jquery', 'knockout'], function (system, app, composition, activator, viewEngine, $, ko) {
    var contexts = {},
        dialogCount = ko.observable(0),
        dialog;

    /**
     * Models a message box's message, title and options.
     * @class MessageBox
     */
    var MessageBox = function (message, title, options, autoclose, settings) {
        this.message = message;
        this.title = title || MessageBox.defaultTitle;
        this.options = options || MessageBox.defaultOptions;
        this.autoclose = autoclose || false;
        this.settings = $.extend({}, MessageBox.defaultSettings, settings);
    };

    /**
     * Selects an option and closes the message box, returning the selected option through the dialog system's promise.
     * @method selectOption
     * @param {string} dialogResult The result to select.
     */
    MessageBox.prototype.selectOption = function (dialogResult) {
        dialog.close(this, dialogResult);
    };

    /**
     * Provides the view to the composition system.
     * @method getView
     * @return {DOMElement} The view of the message box.
     */
    MessageBox.prototype.getView = function () {
        return viewEngine.processMarkup(MessageBox.defaultViewMarkup);
    };

    /**
     * Configures a custom view to use when displaying message boxes.
     * @method setViewUrl
     * @param {string} viewUrl The view url relative to the base url which the view locator will use to find the message box's view.
     * @static
     */
    MessageBox.setViewUrl = function (viewUrl) {
        delete MessageBox.prototype.getView;
        MessageBox.prototype.viewUrl = viewUrl;
    };

    /**
     * The title to be used for the message box if one is not provided.
     * @property {string} defaultTitle
     * @default Application
     * @static
     */
    MessageBox.defaultTitle = app.title || 'Application';

    /**
     * The options to display in the message box if none are specified.
     * @property {string[]} defaultOptions
     * @default ['Ok']
     * @static
     */
    MessageBox.defaultOptions = ['Ok'];

    
    MessageBox.defaultSettings = { buttonClass: "btn btn-default", primaryButtonClass: "btn-primary autofocus", secondaryButtonClass: "", "class": "modal-content messageBox", style: null };

    /**
    * Sets the classes and styles used throughout the message box markup.
    * @method setDefaults
    * @param {object} settings A settings object containing the following optional properties: buttonClass, primaryButtonClass, secondaryButtonClass, class, style.
    */
    MessageBox.setDefaults = function (settings) {
        $.extend(MessageBox.defaultSettings, settings);
    };

    MessageBox.prototype.getButtonClass = function ($index) {
        var c = "";
        if (this.settings) {
            if (this.settings.buttonClass) {
                c = this.settings.buttonClass;
            }
            if ($index() === 0 && this.settings.primaryButtonClass) {
                if (c.length > 0) {
                    c += " ";
                }
                c += this.settings.primaryButtonClass;
            }
            if ($index() > 0 && this.settings.secondaryButtonClass) {
                if (c.length > 0) {
                    c += " ";
                }
                c += this.settings.secondaryButtonClass;
            }
        }
        return c;
    };

    MessageBox.prototype.getClass = function () {
        if (this.settings) {
            return this.settings["class"];
        }
        return "messageBox";
    };

    MessageBox.prototype.getStyle = function () {
        if (this.settings) {
            return this.settings.style;
        }
        return null;
    };

    MessageBox.prototype.getButtonText = function (stringOrObject) {
        var t = $.type(stringOrObject);
        if (t === "string") {
            return stringOrObject;
        }
        else if (t === "object") {
            if ($.type(stringOrObject.text) === "string") {
                return stringOrObject.text;
            } else {
                system.error('The object for a MessageBox button does not have a text property that is a string.');
                return null;
            }
        }
        system.error('Object for a MessageBox button is not a string or object but ' + t + '.');
        return null;
    };

    MessageBox.prototype.getButtonValue = function (stringOrObject) {
        var t = $.type(stringOrObject);
        if (t === "string") {
            return stringOrObject;
        }
        else if (t === "object") {
            if ($.type(stringOrObject.text) === "undefined") {
                system.error('The object for a MessageBox button does not have a value property defined.');
                return null;
            } else {
                return stringOrObject.value;
            }
        }
        system.error('Object for a MessageBox button is not a string or object but ' + t + '.');
        return null;
    };

    /**
     * The markup for the message box's view.
     * @property {string} defaultViewMarkup
     * @static
     */
    MessageBox.defaultViewMarkup = [
        '<div data-view="plugins/messageBox" data-bind="css: getClass(), style: getStyle()">',
            '<div class="modal-header">',
                '<h3 data-bind="html: title"></h3>',
            '</div>',
            '<div class="modal-body">',
                '<p class="message" data-bind="html: message"></p>',
            '</div>',
            '<div class="modal-footer">',
                '<!-- ko foreach: options -->',
                '<button data-bind="click: function () { $parent.selectOption($parent.getButtonValue($data)); }, text: $parent.getButtonText($data), css: $parent.getButtonClass($index)"></button>',
                '<!-- /ko -->',
                '<div style="clear:both;"></div>',
            '</div>',
        '</div>'
    ].join('\n');

    function ensureDialogInstance(objOrModuleId) {
        return system.defer(function (dfd) {
            if (system.isString(objOrModuleId)) {
                system.acquire(objOrModuleId).then(function (module) {
                    dfd.resolve(system.resolveObject(module));
                }).fail(function (err) {
                    system.error('Failed to load dialog module (' + objOrModuleId + '). Details: ' + err.message);
                });
            } else {
                dfd.resolve(objOrModuleId);
            }
        }).promise();
    }

    /**
     * @class DialogModule
     * @static
     */
    dialog = {
        /**
         * The constructor function used to create message boxes.
         * @property {MessageBox} MessageBox
         */
        MessageBox: MessageBox,
        /**
         * The css zIndex that the last dialog was displayed at.
         * @property {number} currentZIndex
         */
        currentZIndex: 1050,
        /**
         * Gets the next css zIndex at which a dialog should be displayed.
         * @method getNextZIndex
         * @return {number} The next usable zIndex.
         */
        getNextZIndex: function () {
            return ++this.currentZIndex;
        },
        /**
         * Determines whether or not there are any dialogs open.
         * @method isOpen
         * @return {boolean} True if a dialog is open. false otherwise.
         */
        isOpen: ko.computed(function() {
            return dialogCount() > 0;
        }),
        /**
         * Gets the dialog context by name or returns the default context if no name is specified.
         * @method getContext
         * @param {string} [name] The name of the context to retrieve.
         * @return {DialogContext} True context.
         */
        getContext: function (name) {
            return contexts[name || 'default'];
        },
        /**
         * Adds (or replaces) a dialog context.
         * @method addContext
         * @param {string} name The name of the context to add.
         * @param {DialogContext} dialogContext The context to add.
         */
        addContext: function (name, dialogContext) {
            dialogContext.name = name;
            contexts[name] = dialogContext;

            var helperName = 'show' + name.substr(0, 1).toUpperCase() + name.substr(1);
            this[helperName] = function (obj, activationData) {
                return this.show(obj, activationData, name);
            };
        },
        createCompositionSettings: function (obj, dialogContext) {
            var settings = {
                model: obj,
                activate: false,
                transition: false
            };

            if (dialogContext.binding) {
                settings.binding = dialogContext.binding;
            }

            if (dialogContext.attached) {
                settings.attached = dialogContext.attached;
            }

            if (dialogContext.compositionComplete) {
                settings.compositionComplete = dialogContext.compositionComplete;
            }

            return settings;
        },
        /**
         * Gets the dialog model that is associated with the specified object.
         * @method getDialog
         * @param {object} obj The object for whom to retrieve the dialog.
         * @return {Dialog} The dialog model.
         */
        getDialog: function (obj) {
            if (obj) {
                return obj.__dialog__;
            }

            return undefined;
        },
        /**
         * Closes the dialog associated with the specified object.
         * @method close
         * @param {object} obj The object whose dialog should be closed.
         * @param {object} results* The results to return back to the dialog caller after closing.
         */
        close: function (obj) {
            var theDialog = this.getDialog(obj);
            if (theDialog) {
                var rest = Array.prototype.slice.call(arguments, 1);
                theDialog.close.apply(theDialog, rest);
            }
        },
        /**
         * Shows a dialog.
         * @method show
         * @param {object|string} obj The object (or moduleId) to display as a dialog.
         * @param {object} [activationData] The data that should be passed to the object upon activation.
         * @param {string} [context] The name of the dialog context to use. Uses the default context if none is specified.
         * @return {Promise} A promise that resolves when the dialog is closed and returns any data passed at the time of closing.
         */
        show: function (obj, activationData, context) {
            var that = this;
            var dialogContext = contexts[context || 'default'];

            return system.defer(function (dfd) {
                ensureDialogInstance(obj).then(function (instance) {
                    var dialogActivator = activator.create();

                    dialogActivator.activateItem(instance, activationData).then(function (success) {
                        if (success) {
                            var theDialog = instance.__dialog__ = {
                                owner: instance,
                                context: dialogContext,
                                activator: dialogActivator,
                                close: function () {
                                    var args = arguments;
                                    dialogActivator.deactivateItem(instance, true).then(function (closeSuccess) {
                                        if (closeSuccess) {
                                            dialogCount(dialogCount() - 1);
                                            dialogContext.removeHost(theDialog);
                                            delete instance.__dialog__;

                                            if (args.length === 0) {
                                                dfd.resolve();
                                            } else if (args.length === 1) {
                                                dfd.resolve(args[0]);
                                            } else {
                                                dfd.resolve.apply(dfd, args);
                                            }
                                        }
                                    });
                                }
                            };

                            theDialog.settings = that.createCompositionSettings(instance, dialogContext);
                            dialogContext.addHost(theDialog);

                            dialogCount(dialogCount() + 1);
                            composition.compose(theDialog.host, theDialog.settings);
                        } else {
                            dfd.resolve(false);
                        }
                    });
                });
            }).promise();
        },
        /**
         * Shows a message box.
         * @method showMessage
         * @param {string} message The message to display in the dialog.
         * @param {string} [title] The title message.
         * @param {string[]} [options] The options to provide to the user.
         * @param {boolean} [autoclose] Automatically close the the message box when clicking outside?
         * @param {Object} [settings] Custom settings for this instance of the messsage box, used to change classes and styles.
         * @return {Promise} A promise that resolves when the message box is closed and returns the selected option.
         */
        showMessage: function (message, title, options, autoclose, settings) {
            if (system.isString(this.MessageBox)) {
                return dialog.show(this.MessageBox, [
                    message,
                    title || MessageBox.defaultTitle,
                    options || MessageBox.defaultOptions,
                    autoclose || false,
                    settings || {}
                ]);
            }

            return dialog.show(new this.MessageBox(message, title, options, autoclose, settings));
        },
        /**
         * Installs this module into Durandal; called by the framework. Adds `app.showDialog` and `app.showMessage` convenience methods.
         * @method install
         * @param {object} [config] Add a `messageBox` property to supply a custom message box constructor. Add a `messageBoxView` property to supply custom view markup for the built-in message box. You can also use messageBoxViewUrl to specify the view url.
         */
        install: function (config) {
            app.showDialog = function (obj, activationData, context) {
                return dialog.show(obj, activationData, context);
            };

            app.closeDialog = function () {
                return dialog.close.apply(dialog, arguments);
            };

            app.showMessage = function (message, title, options, autoclose, settings) {
                return dialog.showMessage(message, title, options, autoclose, settings);
            };

            if (config.messageBox) {
                dialog.MessageBox = config.messageBox;
            }

            if (config.messageBoxView) {
                dialog.MessageBox.prototype.getView = function () {
                    return viewEngine.processMarkup(config.messageBoxView);
                };
            }

            if (config.messageBoxViewUrl) {
                dialog.MessageBox.setViewUrl(config.messageBoxViewUrl);
            }
        }
    };

    /**
     * @class DialogContext
     */
    dialog.addContext('default', {
        blockoutOpacity: 0.2,
        removeDelay: 200,
        /**
         * In this function, you are expected to add a DOM element to the tree which will serve as the "host" for the modal's composed view. You must add a property called host to the modalWindow object which references the dom element. It is this host which is passed to the composition module.
         * @method addHost
         * @param {Dialog} theDialog The dialog model.
         */
        addHost: function (theDialog) {
            var body = $('body');
            var blockout = $('<div class="modalBlockout"></div>')
                .css({ 'z-index': dialog.getNextZIndex(), 'opacity': this.blockoutOpacity })
                .appendTo(body);

            var host = $('<div class="modalHost"></div>')
                .css({ 'z-index': dialog.getNextZIndex() })
                .appendTo(body);

            theDialog.host = host.get(0);
            theDialog.blockout = blockout.get(0);

            if (!dialog.isOpen()) {
                theDialog.oldBodyMarginRight = body.css("margin-right");
                theDialog.oldInlineMarginRight = body.get(0).style.marginRight;

                var html = $("html");
                var oldBodyOuterWidth = body.outerWidth(true);
                var oldScrollTop = html.scrollTop();
                $("html").css("overflow-y", "hidden");
                var newBodyOuterWidth = $("body").outerWidth(true);
                body.css("margin-right", (newBodyOuterWidth - oldBodyOuterWidth + parseInt(theDialog.oldBodyMarginRight, 10)) + "px");
                html.scrollTop(oldScrollTop); // necessary for Firefox
            }
        },
        /**
         * This function is expected to remove any DOM machinery associated with the specified dialog and do any other necessary cleanup.
         * @method removeHost
         * @param {Dialog} theDialog The dialog model.
         */
        removeHost: function (theDialog) {
            $(theDialog.host).css('opacity', 0);
            $(theDialog.blockout).css('opacity', 0);

            setTimeout(function () {
                ko.removeNode(theDialog.host);
                ko.removeNode(theDialog.blockout);
            }, this.removeDelay);

            if (!dialog.isOpen()) {
                var html = $("html");
                var oldScrollTop = html.scrollTop(); // necessary for Firefox.
                html.css("overflow-y", "").scrollTop(oldScrollTop);

                if (theDialog.oldInlineMarginRight) {
                    $("body").css("margin-right", theDialog.oldBodyMarginRight);
                } else {
                    $("body").css("margin-right", '');
                }
            }
        },
        attached: function (view) {
            //To prevent flickering in IE8, we set visibility to hidden first, and later restore it
            $(view).css("visibility", "hidden");
        },
        /**
         * This function is called after the modal is fully composed into the DOM, allowing your implementation to do any final modifications, such as positioning or animation. You can obtain the original dialog object by using `getDialog` on context.model.
         * @method compositionComplete
         * @param {DOMElement} child The dialog view.
         * @param {DOMElement} parent The parent view.
         * @param {object} context The composition context.
         */
        compositionComplete: function (child, parent, context) {
            var theDialog = dialog.getDialog(context.model);
            var $child = $(child);
            var loadables = $child.find("img").filter(function () {
                //Remove images with known width and height
                var $this = $(this);
                return !(this.style.width && this.style.height) && !($this.attr("width") && $this.attr("height"));
            });

            $child.data("predefinedWidth", $child.get(0).style.width);

            var setDialogPosition = function (childView, objDialog) {
                //Setting a short timeout is need in IE8, otherwise we could do this straight away
                setTimeout(function () {
                    var $childView = $(childView);

                    objDialog.context.reposition(childView);

                    $(objDialog.host).css('opacity', 1);
                    $childView.css("visibility", "visible");

                    $childView.find('.autofocus').first().focus();
                }, 1);
            };

            setDialogPosition(child, theDialog);
            loadables.load(function () {
                setDialogPosition(child, theDialog);
            });

            if ($child.hasClass('autoclose') || context.model.autoclose) {
                $(theDialog.blockout).click(function () {
                    theDialog.close();
                });
            }
        },
        /**
         * This function is called to reposition the model view.
         * @method reposition
         * @param {DOMElement} view The dialog view.
         */
        reposition: function (view) {
            var $view = $(view),
                $window = $(window);

            //We will clear and then set width for dialogs without width set 
            if (!$view.data("predefinedWidth")) {
                $view.css({ width: '' }); //Reset width
            }
            var width = $view.outerWidth(false),
                height = $view.outerHeight(false),
                windowHeight = $window.height() - 10, //leave at least 10 pixels free
                windowWidth = $window.width() - 10, //leave at least 10 pixels free
                constrainedHeight = Math.min(height, windowHeight),
                constrainedWidth = Math.min(width, windowWidth);

            $view.css({
                'margin-top': (-constrainedHeight / 2).toString() + 'px',
                'margin-left': (-constrainedWidth / 2).toString() + 'px'
            });

            if (height > windowHeight) {
                $view.css("overflow-y", "auto").outerHeight(windowHeight);
            } else {
                $view.css({
                    "overflow-y": "",
                    "height": ""
                });
            }

            if (width > windowWidth) {
                $view.css("overflow-x", "auto").outerWidth(windowWidth);
            } else {
                $view.css("overflow-x", "");

                if (!$view.data("predefinedWidth")) {
                    //Ensure the correct width after margin-left has been set
                    $view.outerWidth(constrainedWidth);
                } else {
                    $view.css("width", $view.data("predefinedWidth"));
                }
            }
        }
    });

    return dialog;
});

/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * Enables common http request scenarios.
 * @module http
 * @requires jquery
 * @requires knockout
 */
define('plugins/http',['jquery', 'knockout'], function ($, ko) {
    /**
     * @class HTTPModule
     * @static
     */
    return {
        /**
         * The name of the callback parameter to inject into jsonp requests by default.
         * @property {string} callbackParam
         * @default callback
         */
        callbackParam: 'callback',
        /**
         * Converts the data to JSON.
         * @method toJSON
         * @param {object} data The data to convert to JSON.
         * @return {string} JSON.
         */
        toJSON: function(data) {
            return ko.toJSON(data);
        },
        /**
         * Makes an HTTP GET request.
         * @method get
         * @param {string} url The url to send the get request to.
         * @param {object} [query] An optional key/value object to transform into query string parameters.
         * @param {object} [headers] The data to add to the request header.  It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.
         * @return {Promise} A promise of the get response data.
         */
        get: function (url, query, headers) {
            return $.ajax(url, { data: query, headers: ko.toJS(headers) });
        },
        /**
         * Makes an JSONP request.
         * @method jsonp
         * @param {string} url The url to send the get request to.
         * @param {object} [query] An optional key/value object to transform into query string parameters.
         * @param {string} [callbackParam] The name of the callback parameter the api expects (overrides the default callbackParam).
         * @param {object} [headers] The data to add to the request header.  It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.
         * @return {Promise} A promise of the response data.
         */
        jsonp: function (url, query, callbackParam, headers) {
            if (url.indexOf('=?') == -1) {
                callbackParam = callbackParam || this.callbackParam;

                if (url.indexOf('?') == -1) {
                    url += '?';
                } else {
                    url += '&';
                }

                url += callbackParam + '=?';
            }

            return $.ajax({
                url: url,
                dataType: 'jsonp',
                data: query,
                headers: ko.toJS(headers)
            });
        },
        /**
         * Makes an HTTP PUT request.
         * @method put
         * @param {string} url The url to send the put request to.
         * @param {object} data The data to put. It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.
         * @param {object} [headers] The data to add to the request header.  It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.
         * @return {Promise} A promise of the response data.
         */
        put:function(url, data, headers) {
            return $.ajax({
                url: url,
                data: this.toJSON(data),
                type: 'PUT',
                contentType: 'application/json',
                dataType: 'json',
                headers: ko.toJS(headers)
            });
        },
        /**
         * Makes an HTTP POST request.
         * @method post
         * @param {string} url The url to send the post request to.
         * @param {object} data The data to post. It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.
         * @param {object} [headers] The data to add to the request header.  It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.
         * @return {Promise} A promise of the response data.
         */
        post: function (url, data, headers) {
            return $.ajax({
                url: url,
                data: this.toJSON(data),
                type: 'POST',
                contentType: 'application/json',
                dataType: 'json',
                headers: ko.toJS(headers)
            });
        },
        /**
         * Makes an HTTP DELETE request.
         * @method remove
         * @param {string} url The url to send the delete request to.
         * @param {object} [query] An optional key/value object to transform into query string parameters.
         * @param {object} [headers] The data to add to the request header.  It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.
         * @return {Promise} A promise of the get response data.
         */
        remove:function(url, query, headers) {
            return $.ajax({
                url: url,
                data: query,
                type: 'DELETE',
                headers: ko.toJS(headers)
            });
        }
    };
});

/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * Enables automatic observability of plain javascript object for ES5 compatible browsers. Also, converts promise properties into observables that are updated when the promise resolves.
 * @module observable
 * @requires system
 * @requires binder
 * @requires knockout
 */
define('plugins/observable',['durandal/system', 'durandal/binder', 'knockout'], function(system, binder, ko) {
    var observableModule,
        toString = Object.prototype.toString,
        nonObservableTypes = ['[object Function]', '[object String]', '[object Boolean]', '[object Number]', '[object Date]', '[object RegExp]'],
        observableArrayMethods = ['remove', 'removeAll', 'destroy', 'destroyAll', 'replace'],
        arrayMethods = ['pop', 'reverse', 'sort', 'shift', 'slice'],
        additiveArrayFunctions = ['push', 'unshift'],
        es5Functions = ['filter', 'map', 'reduce', 'reduceRight', 'forEach', 'every', 'some'],
        arrayProto = Array.prototype,
        observableArrayFunctions = ko.observableArray.fn,
        logConversion = false,
        changeDetectionMethod = undefined,
        skipPromises = false,
        shouldIgnorePropertyName;

    /**
     * You can call observable(obj, propertyName) to get the observable function for the specified property on the object.
     * @class ObservableModule
     */

    if (!('getPropertyDescriptor' in Object)) {
        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        var getPrototypeOf = Object.getPrototypeOf;

        Object['getPropertyDescriptor'] = function(o, name) {
            var proto = o, descriptor;

            while(proto && !(descriptor = getOwnPropertyDescriptor(proto, name))) {
                proto = getPrototypeOf(proto);
            }

            return descriptor;
        };
    }

    function defaultShouldIgnorePropertyName(propertyName){
        var first = propertyName[0];
        return first === '_' || first === '$' || (changeDetectionMethod && propertyName === changeDetectionMethod);
    }

    function isNode(obj) {
        return !!(obj && obj.nodeType !== undefined && system.isNumber(obj.nodeType));
    }

    function canConvertType(value) {
        if (!value || isNode(value) || value.ko === ko || value.jquery) {
            return false;
        }

        var type = toString.call(value);

        return nonObservableTypes.indexOf(type) == -1 && !(value === true || value === false);
    }

    function createLookup(obj) {
        var value = {};

        Object.defineProperty(obj, "__observable__", {
            enumerable: false,
            configurable: false,
            writable: false,
            value: value
        });

        return value;
    }

    function makeObservableArray(original, observable, hasChanged) {
        var lookup = original.__observable__, notify = true;

        if(lookup && lookup.__full__){
            return;
        }

        lookup = lookup || createLookup(original);
        lookup.__full__ = true;

        es5Functions.forEach(function (methodName) {
            observable[methodName] = function () {
                return arrayProto[methodName].apply(original, arguments);
            };
        });

        observableArrayMethods.forEach(function(methodName) {
            original[methodName] = function() {
                notify = false;
                var methodCallResult = observableArrayFunctions[methodName].apply(observable, arguments);
                notify = true;
                return methodCallResult;
            };
        });

        arrayMethods.forEach(function(methodName) {
            original[methodName] = function() {
                if(notify){
                    observable.valueWillMutate();
                }

                var methodCallResult = arrayProto[methodName].apply(original, arguments);

                if(notify){
                    observable.valueHasMutated();
                }

                return methodCallResult;
            };
        });

        additiveArrayFunctions.forEach(function(methodName){
            original[methodName] = function() {
                for (var i = 0, len = arguments.length; i < len; i++) {
                    convertObject(arguments[i], hasChanged);
                }

                if(notify){
                    observable.valueWillMutate();
                }

                var methodCallResult = arrayProto[methodName].apply(original, arguments);

                if(notify){
                    observable.valueHasMutated();
                }

                return methodCallResult;
            };
        });

        original['splice'] = function() {
            for (var i = 2, len = arguments.length; i < len; i++) {
                convertObject(arguments[i], hasChanged);
            }

            if(notify){
                observable.valueWillMutate();
            }

            var methodCallResult = arrayProto['splice'].apply(original, arguments);

            if(notify){
                observable.valueHasMutated();
            }

            return methodCallResult;
        };

        for (var i = 0, len = original.length; i < len; i++) {
            convertObject(original[i], hasChanged);
        }
    }

    /**
     * Converts an entire object into an observable object by re-writing its attributes using ES5 getters and setters. Attributes beginning with '_' or '$' are ignored.
     * @method convertObject
     * @param {object} obj The target object to convert.
     */
    function convertObject(obj, hasChanged) {
        var lookup, value;

        if (changeDetectionMethod) {
            if(obj && obj[changeDetectionMethod]) {
                if (hasChanged) {
                    hasChanged = hasChanged.slice(0);
                } else {
                    hasChanged = [];
                }
                hasChanged.push(obj[changeDetectionMethod]);
            }
        }

        if(!canConvertType(obj)){
            return;
        }

        lookup = obj.__observable__;

        if(lookup && lookup.__full__){
            return;
        }

        lookup = lookup || createLookup(obj);
        lookup.__full__ = true;

        if (system.isArray(obj)) {
            var observable = ko.observableArray(obj);
            makeObservableArray(obj, observable, hasChanged);
        } else {
            for (var propertyName in obj) {
                if(shouldIgnorePropertyName(propertyName)){
                    continue;
                }

                if (!lookup[propertyName]) {
                    var descriptor = Object.getPropertyDescriptor(obj, propertyName);
                    if (descriptor && (descriptor.get || descriptor.set)) {
                        defineProperty(obj, propertyName, {
                            get:descriptor.get,
                            set:descriptor.set
                        });
                    } else {
                        value = obj[propertyName];

                        if(!system.isFunction(value)) {
                            convertProperty(obj, propertyName, value, hasChanged);
                        }
                    }
                }
            }
        }

        if(logConversion) {
            system.log('Converted', obj);
        }
    }

    function innerSetter(observable, newValue, isArray) {
        //if this was originally an observableArray, then always check to see if we need to add/replace the array methods (if newValue was an entirely new array)
        if (isArray) {
            if (!newValue) {
                //don't allow null, force to an empty array
                newValue = [];
                makeObservableArray(newValue, observable);
            }
            else if (!newValue.destroyAll) {
                makeObservableArray(newValue, observable);
            }
        } else {
            convertObject(newValue);
        }

        //call the update to the observable after the array as been updated.
        observable(newValue);
    }

    /**
     * Converts a normal property into an observable property using ES5 getters and setters.
     * @method convertProperty
     * @param {object} obj The target object on which the property to convert lives.
     * @param {string} propertyName The name of the property to convert.
     * @param {object} [original] The original value of the property. If not specified, it will be retrieved from the object.
     * @return {KnockoutObservable} The underlying observable.
     */
    function convertProperty(obj, propertyName, original, hasChanged) {
        var observable,
            isArray,
            lookup = obj.__observable__ || createLookup(obj);

        if(original === undefined){
            original = obj[propertyName];
        }

        if (system.isArray(original)) {
            observable = ko.observableArray(original);
            makeObservableArray(original, observable, hasChanged);
            isArray = true;
        } else if (typeof original == "function") {
            if(ko.isObservable(original)){
                observable = original;
            }else{
                return null;
            }
        } else if(!skipPromises && system.isPromise(original)) {
            observable = ko.observable();

            original.then(function (result) {
                if(system.isArray(result)) {
                    var oa = ko.observableArray(result);
                    makeObservableArray(result, oa, hasChanged);
                    result = oa;
                }

                observable(result);
            });
        } else {
            observable = ko.observable(original);
            convertObject(original, hasChanged);
        }

        if (hasChanged && hasChanged.length > 0) {
            hasChanged.forEach(function (func) {
                if (system.isArray(original)) {
                    observable.subscribe(function (arrayChanges) {
                        func(obj, propertyName, null, arrayChanges);
                    }, null, "arrayChange");
                } else {
                    observable.subscribe(function (newValue) {
                        func(obj, propertyName, newValue, null);
                    });
                }
            });
        }

        Object.defineProperty(obj, propertyName, {
            configurable: true,
            enumerable: true,
            get: observable,
            set: ko.isWriteableObservable(observable) ? (function (newValue) {
                if (newValue && system.isPromise(newValue) && !skipPromises) {
                    newValue.then(function (result) {
                        innerSetter(observable, result, system.isArray(result));
                    });
                } else {
                    innerSetter(observable, newValue, isArray);
                }
            }) : undefined
        });

        lookup[propertyName] = observable;
        return observable;
    }

    /**
     * Defines a computed property using ES5 getters and setters.
     * @method defineProperty
     * @param {object} obj The target object on which to create the property.
     * @param {string} propertyName The name of the property to define.
     * @param {function|object} evaluatorOrOptions The Knockout computed function or computed options object.
     * @return {KnockoutObservable} The underlying computed observable.
     */
    function defineProperty(obj, propertyName, evaluatorOrOptions) {
        var computedOptions = { owner: obj, deferEvaluation: true },
            computed;

        if (typeof evaluatorOrOptions === 'function') {
            computedOptions.read = evaluatorOrOptions;
        } else {
            if ('value' in evaluatorOrOptions) {
                system.error('For defineProperty, you must not specify a "value" for the property. You must provide a "get" function.');
            }

            if (typeof evaluatorOrOptions.get !== 'function' && typeof evaluatorOrOptions.read !== 'function') {
                system.error('For defineProperty, the third parameter must be either an evaluator function, or an options object containing a function called "get".');
            }

            computedOptions.read = evaluatorOrOptions.get || evaluatorOrOptions.read;
            computedOptions.write = evaluatorOrOptions.set || evaluatorOrOptions.write;
        }

        computed = ko.computed(computedOptions);
        obj[propertyName] = computed;

        return convertProperty(obj, propertyName, computed);
    }

    observableModule = function(obj, propertyName){
        var lookup, observable, value;

        if (!obj) {
            return null;
        }

        lookup = obj.__observable__;
        if(lookup){
            observable = lookup[propertyName];
            if(observable){
                return observable;
            }
        }

        value = obj[propertyName];

        if(ko.isObservable(value)){
            return value;
        }

        return convertProperty(obj, propertyName, value);
    };

    observableModule.defineProperty = defineProperty;
    observableModule.convertProperty = convertProperty;
    observableModule.convertObject = convertObject;

    /**
     * Installs the plugin into the view model binder's `beforeBind` hook so that objects are automatically converted before being bound.
     * @method install
     */
    observableModule.install = function(options) {
        var original = binder.binding;

        binder.binding = function(obj, view, instruction) {
            if(instruction.applyBindings && !instruction.skipConversion){
                convertObject(obj);
            }

            original(obj, view);
        };

        logConversion = options.logConversion;
        if (options.changeDetection) {
            changeDetectionMethod = options.changeDetection;
        }

        skipPromises = options.skipPromises;
        shouldIgnorePropertyName = options.shouldIgnorePropertyName || defaultShouldIgnorePropertyName;
    };

    return observableModule;
});

/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * Serializes and deserializes data to/from JSON.
 * @module serializer
 * @requires system
 */
define('plugins/serializer',['durandal/system'], function(system) {
    /**
     * @class SerializerModule
     * @static
     */
    return {
        /**
         * The name of the attribute that the serializer should use to identify an object's type.
         * @property {string} typeAttribute
         * @default type
         */
        typeAttribute: 'type',
        /**
         * The amount of space to use for indentation when writing out JSON.
         * @property {string|number} space
         * @default undefined
         */
        space:undefined,
        /**
         * The default replacer function used during serialization. By default properties starting with '_' or '$' are removed from the serialized object.
         * @method replacer
         * @param {string} key The object key to check.
         * @param {object} value The object value to check.
         * @return {object} The value to serialize.
         */
        replacer: function(key, value) {
            if(key){
                var first = key[0];
                if(first === '_' || first === '$'){
                    return undefined;
                }
            }

            return value;
        },
        /**
         * Serializes the object.
         * @method serialize
         * @param {object} object The object to serialize.
         * @param {object} [settings] Settings can specify a replacer or space to override the serializer defaults.
         * @return {string} The JSON string.
         */
        serialize: function(object, settings) {
            settings = (settings === undefined) ? {} : settings;

            if(system.isString(settings) || system.isNumber(settings)) {
                settings = { space: settings };
            }

            return JSON.stringify(object, settings.replacer || this.replacer, settings.space || this.space);
        },
        /**
         * Gets the type id for an object instance, using the configured `typeAttribute`.
         * @method getTypeId
         * @param {object} object The object to serialize.
         * @return {string} The type.
         */
        getTypeId: function(object) {
            if (object) {
                return object[this.typeAttribute];
            }

            return undefined;
        },
        /**
         * Maps type ids to object constructor functions. Keys are type ids and values are functions.
         * @property {object} typeMap.
         */
        typeMap: {},
        /**
         * Adds a type id/constructor function mampping to the `typeMap`.
         * @method registerType
         * @param {string} typeId The type id.
         * @param {function} constructor The constructor.
         */
        registerType: function() {
            var first = arguments[0];

            if (arguments.length == 1) {
                var id = first[this.typeAttribute] || system.getModuleId(first);
                this.typeMap[id] = first;
            } else {
                this.typeMap[first] = arguments[1];
            }
        },
        /**
         * The default reviver function used during deserialization. By default is detects type properties on objects and uses them to re-construct the correct object using the provided constructor mapping.
         * @method reviver
         * @param {string} key The attribute key.
         * @param {object} value The object value associated with the key.
         * @param {function} getTypeId A custom function used to get the type id from a value.
         * @param {object} getConstructor A custom function used to get the constructor function associated with a type id.
         * @return {object} The value.
         */
        reviver: function(key, value, getTypeId, getConstructor) {
            var typeId = getTypeId(value);
            if (typeId) {
                var ctor = getConstructor(typeId);
                if (ctor) {
                    if (ctor.fromJSON) {
                        return ctor.fromJSON(value);
                    }

                    return new ctor(value);
                }
            }

            return value;
        },
        /**
         * Deserialize the JSON.
         * @method deserialize
         * @param {string} text The JSON string.
         * @param {object} [settings] Settings can specify a reviver, getTypeId function or getConstructor function.
         * @return {object} The deserialized object.
         */
        deserialize: function(text, settings) {
            var that = this;
            settings = settings || {};

            var getTypeId = settings.getTypeId || function(object) { return that.getTypeId(object); };
            var getConstructor = settings.getConstructor || function(id) { return that.typeMap[id]; };
            var reviver = settings.reviver || function(key, value) { return that.reviver(key, value, getTypeId, getConstructor); };

            return JSON.parse(text, reviver);
        },
        /**
         * Clone the object.
         * @method clone
         * @param {object} obj The object to clone.
         * @param {object} [settings] Settings can specify any of the options allowed by the serialize or deserialize methods.
         * @return {object} The new clone.
         */
        clone:function(obj, settings) {
            return this.deserialize(this.serialize(obj, settings), settings);
        }
    };
});

/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * Layers the widget sugar on top of the composition system.
 * @module widget
 * @requires system
 * @requires composition
 * @requires jquery
 * @requires knockout
 */
define('plugins/widget',['durandal/system', 'durandal/composition', 'jquery', 'knockout'], function(system, composition, $, ko) {
    var kindModuleMaps = {},
        kindViewMaps = {},
        bindableSettings = ['model', 'view', 'kind'],
        widgetDataKey = 'durandal-widget-data';

    function extractParts(element, settings){
        var data = ko.utils.domData.get(element, widgetDataKey);

        if(!data){
            data = {
                parts:composition.cloneNodes(ko.virtualElements.childNodes(element))
            };

            ko.virtualElements.emptyNode(element);
            ko.utils.domData.set(element, widgetDataKey, data);
        }

        settings.parts = data.parts;
    }

    /**
     * @class WidgetModule
     * @static
     */
    var widget = {
        getSettings: function(valueAccessor) {
            var settings = ko.utils.unwrapObservable(valueAccessor()) || {};

            if (system.isString(settings)) {
                return { kind: settings };
            }

            for (var attrName in settings) {
                if (ko.utils.arrayIndexOf(bindableSettings, attrName) != -1) {
                    settings[attrName] = ko.utils.unwrapObservable(settings[attrName]);
                } else {
                    settings[attrName] = settings[attrName];
                }
            }

            return settings;
        },
        /**
         * Creates a ko binding handler for the specified kind.
         * @method registerKind
         * @param {string} kind The kind to create a custom binding handler for.
         */
        registerKind: function(kind) {
            ko.bindingHandlers[kind] = {
                init: function() {
                    return { controlsDescendantBindings: true };
                },
                update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var settings = widget.getSettings(valueAccessor);
                    settings.kind = kind;
                    extractParts(element, settings);
                    widget.create(element, settings, bindingContext, true);
                }
            };

            ko.virtualElements.allowedBindings[kind] = true;
            composition.composeBindings.push(kind + ':');
        },
        /**
         * Maps views and module to the kind identifier if a non-standard pattern is desired.
         * @method mapKind
         * @param {string} kind The kind name.
         * @param {string} [viewId] The unconventional view id to map the kind to.
         * @param {string} [moduleId] The unconventional module id to map the kind to.
         */
        mapKind: function(kind, viewId, moduleId) {
            if (viewId) {
                kindViewMaps[kind] = viewId;
            }

            if (moduleId) {
                kindModuleMaps[kind] = moduleId;
            }
        },
        /**
         * Maps a kind name to it's module id. First it looks up a custom mapped kind, then falls back to `convertKindToModulePath`.
         * @method mapKindToModuleId
         * @param {string} kind The kind name.
         * @return {string} The module id.
         */
        mapKindToModuleId: function(kind) {
            return kindModuleMaps[kind] || widget.convertKindToModulePath(kind);
        },
        /**
         * Converts a kind name to it's module path. Used to conventionally map kinds who aren't explicitly mapped through `mapKind`.
         * @method convertKindToModulePath
         * @param {string} kind The kind name.
         * @return {string} The module path.
         */
        convertKindToModulePath: function(kind) {
            return 'widgets/' + kind + '/viewmodel';
        },
        /**
         * Maps a kind name to it's view id. First it looks up a custom mapped kind, then falls back to `convertKindToViewPath`.
         * @method mapKindToViewId
         * @param {string} kind The kind name.
         * @return {string} The view id.
         */
        mapKindToViewId: function(kind) {
            return kindViewMaps[kind] || widget.convertKindToViewPath(kind);
        },
        /**
         * Converts a kind name to it's view id. Used to conventionally map kinds who aren't explicitly mapped through `mapKind`.
         * @method convertKindToViewPath
         * @param {string} kind The kind name.
         * @return {string} The view id.
         */
        convertKindToViewPath: function(kind) {
            return 'widgets/' + kind + '/view';
        },
        createCompositionSettings: function(element, settings) {
            if (!settings.model) {
                settings.model = this.mapKindToModuleId(settings.kind);
            }

            if (!settings.view) {
                settings.view = this.mapKindToViewId(settings.kind);
            }

            settings.preserveContext = true;
            settings.activate = true;
            settings.activationData = settings;
            settings.mode = 'templated';

            return settings;
        },
        /**
         * Creates a widget.
         * @method create
         * @param {DOMElement} element The DOMElement or knockout virtual element that serves as the target element for the widget.
         * @param {object} settings The widget settings.
         * @param {object} [bindingContext] The current binding context.
         */
        create: function(element, settings, bindingContext, fromBinding) {
            if(!fromBinding){
                settings = widget.getSettings(function() { return settings; }, element);
            }

            var compositionSettings = widget.createCompositionSettings(element, settings);

            composition.compose(element, compositionSettings, bindingContext);
        },
        /**
         * Installs the widget module by adding the widget binding handler and optionally registering kinds.
         * @method install
         * @param {object} config The module config. Add a `kinds` array with the names of widgets to automatically register. You can also specify a `bindingName` if you wish to use another name for the widget binding, such as "control" for example.
         */
        install:function(config){
            config.bindingName = config.bindingName || 'widget';

            if(config.kinds){
                var toRegister = config.kinds;

                for(var i = 0; i < toRegister.length; i++){
                    widget.registerKind(toRegister[i]);
                }
            }

            ko.bindingHandlers[config.bindingName] = {
                init: function() {
                    return { controlsDescendantBindings: true };
                },
                update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var settings = widget.getSettings(valueAccessor);
                    extractParts(element, settings);
                    widget.create(element, settings, bindingContext, true);
                }
            };

            composition.composeBindings.push(config.bindingName + ':');
            ko.virtualElements.allowedBindings[config.bindingName] = true;
        }
    };

    return widget;
});

/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * The entrance transition module.
 * @module entrance
 * @requires system
 * @requires composition
 * @requires jquery
 */
define('transitions/entrance',['durandal/system', 'durandal/composition', 'jquery'], function(system, composition, $) {
    var fadeOutDuration = 100;
    var endValues = {
        left: '0px',
        opacity: 1
    };
    var clearValues = {
        left: '',
        top: '',
        right: '',
        bottom:'',
        position:'',
        opacity: ''
    };

    var isIE = navigator.userAgent.match(/Trident/) || navigator.userAgent.match(/MSIE/);

    var animation = false,
        domPrefixes = 'Webkit Moz O ms Khtml'.split(' '),
        elm = document.createElement('div');

    if(elm.style.animationName !== undefined) {
        animation = true;
    }

    if(!animation) {
        for(var i = 0; i < domPrefixes.length; i++) {
            if(elm.style[domPrefixes[i] + 'AnimationName'] !== undefined) {
                animation = true;
                break;
            }
        }
    }

    if(animation) {
        if(isIE){
            system.log('Using CSS3/jQuery mixed animations.');
        }else{
            system.log('Using CSS3 animations.');
        }
    } else {
        system.log('Using jQuery animations.');
    }

    function removeAnimationClasses(ele, fadeOnly){
        ele.classList.remove(fadeOnly ? 'entrance-in-fade' : 'entrance-in');
        ele.classList.remove('entrance-out');
    }

    /**
     * @class EntranceModule
     * @constructor
     */
    var entrance = function(context) {
        return system.defer(function(dfd) {
            function endTransition() {
                dfd.resolve();
            }

            function scrollIfNeeded() {
                if (!context.keepScrollPosition) {
                    $(document).scrollTop(0);
                }
            }

            if (!context.child) {
                $(context.activeView).fadeOut(fadeOutDuration, endTransition);
            } else {
                var duration = context.duration || 500;
                var $child = $(context.child);
                var fadeOnly = !!context.fadeOnly;
                var startValues = {
                    display: 'block',
                    opacity: 0,
                    position: 'absolute',
                    left: fadeOnly || animation ? '0px' : '20px',
                    right: 0,
                    top: 0,
                    bottom: 0
                };

                function startTransition() {
                    scrollIfNeeded();
                    context.triggerAttach();

                    if (animation) {
                        removeAnimationClasses(context.child, fadeOnly);
                        context.child.classList.add(fadeOnly ? 'entrance-in-fade' : 'entrance-in');
                        setTimeout(function () {
                            removeAnimationClasses(context.child, fadeOnly);
                            if(context.activeView){
                                removeAnimationClasses(context.activeView, fadeOnly);
                            }
                            $child.css(clearValues);
                            endTransition();
                        }, duration);
                    } else {
                        $child.animate(endValues, {
                            duration: duration,
                            easing: 'swing',
                            always: function() {
                                $child.css(clearValues);
                                endTransition();
                            }
                        });
                    }
                }

                $child.css(startValues);

                if(context.activeView) {
                    if (animation && !isIE) {
                        removeAnimationClasses(context.activeView, fadeOnly);
                        context.activeView.classList.add('entrance-out');
                        setTimeout(startTransition, fadeOutDuration);
                    } else {
                        $(context.activeView).fadeOut({ duration: fadeOutDuration, always: startTransition });
                    }
                } else {
                    startTransition();
                }
            }
        }).promise();
    };

    return entrance;
});

/**
 * @license text 2.0.16 Copyright jQuery Foundation and other contributors.
 * Released under MIT license, http://github.com/requirejs/text/LICENSE
 */
/*jslint regexp: true */
/*global require, XMLHttpRequest, ActiveXObject,
  define, window, process, Packages,
  java, location, Components, FileUtils */

define('text',['module'], function (module) {
    'use strict';

    var text, fs, Cc, Ci, xpcIsWindows,
        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = {},
        masterConfig = (module.config && module.config()) || {};

    function useDefault(value, defaultValue) {
        return value === undefined || value === '' ? defaultValue : value;
    }

    //Allow for default ports for http and https.
    function isSamePort(protocol1, port1, protocol2, port2) {
        if (port1 === port2) {
            return true;
        } else if (protocol1 === protocol2) {
            if (protocol1 === 'http') {
                return useDefault(port1, '80') === useDefault(port2, '80');
            } else if (protocol1 === 'https') {
                return useDefault(port1, '443') === useDefault(port2, '443');
            }
        }
        return false;
    }

    text = {
        version: '2.0.16',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var modName, ext, temp,
                strip = false,
                index = name.lastIndexOf("."),
                isRelative = name.indexOf('./') === 0 ||
                             name.indexOf('../') === 0;

            if (index !== -1 && (!isRelative || index > 1)) {
                modName = name.substring(0, index);
                ext = name.substring(index + 1);
            } else {
                modName = name;
            }

            temp = ext || modName;
            index = temp.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = temp.substring(index + 1) === "strip";
                temp = temp.substring(0, index);
                if (ext) {
                    ext = temp;
                } else {
                    modName = temp;
                }
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var uProtocol, uHostName, uPort,
                match = text.xdRegExp.exec(url);
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || isSamePort(uProtocol, uPort, protocol, port));
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config && config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config && config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName +
                    (parsed.ext ? '.' + parsed.ext : ''),
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            // Do not load if it is an empty: url
            if (url.indexOf('empty:') === 0) {
                onLoad();
                return;
            }

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                extPart = parsed.ext ? '.' + parsed.ext : '',
                nonStripName = parsed.moduleName + extPart,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (masterConfig.env === 'node' || (!masterConfig.env &&
            typeof process !== "undefined" &&
            process.versions &&
            !!process.versions.node &&
            !process.versions['node-webkit'] &&
            !process.versions['atom-shell'])) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback, errback) {
            try {
                var file = fs.readFileSync(url, 'utf8');
                //Remove BOM (Byte Mark Order) from utf8 files if it is there.
                if (file[0] === '\uFEFF') {
                    file = file.substring(1);
                }
                callback(file);
            } catch (e) {
                if (errback) {
                    errback(e);
                }
            }
        };
    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&
            text.createXhr())) {
        text.get = function (url, callback, errback, headers) {
            var xhr = text.createXhr(), header;
            xhr.open('GET', url, true);

            //Allow plugins direct access to xhr headers
            if (headers) {
                for (header in headers) {
                    if (headers.hasOwnProperty(header)) {
                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);
                    }
                }
            }

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status || 0;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        if (errback) {
                            errback(err);
                        }
                    } else {
                        callback(xhr.responseText);
                    }

                    if (masterConfig.onXhrComplete) {
                        masterConfig.onXhrComplete(xhr, url);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&
            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var stringBuffer, line,
                encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                if (line !== null) {
                    stringBuffer.append(line);
                }

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&
            typeof Components !== 'undefined' && Components.classes &&
            Components.interfaces)) {
        //Avert your gaze!
        Cc = Components.classes;
        Ci = Components.interfaces;
        Components.utils['import']('resource://gre/modules/FileUtils.jsm');
        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);

        text.get = function (url, callback) {
            var inStream, convertStream, fileObj,
                readData = {};

            if (xpcIsWindows) {
                url = url.replace(/\//g, '\\');
            }

            fileObj = new FileUtils.File(url);

            //XPCOM, you so crazy
            try {
                inStream = Cc['@mozilla.org/network/file-input-stream;1']
                           .createInstance(Ci.nsIFileInputStream);
                inStream.init(fileObj, 1, 0, false);

                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']
                                .createInstance(Ci.nsIConverterInputStream);
                convertStream.init(inStream, "utf-8", inStream.available(),
                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);

                convertStream.readString(inStream.available(), readData);
                convertStream.close();
                inStream.close();
                callback(readData.value);
            } catch (e) {
                throw new Error((fileObj && fileObj.path || '') + ': ' + e);
            }
        };
    }
    return text;
});


define('text!views/bookmark.html',[],function () { return '<p class="help-block" data-bind="text: res().loadingBookmarkStatus"></p>\r\n';});


define('text!views/exportStatus.html',[],function () { return '<div class="panel-group">\r\n    <div class="panel panel-default">\r\n        <div class="panel-body">\r\n            <div class="container-fluid">\r\n                <div class="row-fluid">\r\n                    <div class="table-responsive">\r\n                        <table class="naturelist table table-bordered table-striped">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th data-bind="text:res().exportStatusText"></th>\r\n                                    <th data-bind="text:res().exportExportJobFinished"></th>\r\n                                    <th data-bind="text:res().exportFileSize"></th>\r\n                                    <th data-bind="text:res().exportFileLink"></th>\r\n                                    <th data-bind="text:res().deleteExport"></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody data-bind="foreach: exportStatusList">\r\n                                <tr>\r\n                                    <td>\r\n                                        <span data-bind="text: statusText"></span>\r\n                                        <span data-bind="visible: (status() != 2 && status() != 3)" class="glyphicon glyphicon-refresh glyphicon-spin"></span>\r\n                                        <!--<div class="container" data-bind="visible: statusText() != \'Utført\' && statusText() != \'Completed\'">\r\n                                            <div class="canvas">\r\n                                                <div class="spinner5"></div>\r\n                                            </div>\r\n                                        </div>-->\r\n\r\n                                    </td>\r\n                                    <td><span class="date" data-bind="text: jobFinishedAsString"></span><span data-bind="text: \' - \' + filter()"></span></td>\r\n                                    <td><span class="date" data-bind="text: (Math.round(fileSize()/1024) + \' Kb\')"></span></td>\r\n                                    <td><a data-bind="attr: { href: link }, visible: downloadIsActive"><span data-bind="text:$parent.res().exportDownload"></span></a></td>\r\n                                    <td>\r\n                                        <a data-bind="click: function(data, event) { $parent.removeExportStatus($index(),data, event) }">\r\n                                            <span data-bind="text:$parent.res().removeExportStatus"></span>\r\n                                        </a>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n';});


define('text!views/featureInfo.html',[],function () { return '<div data-bind="visible: !totalListItems()">\r\n    <span data-bind="text: res().noSelectionhelpText"></span>\r\n</div>\r\n<div data-bind="visible: totalListItems">\r\n\r\n    <div class="form-group">\r\n        <div class="btn-group" data-toggle="buttons">\r\n            <label data-bind="click: setShowMode.bind($data, \'0\'), css: { active: showAll() == \'0\' }"\r\n                   class="btn btn-default">\r\n                <input type="radio" name="whatToShowGroup" value="0" data-bind="checked: showAll"> \r\n                <span data-bind="text: res().showMainFeatures"></span>\r\n            </label>\r\n            <label data-bind="click: setShowMode.bind($data, \'1\'), css: { active: showAll() == \'1\' }"\r\n                   class="btn btn-default">\r\n                <input type="radio" name="whatToShowGroup" value="1" data-bind="checked: showAll">\r\n                <span data-bind="text: res().showAllFeatures"></span>\r\n            </label>\r\n            <label data-bind="click: setShowMode.bind($data, \'2\'), css: { active: showVerbatim() == \'2\' }"\r\n                   class="btn btn-default">\r\n                <input type="radio" name="whatToShowGroup" value="2" data-bind="checked: showAll">\r\n                <span data-bind="text: res().showOriginalFeatures"></span>\r\n            </label>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <div class="panel panel-default" id="panel-featureinfo">\r\n\r\n        <div class="pull-left">\r\n            <button data-bind="visible: hasThisLocationInFilter, click: clearLocationInFilter, attr: {title: res().removeLocationFromFilter}"\r\n                    class="btn icon-remove-sm panel-heading-icon-left"></button>\r\n            <button data-bind="visible: !hasThisLocationInFilter(), click: setLocationInFilter, attr: {title: res().addLocationToFilter}"\r\n                    class="btn icon-target-sm panel-heading-icon-left"></button>\r\n        </div>\r\n\r\n        <div data-bind="visible: true" class="panel-heading" role="tab" id="headingFeatureInfo">\r\n            <div class="pull-right">\r\n                <button class="glyphicon glyphicon-backward"\r\n                        data-bind="click: previousPage, attr: {title: res().showPreviousObservation}, visible: currentListItem() != 0"></button>\r\n                <span style="font-size: 12px" data-bind="text: \'[\' + pageString() + \']\'"> </span>\r\n                <button class="glyphicon glyphicon-forward"\r\n                        data-bind="click: nextPage, attr: {title: res().showNextObservation}, visible: currentListItem() < totalListItems()-1"></button>\r\n\r\n            </div>\r\n            <br>\r\n            <div data-bind="visible: pleaseWaitWhileLoading">\r\n                <br>\r\n                <span class="glyphicon glyphicon-globe glyphicon-spin"></span>\r\n            </div>\r\n\r\n        </div>\r\n        <div style="font-size: 12px; background-color: white" class="panel-collapse" role="tabpanel">\r\n            <div id="featureInfoContent" class="panel-body" style="overflow-y: auto; overflow-x: hidden; padding-top: 0;">\r\n\r\n                <div style="font-size: 12px" data-bind="visible: !pleaseWaitWhileLoading()">\r\n                    <h3>\r\n                        <strong data-bind="text: popularName"></strong>\r\n                        <br data-bind="visible: popularName"/>\r\n                        <a data-bind="attr:{href: taxonUrl, target: \'_new\'}">\r\n                            <em>\r\n                                <small data-bind="text: scientificName, attr:{title:res().showExternalTaxonInfo}" ></small>\r\n                            </em>\r\n                        </a>\r\n                        <small data-bind="text: scientificNameAuthor"></small>\r\n                    </h3>\r\n\r\n                    <div data-bind="visible: isRedlistCategory">\r\n                        <div class="categorybar">\r\n                            <div class="categorybar-centerline"></div>\r\n                            \r\n                            <div data-bind="foreach: [\'RE\', \'CR\', \'EN\', \'VU\', \'NT\', \'DD\', \'LC\']">\r\n                                <div class="categorybar-categorycontainer">\r\n                                    <a data-bind="visible: $data == $parent.category(), attr:{href: $parent.statusUrl, target: \'_new\'}">\r\n                                        <div data-bind="attr: { \'class\': $data == $parent.category() ? $data.toLowerCase() + \'-selected categorybar-category\' : \'categorybar-category\'}">\r\n                                            <p class="categorybar-textalign" data-bind="text: $data, attr: {title: $parent.res()[$data.toLowerCase() + \'CategoryTitle\']}"></p>\r\n                                        </div>\r\n                                    </a>\r\n                                    <div data-bind="visible: $data != $parent.category(), attr: { \'class\': $data == $parent.category() ? $data.toLowerCase() + \'-selected categorybar-category\' : \'categorybar-category\' }">\r\n                                        <p class="categorybar-textalign" data-bind="text: $data, attr: {title: $parent.res()[$data.toLowerCase() + \'CategoryTitle\']}"></p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class="categorybar-range top categorybar-range-redlisted">&nbsp;</div>\r\n                            <div class="categorybar-range-legend categorybar-range-redlisted">\r\n                                <span data-bind="attr: {title: res().redlisted}">&nbsp;&nbsp;<span data-bind="text: res().redlisted"></span>&nbsp;&nbsp;</span>\r\n                            </div>\r\n                            <div class="categorybar-range bottom categorybar-range-threathened">&nbsp;</div>\r\n                            <div class="categorybar-range-legend bottom categorybar-range-threathened">\r\n                                <span data-bind="attr: {title: res().threatened}">&nbsp;&nbsp;<span data-bind="text: res().threatened"></span>&nbsp;&nbsp;</span>\r\n                            </div>\r\n                        </div>\r\n                        <a data-bind="visible: isRegionallyAssessed(), attr:{href: regionallyAssessedUrl}" target="_new">\r\n                            <br/>\r\n                            <span data-bind="visible: isRegionallyAssessed(), text: res().regionallyAssessed"></span>\r\n                        </a>\r\n\r\n                        <!--<strong>\r\n                            <a data-bind="attr:{href: statusUrl}" target="_new">\r\n                                <span data-bind="text: res()[category().toLowerCase() + \'CategoryTitle\'], style: { color: categoryColor() }"></span>\r\n                            </a>\r\n                        </strong>-->\r\n\r\n                    </div>\r\n\r\n                    <div data-bind="visible: isAlienSpeciesCategory" >\r\n                        <!--<strong>\r\n                            <a data-bind="attr:{href: statusUrl}" target="_new">\r\n                                <span class="category-description" data-bind="text: res()[category().toLowerCase() + \'CategoryTitle\']"></span>\r\n                            </a>\r\n                        </strong>-->\r\n                        \r\n\r\n                        <div class="categorybar">\r\n                            <div class="categorybar-centerline"></div>\r\n\r\n                            <div data-bind="foreach: [\'SE\', \'HI\', \'PH\', \'LO\', \'NK\', \'NR\']">\r\n                                <div class="categorybar-categorycontainer-alien">\r\n                                    <a data-bind="visible: $data == $parent.category(), attr:{href: $parent.statusUrl, target: \'_new\'}">\r\n                                        <div data-bind="attr: { \'class\': $data == $parent.category() ? $data.toLowerCase() + \'-selected categorybar-category\': \'categorybar-category\' }">\r\n                                            <p class="categorybar-textalign" data-bind="text: $data, attr: {title: $parent.res()[$data.toLowerCase() + \'CategoryTitle\']}"></p>\r\n                                        </div>\r\n                                    </a>\r\n                                    <div data-bind="visible: $data != $parent.category(), attr: { \'class\': $data == $parent.category() ? $data.toLowerCase() + \'-selected categorybar-category\': \'categorybar-category\' }">\r\n                                        <p class="categorybar-textalign" data-bind="text: $data, attr: {title: $parent.res()[$data.toLowerCase() + \'CategoryTitle\']}"></p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class="categorybar-range top categorybar-range-alien">&nbsp;</div>\r\n                            <div class="categorybar-range-legend categorybar-range-alien">\r\n                                <span data-bind="attr: {title: res().alienSpecies}">&nbsp;&nbsp;<span data-bind="text: res().alienSpecies"></span>&nbsp;&nbsp;</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div data-bind="visible: showVerbatim">\r\n                        <span data-bind="text: res().notImplemented"></span>\r\n                    </div>\r\n\r\n                    <br />\r\n                    <div class="panel-group" data-bind="visible: !showVerbatim()">\r\n                        <div class="panel panel-default">\r\n                            <div class="panel-heading">\r\n                                <h4 class="panel-title">\r\n                                    <a data-toggle="collapse" class="accordion-toggle" href="#collapsetaxonomiDetails">\r\n                                        <span class="panel-heading-title" data-bind="text:res().taxonHeader"></span>\r\n                                    </a>\r\n                                </h4>\r\n                            </div>\r\n                            <div id="collapsetaxonomiDetails" class="panel-collapse collapse in">\r\n                                <div class="panel-body">\r\n                                    <div data-bind="visible: popularName() || showAll()">\r\n                                        <label class="control-label" for="popularNameSpan" data-bind="text: res().popularNameTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: popularName" id="popularNameSpan"></span><br /><br data-bind="visible: popularName().length > 25">\r\n                                    </div>\r\n                                    \r\n                                    <label class="control-label" for="taxonGroupSpan" data-bind="text: res().taxonGroupTitle"></label>\r\n                                    <span class="pull-right" data-bind="text: taxonGroup" id="taxonGroupSpan"></span><br />\r\n                                    <label class="control-label" for="scientificNameSpan"\r\n                                           data-bind="text: res().scientificNameShortTitle, attr: {title: res().scientificNameTitle}"></label>\r\n                                    <span class="pull-right" data-bind="trimText: scientificName, attr: {title: taxonomy}"\r\n                                          id="scientificNameSpan"></span><br />\r\n                                    <label class="control-label" for="scientificNameAuthorSpan" data-bind="text: res().scientificNameAuthorTitle"></label>\r\n                                    <span class="pull-right" data-bind="text: scientificNameAuthor"\r\n                                          id="scientificNameAuthorSpan"></span><br />\r\n                                    <div data-bind="visible: showAll">\r\n                                        <div data-bind="foreach: taxonHierarchy">\r\n                                            <label class="control-label" data-bind="text: category + \':\'"></label>\r\n                                            <span class="pull-right" data-bind="text: name, attr: {title: displayName}"></span><br />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div data-bind="visible: showSourceScientificName">\r\n                                        <label class="control-label" data-bind="text: res().matchedScientificNameShortTitle, attr: {title: res().matchedScientificNameTitle}"></label><br />\r\n                                        <label class="control-label" for="matchedScientificNameSpan"\r\n                                               data-bind="text: res().scientificNameShortTitle, attr: {title: res().scientificNameTitle}"></label>\r\n                                        <span class="pull-right" data-bind="trimText: matchedScientificName, attr:{title: matchedScientificName}"\r\n                                              id="matchedScientificNameSpan"></span><br />\r\n                                        <label class="control-label" for="matchedScientificNameAuthorSpan" data-bind="text: res().scientificNameAuthorTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: matchedScientificNameAuthor"\r\n                                              id="matchedScientificNameAuthorSpan"></span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class="panel panel-default">\r\n                            <div class="panel-heading">\r\n                                <h4 class="panel-title">\r\n                                    <a data-toggle="collapse" class="accordion-toggle" href="#collapseObservationDetails">\r\n                                        <span class="panel-heading-title" data-bind="text:res().observationHeader"></span>                                        \r\n                                    </a>\r\n                                </h4>\r\n                            </div>\r\n                            <div id="collapseObservationDetails" class="panel-collapse collapse in">\r\n                                <div class="panel-body">\r\n                                    <label class="control-label" for="yearCollectedSpan" data-bind="text: res().dateCollectedTitle"></label>\r\n                                    <span class="pull-right" data-bind="text: yearCollected" id="yearCollectedSpan"></span><br />\r\n                                    <label class="control-label" for="collectorSpan" data-bind="text: res().collectorTitle"></label><br data-bind="visible: collector().length > 25">\r\n                                    <span class="pull-right" data-bind="text: collector, attr:{title: collector}"\r\n                                          id="collectorSpan"></span><br>\r\n                                    <div data-bind="visible: showAll">\r\n                                        <label class="control-label" for="yearIdentifiedSpan"\r\n                                               data-bind="text: res().yearIdentifiedTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: yearIdentified"\r\n                                              id="yearIdentifiedSpan"></span><br />\r\n                                    </div>\r\n                                    <div data-bind="visible: identifiedBy() || showAll()">\r\n                                        <label class="control-label" for="identifiedBySpan"\r\n                                               data-bind="text: res().identifiedByTitle"></label>\r\n                                        <span class="pull-right" data-bind="trimText: identifiedBy, attr:{title: identifiedBy}"\r\n                                              id="identifiedBySpan"></span><br />\r\n                                    </div>\r\n                                    <div data-bind="visible: (unspontaneous() == res().yes)">\r\n                                        <label class="control-label" data-bind="text: res().unspontaneousTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: unspontaneous"></span><br />\r\n                                    </div>\r\n                                    <div data-bind="visible: (identification() == res().yes)">\r\n                                        <label class="control-label" data-bind="text: res().identificationTitle"></label>\r\n                                        <span class="pull-right" data-bind="text:identification"></span><br />\r\n                                    </div>\r\n                                    <div data-bind="visible: (verified() == res().yes)">\r\n                                        <label class="control-label" for="verifiedSpan" data-bind="text: res().verifiedTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: verified" id="verifiedSpan"></span><br />\r\n                                    </div>\r\n                                    <label class="control-label" for="basisOfRecordSpan"\r\n                                           data-bind="text: res().basisOfRecordTitle"></label>\r\n                                    <span class="pull-right" data-bind="text: basisOfRecord" id="basisOfRecordSpan"></span><br />\r\n                                    <div data-bind="visible: showAll">\r\n                                        <label class="control-label" for="individualCountSpan" data-bind="text: res().individualCountTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: individualCount"\r\n                                              id="individualCountSpan"></span><br />\r\n                                        <label class="control-label" for="sexSpan" data-bind="text: res().sexTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: sex" id="sexSpan"></span><br />\r\n                                    </div>\r\n                                    <div data-bind="visible: behavior() || showAll()">\r\n                                        <label class="control-label" for="behaviorSpan"\r\n                                               data-bind="text: res().behaviorTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: behavior" id="behaviorSpan"></span><br />\r\n                                    </div>\r\n                                    <div data-bind="visible: showAll">\r\n                                        <label class="control-label" for="okologiSpan" data-bind="text: res().okologiTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: okologi" id="okologiSpan"></span><br />\r\n                                        <label class="control-label" for="habitatSpan" data-bind="text: res().habitatTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: habitat" id="habitatSpan"></span><br />\r\n                                        <label class="control-label" for="substratSpan" data-bind="text: res().substratTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: substrat" id="substratSpan"></span><br />\r\n                                    </div>\r\n                                    <div data-bind="visible: hasPictures">\r\n                                        <label class="control-label" for="hasPicturesSpan" data-bind="text: res().hasPicturesTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: hasPictures" id="hasPicturesSpan"></span><br />\r\n                                    </div>\r\n                                    <div data-bind="visible: (absent() == res().yes)">\r\n                                        <label class="control-label" data-bind="text: res().absentTitle"></label>\r\n                                        <span class="pull-right" data-bind="text:absent"></span><br />\r\n                                    </div>\r\n                                    <div data-bind="visible: (notRecovered() == res().yes)">\r\n                                        <label class="control-label" data-bind="text: res().notRecoveredTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: notRecovered"></span><br />\r\n                                    </div>\r\n                                    <div class="input-group" data-bind="foreach: files">\r\n                                        <div class="col-xs-6" style="padding: 5px;">\r\n                                            <a data-position-to="window" data-bind="attr: {\'data-img\': $root.config.mediaProxyUrl + Id + \'?maxWidth=800&maxHeight=800\', rel: \'popover\'}">\r\n                                                <img data-bind="attr: {src: \'data:\' + MediaType + \';base64,\' + Base64File }">\r\n                                            </a>\r\n                                            <div data-bind="visible: RightsHolder || $parent.showAll()">\r\n                                                <label class="control-label" for="rightsHolderSpan" data-bind="text: $parent.res().rightsHolderTitle"></label><br data-bind="visible: RightsHolder.length <= 15">\r\n                                                <span class="pull-left" data-bind="text: RightsHolder" id="rightsHolderSpan"></span><br>\r\n                                            </div>\r\n                                            <div data-bind="visible: License || $parent.showAll()">\r\n                                                <div data-bind="if: License.startsWith(\'http\')">\r\n                                                    <label class="control-label" data-bind="text: $parent.res().licenseTitle"></label>\r\n                                                    <a data-bind="attr:{href: License, target: \'_new\'}">CC</a><br />\r\n                                                </div>\r\n                                                <div data-bind="ifnot: License.startsWith(\'http\')">\r\n                                                    <label class="control-label" for="licenseSpan" data-bind="text: $parent.res().licenseTitle"></label>\r\n                                                    <span class="pull-right" data-bind="text: License" id="licenseSpan"></span><br />\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <label class="control-label" for="urlSpan" data-bind="text: res().urlTitle"></label>\r\n                                    <div data-bind="foreach: associatedReferences">\r\n                                        <a data-bind="attr:{href: $data, target: \'_new\'}">\r\n                                            <span class="pull-right" data-bind="trimTextLength: 36, trimText: $data" id="urlSpan"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class="panel panel-default">\r\n                            <div class="panel-heading">\r\n                                <h4 class="panel-title">\r\n                                    <a data-toggle="collapse" class="accordion-toggle" href="#collapseGeoRefDetails">\r\n                                        <span class="panel-heading-title" data-bind="text:res().georeferenceHeader"></span>\r\n                                        \r\n                                    </a>\r\n                                </h4>\r\n                            </div>\r\n                            <div id="collapseGeoRefDetails" class="panel-collapse collapse in">\r\n                                <div class="panel-body">\r\n                                    <div data-bind="visible: showAll">\r\n                                        <label class="control-label" for="latitudeSpan" data-bind="text: res().latitudeTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: latitude" id="latitudeSpan"></span><br />\r\n                                        <label class="control-label" for="longitudeSpan" data-bind="text: res().longitudeTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: longitude" id="longitudeSpan"></span><br />\r\n                                    </div>\r\n                                    <label class="control-label" for="coordinatePrecisionSpan" data-bind="text: res().coordinatePrecisionTitle"></label>\r\n                                    <span class="pull-right" data-bind="text: coordinatePrecision() > 0 ? addSeparator(coordinatePrecision()) : res().unknown" id="coordinatePrecisionSpan"></span><br />\r\n                                    <div data-bind="visible: showAll">\r\n                                        <label class="control-label" for="utmSoneSpan" data-bind="text: res().utmSoneTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: utmSone" id="utmSoneSpan"></span><br />\r\n                                        <label class="control-label" for="utmOstSpan" data-bind="text: res().utmEastTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: utmOst" id="utmOstSpan"></span><br />\r\n                                        <label class="control-label" for="utmNordSpan" data-bind="text: res().utmNorthTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: utmNord" id="utmNordSpan"></span><br />\r\n                                        <label class="control-label" for="mgrsFraSpan" data-bind="text: res().mgrsFromTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: mgrsFra" id="mgrsFraSpan"></span><br />\r\n                                        <label class="control-label" for="mgrsTilSpan" data-bind="text: res().mgrsToTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: mgrsTil" id="mgrsTilSpan"></span><br />\r\n                                        <label class="control-label" for="koordinatKildeSpan"\r\n                                               data-bind="text: res().coordinateSourceTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: koordinatKilde"\r\n                                              id="koordinatKildeSpan"></span><br />\r\n                                        <label class="control-label" for="elevationKildeSpan"\r\n                                               data-bind="text: res().elevationSourceTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: elevationKilde"\r\n                                              id="elevationKildeSpan"></span><br />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class="panel panel-default">\r\n                            <div class="panel-heading">\r\n                                <h4 class="panel-title">\r\n                                    <a data-toggle="collapse" class="accordion-toggle" href="#collapseLocationDetails">\r\n                                        <span class="panel-heading-title" data-bind="text:res().placeHeader"></span>                                        \r\n                                    </a>\r\n                                </h4>\r\n                            </div>\r\n                            <div id="collapseLocationDetails" class="panel-collapse collapse in">\r\n                                <div class="panel-body">\r\n                                    <div data-bind="visible: showAll">\r\n                                        <label class="control-label" for="countrySpan" data-bind="text: res().countryTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: country" id="countrySpan"></span><br />\r\n                                    </div>\r\n                                    <label class="control-label" for="countySpan" data-bind="text: res().countyTitle"></label>\r\n                                    <span class="pull-right" data-bind="text: county" id="countySpan"></span><br />\r\n                                    <label class="control-label" for="municipalitySpan" data-bind="text: res().municipalityTitle"></label>\r\n                                    <span class="pull-right" data-bind="text: municipality" id="municipalitySpan"></span><br />\r\n                                    <div data-bind="visible: conservationArea">\r\n                                        <label class="control-label" for="conservationAreaSpan" data-bind="text: res().conservationAreaTitle"></label>\r\n                                        <a id="conservationAreaSpan" class="pull-right" data-bind="text: conservationArea, attr: {href: conservationAreaCode, target: \'_new\'}"></a><br />\r\n                                    </div>\r\n                                    <label class="control-label" for="localitySpan" data-bind="text: res().localityTitle"></label>\r\n                                    <span class="pull-right" data-bind="text: localitystring" id="localitySpan"></span><br />\r\n                                    <div data-bind="visible: showAll">\r\n                                        <label class="control-label" for="protectedSpan" data-bind="text: res().protectedSpeciesTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: protectedSpecies" id="protectedSpan"></span><br />                                        \r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class="panel panel-default">\r\n                            <div class="panel-heading">\r\n                                <h4 class="panel-title">\r\n                                    <a data-toggle="collapse" class="accordion-toggle" href="#collapseDatabaseDetails">\r\n                                        <span class="panel-heading-title" data-bind="text:res().databaseDetailsHeader"></span>                                        \r\n                                    </a>\r\n                                </h4>\r\n                            </div>\r\n                            <div id="collapseDatabaseDetails" class="panel-collapse collapse in">\r\n                                <div class="panel-body">\r\n                                    <div data-bind="visible: showAll">\r\n                                        <label class="control-label" for="datelastmodifiedSpan"\r\n                                               data-bind="text: res().dateLastModifiedTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: datelastmodified"\r\n                                              id="datelastmodifiedSpan"></span><br />\r\n                                    </div>\r\n                                    <div data-bind="visible: institutionName() || showAll()">\r\n                                        <label class="control-label" for="institutionSpan" data-bind="text: res().institutionNameTitle"></label>\r\n                                        <a data-bind="attr: {href: institutionUrl, target: \'_new\'}">\r\n                                            <span class="pull-right"\r\n                                                  data-bind="text: institutionName, trimTextLength: 28, attr:{title: institutionName() + \': \' + institutionUrl()}"\r\n                                                  id="institutionSpan"></span>\r\n                                        </a><br />\r\n\r\n                                    </div>\r\n\r\n                                    <label class="control-label" for="collectionSpan" data-bind="text: res().collectionTitle"></label>\r\n                                    <span class="pull-right" data-bind="trimText: collectionName, attr:{title: collectionName}"\r\n                                          id="collectionSpan"></span><br />\r\n                                    <div data-bind="visible: showAll">\r\n                                        <label class="control-label" for="dataSetNameSpan" data-bind="text: res().datasetTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: dataSetName" id="dataSetNameSpan"></span><br />\r\n                                        <label class="control-label" for="catalogNumberSpan"\r\n                                               data-bind="text: res().catalogNumberTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: catalogNumber" id="catalogNumberSpan"></span><br />\r\n                                        <label class="control-label" for="observationIdSpan"\r\n                                               data-bind="text: res().observationIdTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: observationId" id="observationIdSpan"></span><br />\r\n                                        <label class="control-label" for="nodeIdSpan"\r\n                                               data-bind="text: res().nodeIdTitle"></label>\r\n                                        <span class="pull-right" data-bind="text: nodeId" id="nodeIdSpan"></span><br />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    <div data-bind="visible: showAll">\r\n\r\n                        <div class="panel panel-default">\r\n                            <div class="panel-heading">\r\n                                <h4 class="panel-title">\r\n                                    <a data-toggle="collapse" class="accordion-toggle" href="#collapseOtherDetails">\r\n                                        <span class="panel-heading-title" data-bind="text:res().otherHeader"></span>\r\n                                    </a>\r\n                                </h4>\r\n                            </div>\r\n                            <div id="collapseOtherDetails" class="panel-collapse collapse in">\r\n                                <div class="panel-body">\r\n                                    <label class="control-label" for="occurrenceIDSpan"\r\n                                           data-bind="text: res().occurrenceIdTitle"></label>\r\n                                    <span class="pull-right" data-bind="text: occurrenceID" id="occurrenceIDSpan"></span><br />\r\n                                    <label class="control-label" for="minimumElevationSpan"\r\n                                           data-bind="text: res().minimumElevationTitle"></label>\r\n                                    <span class="pull-right" data-bind="text: minimumElevation"\r\n                                          id="minimumElevationSpan"></span><br />\r\n                                    <label class="control-label" for="maximumElevationSpan"\r\n                                           data-bind="text: res().maximumElevationTitle"></label>\r\n                                    <span class="pull-right" data-bind="text: maximumElevation"\r\n                                          id="maximumElevationSpan"></span><br />\r\n                                    <label class="control-label" for="minimumDepthSpan"\r\n                                           data-bind="text: res().minimumDepthTitle"></label>\r\n                                    <span class="pull-right" data-bind="text: minimumDepth" id="minimumDepthSpan"></span><br />\r\n                                    <label class="control-label" for="maximumDepthSpan"\r\n                                           data-bind="text: res().maximumDepthTitle"></label>\r\n                                    <span class="pull-right" data-bind="text: maximumDepth" id="maximumDepthSpan"></span><br />\r\n                                    <label class="control-label" for="notesSpan" data-bind="text: res().notesTitle"></label>\r\n                                    <span class="pull-right" data-bind="text: notes" id="notesSpan"></span><br />\r\n                                    <label class="control-label" for="collectingMethodSpan" data-bind="text: res().collectingMethodTitle"></label>\r\n                                    <span class="pull-right" data-bind="text: collectingMethod"\r\n                                          id="collectingMethodSpan"></span><br />\r\n                                    <label class="control-label" data-bind="text: res().dynamicPropertiesTitle"></label>\r\n                                    <div data-bind="foreach: dynamicProperties">\r\n                                        <label class="control-label" data-bind="text: name + \':\'"></label>\r\n                                        <span class="pull-right" data-bind="text: value"></span><br />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                        <a data-bind="text: res().feedbackObservationText, attr:{href: \'mailto:\' + reportAdress() + \'?subject=\' + reportSubject() + \'&body=\' + reportBody()}"></a>\r\n                    </div>\r\n                    <br>\r\n                    <br>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n';});


define('text!views/footer.html',[],function () { return '<div data-bind="visible: !footerWarning()" class="hidden-xs" style="background-color: #4c4a48; height: 10px"></div>\r\n<div class="label label-warning" data-bind="visible: footerWarning">\r\n    <span data-bind="text: footerWarningText"></span>\r\n    <span data-bind="click: toggleShowWarning, attr: {title: res().hideWarning}" class="pull-right glyphicon glyphicon-remove pointerCursor"></span>\r\n</div>\r\n<div class="label label-warning" data-bind="visible: noToken() && showTokenError(), attr: {title: res().clickHideWarning}">\r\n    <span data-bind="text: res().warningIllegalToken"></span>\r\n    <span data-bind="click: toggleShowToken, attr: {title: res().hideWarning}" class="pull-right glyphicon glyphicon-remove pointerCursor"></span>\r\n</div>\r\n<div class="label label-danger" data-bind="visible: noTokenForNDLayer() && showTokenError()">\r\n    <span data-bind="text: res().warningLayerUnavailable"></span>\r\n    <span data-bind="click: toggleShowToken, attr: {title: res().hideWarning}" class="pull-right glyphicon glyphicon-remove pointerCursor"></span>\r\n</div>\r\n';});


define('text!views/footerPanel.html',[],function () { return '<nav class="l-fillparent">\r\n    <div class="">\r\n        <span class="pull-left"><a href="http://www.artsdatabanken.no/omartsdatabanken" target="_blank">Om Artskardatabanken</a></span>\r\n        <span class="pull-right"><a href="http://www.artsdatabanken.no" target="_blank">Artsdatabanken - © 2017</a></span>\r\n    </div>\r\n</nav>\r\n';});


define('text!views/gallery.html',[],function () { return '<p data-bind="visible: loadingPictures, text: res().loadingGalleryStatus" class="help-block">\r\n    <span class="glyphicon glyphicon-hourglass glyphicon-spin"></span>\r\n</p>\r\n<p data-bind="visible: nObservationsWithImages() && !loadingPictures()" class="help-block">\r\n    <span data-bind="text: res().galleryCountStatus1"></span><span data-bind="text: nObservationsWithImages"></span><span data-bind="text: res().galleryCountStatus2"></span>\r\n    \r\n</p>\r\n<p data-bind="visible: !nObservationsWithImages() && !loadingPictures(), text: res().galleryNothingStatus" class="help-block"></p>\r\n\r\n<div data-bind="foreach: galleryItems">\r\n    <div class="responsive">\r\n        <div class="img">\r\n            <a data-bind="click: function(data, event) { $parent.showDetails($index(), data) }">\r\n                <img data-bind="attr:{src: url, alt: scientificName, title: locality}">\r\n                <span data-bind="visible: isCopyright, attr: {title: license + \': \' + rightsHolder}" class="glyphicon glyphicon-copyright-mark copyright-gallery"></span>\r\n                <span data-bind="visible: !isCopyright, attr: {title: license + \': \' + rightsHolder}" class="glyphicon glyphicon glyphicon-info-sign copyright-gallery"></span>\r\n            </a>\r\n            <div class="desc">\r\n                <strong><span data-bind="text: popularName"></span></strong>\r\n                <i><span data-bind="text: scientificName"></span></i>\r\n                <span data-bind="text: autor"></span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class="responsive" data-bind="visible: indexTo() < nObservationsWithImages()">\r\n\r\n    <a data-bind="click: loadMore, visible: !loadingPictures()">\r\n        <div class="desc btn btn-default load-more-4" style="width: 90%">\r\n            <span data-bind="text: res().galleryLoadMore"></span>\r\n        </div>\r\n    </a>\r\n    \r\n    <div class="desc" data-bind="visible: loadingPictures">\r\n        <span data-bind="text: res().galleryLoadingMore"></span>\r\n        <span data-bind="visible: loadingPictures"\r\n              class="pull-right glyphicon glyphicon-globe glyphicon-spin"></span>\r\n    </div>\r\n\r\n\r\n</div>\r\n<div class="clearfix"></div>\r\n';});


define('text!views/galleryToolbar.html',[],function () { return '<div class="form-inline">\r\n    <!--<button title="Veksle fullskjermsvisning" type="button" data-bind="click: toggleFullscreen" class="btn btn-default form-control glyph-button glyphicon glyphicon-fullscreen hidden-xs"></button>-->\r\n\r\n    <a class="btn btn-default icon-info-sm" data-bind="attr: {href: res().licenseInfoUrl, target: \'_new\', title: res().licenseInfoTitle, type: \'button\'}"></a>\r\n\r\n    <div class="hidden-xs form-group bookmarks" data-bind="css: { \'open panel panel-default\': openBookmarks()}">\r\n        <div data-bind="css: { \'panel-body\': openBookmarks}, visible: bookmarks().length">\r\n            <button class="btn btn-link btn-xs pull-right glyphicon glyphicon-remove"\r\n                    data-bind="click: toggleBookmarksContainer,\r\n                    css: { \'glyphicon-folder-open\' : !openBookmarks() },\r\n                    visible: (bookmarks().length>\r\n                5 || openBookmarks())">\r\n            </button>\r\n            <div class="b-container pull-left" data-bind="foreach: tiledBookmarks()">\r\n                <div class="b-row" data-bind="foreach: $data">\r\n                    <div class="form-control bookmark"\r\n                         title="Sett utvalg basert på dette bokmerket"\r\n                         data-bind="click: $parents[1].applyFilter, style: {\'width\': \'48px\', \'height\': \'34px\', \'background-image\': \'url(\' + image + \')\'}">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n\r\n    <!--<a type="button" data-bind="attr: {href: res().aboutUrl, target: \'_new\', title: res().about}" class="btn info-button"></a>-->\r\n    <div data-bind="compose:\'viewmodels/languageBar\'"></div>\r\n    <!-- <button type="button" data-bind="click: resource.chooseNynorsk, attr: {title: res().norwegian_no}" class="btn lang-nn"></button>\r\n     <button type="button" data-bind="click: resource.chooseNorwegian, attr: {title: res().norwegian}" class="btn lang-no"></button>\r\n     <button type="button" data-bind="click: resource.chooseEnglish, attr: {title: res().english}" class="btn lang-en"></button> -->\r\n\r\n</div>\r\n';});


define('text!views/headerPanel.html',[],function () { return '<div class="l-fillparent container-fluid" style="background-color: #4c4a48"></div>\r\n';});


define('text!views/languageBar.html',[],function () { return '<!-- <a data-bind="click: showAbout, attr: {title: res().about, type: \'button\'}" class="btn info-button icon-info-xs"></a> -->\r\n<div id="languageChoice" class="active">\r\n    <a href="#" class="btn dropdown-toggle languageChoice" data-bind="attr: {title: res().languageChoiceTitle}, event: {click: toggleLanguageVisible}" data-toggle="dropdown" role="button" aria-expanded="true">\r\n    </a>\r\n    <ul class="dropdown-menu-lang" data-bind="event: {mouseover: openDropdown, mouseout: closeDropdown}">\r\n        <li id="bokmal" class="" data-bind="click: chooseNorwegian, css: { active: (language() == \'nb-NO\') }">\r\n            <a class="btn icon-btn" data-bind="event: {click: closeDropdown}">\r\n                <span>Bokmål</span>\r\n            </a>\r\n        </li>\r\n        <li id="nynorsk" class="" data-bind="click: chooseNynorsk, css: { active: (language() == \'nn-NO\') }">\r\n            <a class="btn icon-btn" data-bind="event: {click: closeDropdown}">\r\n                <span>Nynorsk</span>\r\n            </a>\r\n        </li>\r\n        <li id="engelsk" class="" data-bind="click: chooseEnglish, css: { active: (language() == \'EN\') }">\r\n            <a class="btn icon-btn"data-bind="event: {click: closeDropdown}">\r\n                <span>English</span>\r\n            </a>\r\n        </li>\r\n    </ul>\r\n</div>';});


define('text!views/leftPanel.html',[],function () { return '<div class="l-fillparent">\r\n    <div class="l-paneltoolbar">        \r\n             \r\n        <h3 style="margin-top: 10px; margin-left: 20px; background-color: white">\r\n            <a class="artsdatabank-logo" data-bind="attr: { href: res().mainUrl }" alt="Artsdatabanken-logo"></a>\r\n            <span style="bottom: 95%; position: absolute; width: 100px; left: 100px; margin: 12px;" data-bind="text: res().mainTitle"></span>\r\n            <a class="gbif-logo" href="https://www.gbif.no/" alt="GBIF-logo"></a>\r\n        </h3>\r\n    </div>\r\n    <div class="l-sidebarcontent l-vscroll l-fullwidth">\r\n        <div class="container-fluid">\r\n            <div class="form-group"></div>\r\n            <div class="tab-content">\r\n                <div class="tab-pane" id="aboutTab">\r\n                    <div id="siteInfo" data-bind="compose: \'viewmodels/siteInfo\'"></div>\r\n                </div>\r\n                <div class="tab-pane active" id="searchTab">\r\n                    <div data-bind="compose: \'viewmodels/treeview\'"></div>\r\n                </div>\r\n                <div class="tab-pane" id="observationDetailsTab">\r\n                    <div id="featureInfo" data-bind="compose: \'viewmodels/featureInfo\'"></div>\r\n                </div>\r\n                <div class="tab-pane" id="legendTab">\r\n                    <div data-bind="compose: \'viewmodels/legend\'"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class="l-panelfooter">\r\n        <div class="tabbable tabs-below">\r\n            <ul class="nav nav-tabs menu-nav-tabs">\r\n                <li><a href="#aboutTab" data-toggle="tab"><strong><span data-bind="text: res().tabAboutTitle"></span></strong>\r\n                        <span data-bind="text: notifications, visible: notifications()>0, attr: {title: res().notificationsTooltip + notifications()}" class="badge" style="background-color: #DD0000; margin: 1px;"></span>\r\n                    </a>\r\n                </li>\r\n                <li><a href="#searchTab" data-toggle="tab"><strong>\r\n                    <span data-bind="text: res().tabSearchTitle"></span>\r\n                </strong></a></li>\r\n                <li><a href="#observationDetailsTab" data-toggle="tab"><strong>\r\n                    <span data-bind="text: res().tabDetailsTitle"></span>\r\n                </strong></a></li>\r\n                <li><a href="#legendTab" data-toggle="tab"><strong>\r\n                    <span data-bind="text: res().tabSymbolsTitle"></span>\r\n                </strong></a></li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n';});


define('text!views/legend.html',[],function () { return '<br />\r\n<div class="btn-group" data-toggle="buttons">\r\n    <label data-bind="click: useCategoryLegend" class="btn btn-default active">\r\n        <input type="radio" name="legendoptions" id="optcategory" autocomplete="off" checked>\r\n        <span data-bind="text: res().showCategoryLegend"></span>\r\n    </label>\r\n    <label data-bind="click: useSpeciesLegend" class="btn btn-default">\r\n        <input type="radio" name="legendoptions" id="optspecies" autocomplete="off">\r\n        <span data-bind="text: res().showSpeciesLegend"></span>\r\n    </label>\r\n    <label data-bind="click: usePrecisionLegend" class="btn btn-default">\r\n        <input type="radio" name="legendoptions" id="optprecision" autocomplete="off">\r\n        <span data-bind="text: res().showPrecisionLegend"></span>\r\n    </label>\r\n</div>\r\n<br>\r\n<br>\r\n\r\n<div data-bind="visible: precisionLegendVisible">\r\n    <h4 data-bind="text: res().legendPrecisionHeader"></h4>\r\n    <div data-bind="foreach: precisionLegend">\r\n        <svg width="30" height="30">\r\n            <circle cx="15" cy="15" r="15" data-bind="attr: {fill: color}" dy=".3em" />\r\n        </svg>\r\n        <span class="legend-title" data-bind="text: name + \' m\'"></span>\r\n        <br>\r\n    </div>\r\n    <br><br>\r\n    <small data-bind="text: res().legendPrecisionHelpText1"></small>\r\n    <br><br>\r\n    <small data-bind="text: res().legendPrecisionHelpText2"></small>\r\n</div>\r\n\r\n\r\n<div data-bind="visible: speciesLegendVisible">\r\n    <h4 data-bind="text: res().legendSpeciesHeader"></h4>\r\n    <div data-bind="foreach: taxonLegend">\r\n        <svg width="30" height="30">\r\n            <circle cx="15" cy="15" r="15" data-bind="attr: {fill: color}" dy=".3em" />\r\n        </svg>\r\n        <span class="legend-toptitle" data-bind="text: name"></span><br/>\r\n        <span class="legend-subtitle" data-bind="text: popularName"></span><br>\r\n    </div>\r\n    <br><br>\r\n    <small data-bind="text: res().legendSpeciesHelpText1"></small>\r\n    <br><br>\r\n    <small data-bind="text: res().legendSpeciesHelpText2"></small>\r\n</div>\r\n\r\n<div data-bind="visible: categoryLegendVisible">\r\n    <h4 data-bind="text: res().legendRedlistHeader"></h4>\r\n    <svg width="30" height="30">\r\n        <circle cx="15" cy="15" r="15" fill="rgba(90, 91, 93, 1)" dy=".3em" />\r\n        <text x="50%" y="50%" text-anchor="middle" stroke="#ffffff" dy=".3em" font-size="12">RE</text>\r\n    </svg>\r\n    <span class="legend-title" data-bind="text: res().reLegendTitle"></span>\r\n    <br>\r\n    <svg width="30" height="30">\r\n        <circle cx="15" cy="15" r="15" fill="rgba(153, 25, 26, 1)" />\r\n        <text x="50%" y="50%" text-anchor="middle" stroke="#ffffff" dy=".3em" font-size="12">CR</text>\r\n    </svg>\r\n    <span class="legend-title" data-bind="text: res().crLegendTitle"></span>\r\n    <br>\r\n    <svg width="30" height="30">\r\n        <circle cx="15" cy="15" r="15" fill="rgba(216, 15, 39, 1)" />\r\n        <text x="50%" y="50%" text-anchor="middle" stroke="#ffffff" dy=".3em" font-size="12">EN</text>\r\n    </svg>\r\n    <span class="legend-title" data-bind="text: res().enLegendTitle"></span>\r\n    <br>\r\n    <svg width="30" height="30">\r\n        <circle cx="15" cy="15" r="15" fill="rgba(233, 79, 51, 1)" />\r\n        <text x="50%" y="50%" text-anchor="middle" stroke="#ffffff" dy=".3em" font-size="12">VU</text>\r\n    </svg>\r\n    <span class="legend-title" data-bind="text: res().vuLegendTitle"></span>\r\n    <br>\r\n    <svg width="30" height="30">\r\n        <circle cx="15" cy="15" r="15" fill="rgba(237, 108, 38, 1)" />\r\n        <text x="50%" y="50%" text-anchor="middle" stroke="#ffffff" dy=".3em" font-size="12">NT</text>\r\n    </svg>\r\n    <span class="legend-title" data-bind="text: res().ntLegendTitle"></span>\r\n    <br>\r\n    <svg width="30" height="30">\r\n        <circle cx="15" cy="15" r="15" fill="rgba(247, 165, 32, 1)" />\r\n        <text x="50%" y="50%" text-anchor="middle" stroke="#ffffff" dy=".3em" font-size="12">DD</text>\r\n    </svg>\r\n    <span class="legend-title" data-bind="text: res().ddLegendTitle"></span>\r\n    <br>\r\n    <svg width="30" height="30">\r\n        <circle cx="15" cy="15" r="15" fill="rgba(96, 190, 178, 1)" />\r\n        <text x="50%" y="50%" text-anchor="middle" stroke="#ffffff" dy=".3em" font-size="12">LC</text>\r\n    </svg>\r\n    <span class="legend-title" data-bind="text: res().lcLegendTitle"></span>\r\n    <br>\r\n    <svg width="30" height="30">\r\n        <circle cx="15" cy="15" r="15" fill="rgba(147, 149, 152, 1)" />\r\n        <text x="50%" y="50%" text-anchor="middle" stroke="#ffffff" dy=".3em" font-size="12">NA</text>\r\n    </svg>\r\n    <span class="legend-title" data-bind="text: res().naLegendTitle"></span>\r\n    <br>\r\n    <svg width="30" height="30">\r\n        <circle cx="15" cy="15" r="15" fill="rgba(209, 211, 212, 1)" />\r\n        <text x="50%" y="50%" text-anchor="middle" stroke="#000000" dy=".3em" font-size="12">NE</text>\r\n    </svg>\r\n    <span class="legend-title" data-bind="text: res().neLegendTitle"></span>\r\n    <br>\r\n    <br>\r\n    <h4 data-bind="text: res().legendAlienSpeciesHeader"></h4>\r\n    <svg width="30" height="30">\r\n        <circle cx="15" cy="15" r="15" fill="rgba(94, 48, 99, 1)" />\r\n        <text x="50%" y="50%" text-anchor="middle" stroke="#ffffff" dy=".3em" font-size="12">SE</text>\r\n    </svg>\r\n    <span class="legend-title" data-bind="text: res().seLegendTitle"></span>\r\n    <br>\r\n    <svg width="30" height="30">\r\n        <circle cx="15" cy="15" r="15" fill="rgba(27, 56, 111, 1)" />\r\n        <text x="50%" y="50%" text-anchor="middle" stroke="#ffffff" dy=".3em" font-size="12">HI</text>\r\n    </svg>\r\n    <span class="legend-title" data-bind="text: res().hiLegendTitle"></span>\r\n    <br>\r\n    <svg width="30" height="30">\r\n        <circle cx="15" cy="15" r="15" fill="rgba(24, 90, 108, 1)" />\r\n        <text x="50%" y="50%" text-anchor="middle" stroke="#ffffff" dy=".3em" font-size="12">PH</text>\r\n    </svg>\r\n    <span class="legend-title" data-bind="text: res().phLegendTitle"></span>\r\n    <br>\r\n    <svg width="30" height="30">\r\n        <circle cx="15" cy="15" r="15"  fill="rgba(94, 164, 161, 1)" />\r\n        <text x="50%" y="50%" text-anchor="middle" stroke="#ffffff" dy=".3em" font-size="12">LO</text>\r\n    </svg>\r\n    <span class="legend-title" data-bind="text: res().loLegendTitle"></span>\r\n    <br>\r\n    <svg width="30" height="30">\r\n        <circle cx="15" cy="15" r="15" fill="rgba(155, 169, 99, 1)" />\r\n        <text x="50%" y="50%" text-anchor="middle" stroke="#ffffff" dy=".3em" font-size="12">NK</text>\r\n    </svg>\r\n    <span class="legend-title" data-bind="text: res().nkLegendTitle"></span>\r\n    <br>\r\n    <svg width="30" height="30">\r\n        <circle cx="15" cy="15" r="15" stroke="#000000" fill="rgba(255, 255, 255, 1)" />\r\n        <text x="50%" y="50%" text-anchor="middle" stroke="#000000" dy=".3em" font-size="12">NR</text>\r\n    </svg>\r\n    <span class="legend-title" data-bind="text: res().nrLegendTitle"></span>\r\n    <br>\r\n\r\n    <br><br>\r\n    <small data-bind="text: res().legendHelpText1"></small>\r\n    <br><br>\r\n    <small data-bind="text: res().legendHelpText2"></small>\r\n    <br><br>\r\n    <small data-bind="text: res().legendHelpText3"></small>\r\n    <br><br>\r\n    <small data-bind="text: res().legendHelpText4"></small>\r\n    <br><br><br><br>\r\n\r\n</div>';});


define('text!views/listToolbar.html',[],function () { return '<div class="form-inline">\r\n\r\n    <div class="btn-group">\r\n        <button data-bind="enable: exportEnabled, attr:{title: exportEnabled() ? res().exportEnabledTitle : res().exportDisabledTitle + maxExportItems() + \'). \' + res().exportDisabledTitle2}"\r\n                type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\r\n            <span class="glyph-button glyphicon glyphicon-download-alt"></span>\r\n            <span data-bind="text: res().exportTitle"></span><span class="caret"></span>\r\n        </button>\r\n\r\n        <ul class="dropdown-menu">\r\n            <!--\r\n        <li title="Eksporter i GML-format"><a data-bind="click: exportGml" href="#">GML</a></li>\r\n        <li title="Eksporter i XML-format"><a data-bind="click: exportXml" href="#">XML</a></li>\r\n        <li title="Eksporter i Shape-fromat"><a data-bind="click: exportShape" href="#">Shape</a></li>\r\n    -->\r\n            <li data-bind="attr: {title: res().exportExcelTitle}"><a data-bind="click: exportExcel, text: res().exportExcelName" href="#"></a></li>\r\n            <li data-bind="attr: {title: res().exportCsvTitle}"><a data-bind="click: exportCsv, text: res().exportCsvName" href="#"></a></li>\r\n            <!--<li data-bind="attr: {title: res().exportVerbatimTitle}"><a data-bind="click: exportVerbatim, text: res().exportVerbatimName" href="#"></a></li>-->\r\n        </ul>\r\n    </div>\r\n    <span data-bind="visible: showSpinner" class="glyphicon glyphicon-refresh glyphicon-spin"></span>\r\n\r\n    <a class="btn btn-default icon-info-sm"\r\n       data-bind="attr: {href: res().exportInfoUrl, target: \'_new\', title: res().exportInfoTitle, type: \'button\'}"></a>\r\n\r\n    <!--<button title="Veksle fullskjermsvisning" type="button" data-bind="click: toggleFullscreen" class="btn btn-default form-control glyph-button glyphicon glyphicon-fullscreen hidden-xs"></button>-->\r\n\r\n    <div class="hidden-xs form-group bookmarks" data-bind="css: { \'open panel panel-default\': openBookmarks()}">\r\n        <div data-bind="css: { \'panel-body\': openBookmarks}, visible: bookmarks().length">\r\n            <button class="btn btn-link btn-xs pull-right glyphicon glyphicon-remove"\r\n                    data-bind="click: toggleBookmarksContainer,\r\n                    css: { \'glyphicon-folder-open\' : !openBookmarks() },\r\n                    visible: (bookmarks().length>\r\n                5 || openBookmarks())">\r\n            </button>\r\n            <div class="b-container pull-left" data-bind="foreach: tiledBookmarks()">\r\n                <div class="b-row" data-bind="foreach: $data">\r\n                    <div class="form-control bookmark"\r\n                         title="Sett utvalg basert på dette bokmerket"\r\n                         data-bind="click: $parents[1].applyFilter, style: {\'width\': \'48px\', \'height\': \'34px\', \'background-image\': \'url(\' + image + \')\'}">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <!--<a type="button" data-bind="attr: {href: res().aboutUrl, target: \'_new\', title: res().about}" class="btn info-button"></a>-->\r\n    <div data-bind="compose:\'viewmodels/languageBar\'"></div>\r\n    <!-- <button type="button" data-bind="click: resource.chooseNynorsk, attr: {title: res().norwegian_no}" class="btn lang-nn"></button>\r\n     <button type="button" data-bind="click: resource.chooseNorwegian, attr: {title: res().norwegian}" class="btn lang-no"></button>\r\n     <button type="button" data-bind="click: resource.chooseEnglish, attr: {title: res().english}" class="btn lang-en"></button> -->\r\n\r\n\r\n</div>\r\n';});


define('text!views/listView.html',[],function () { return '\r\n<div class="panel-group">\r\n    \r\n    <div class="panel panel-default">\r\n\r\n        <p>\r\n            <div data-bind="compose: { view: \'pager\' }"></div>\r\n        </p>\r\n\r\n\r\n        <div class="panel-heading">\r\n\r\n            <p class="help-block" style="display: inline; margin-right: 5px;" data-bind="text: addSeparator(totalListItems()) + res().listCountStatus"></p>\r\n            <span data-bind="visible: updating() || loadingmore()" class="glyphicon glyphicon-refresh glyphicon-spin"></span>\r\n\r\n        </div>\r\n        \r\n        <div class="panel-body">\r\n            <div class="container-fluid">\r\n                <div class="row-fluid">\r\n                    <div class="table-responsive">\r\n                        <table class="naturelist table table-bordered table-striped">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th data-bind="text:res().columnDetails"></th>\r\n                                    <th data-bind="text:res().columnInstitution"></th>\r\n                                    <th data-bind="text:res().columnCollection" class="hidden-xs hidden-sm hidden-md"></th>\r\n                                    <th data-bind="text:res().categoryCollection" class="hidden-xs hidden-sm hidden-md"></th>\r\n                                    <th data-bind="text:res().columnScientificName"></th>\r\n                                    <th data-bind="text:res().columnScientificNameAuthor"></th>\r\n                                    <th data-bind="text:res().columnPopularName"></th>\r\n                                    <th data-bind="text:res().columnTaxonGroup" class="hidden-xs hidden-sm hidden-md"></th>\r\n                                    <th data-bind="text:res().columnCollector"></th>\r\n                                    <th data-bind="text:res().columnCollected"></th>\r\n                                    <th data-bind="text:res().columnLocality"></th>\r\n                                    <th data-bind="text:res().columnPresicion"></th>\r\n                                    <th data-bind="text:res().columnMunicipality" class="hidden-xs hidden-sm hidden-md"></th>\r\n                                    <th data-bind="text:res().columnCounty" class="hidden-xs hidden-sm hidden-md"></th>\r\n                                    <th data-bind="text:res().columnCount" class="hidden-xs hidden-sm hidden-md"></th>\r\n                                    <th data-bind="text:res().columnBasisOfRecord" class="hidden-xs hidden-sm hidden-md"></th>\r\n                                    <th data-bind="text:res().columnBehavior" class="hidden-xs hidden-sm hidden-md"></th>\r\n                                    <th data-bind="text:res().columnIdentifiedBy" class="hidden-xs hidden-sm hidden-md"></th>\r\n                                    <th data-bind="text:res().columnVerified" class="hidden-xs hidden-sm hidden-md"></th>\r\n                                    <!--\r\n                                                    <th data-bind="click: sortListColumn.bind($data, \'NatureLevelDescription\')" class="pointerCursor" >Naturnivå</th>\r\n                                                    <th data-bind="click: deepSortListColumn.bind($data, \'Parameters\', \'MainTypeDescription\')" class="pointerCursor" >Naturområdetype - Hovedtypegruppe</th>\r\n                                                    <th data-bind="click: deepSortListColumn.bind($data, \'Parameters\', \'CodeDescription\')" class="pointerCursor">Naturområdetype</th>\r\n                                                    <th data-bind="click: deepSortListColumn.bind($data, \'Parameters\', \'Share\')" class="pointerCursor">Andel</th>\r\n                                                    <th data-bind="click: sortListColumn.bind($data, \'SurveyScale\')" class="pointerCursor">Målestokk</th>\r\n                                                    <th data-bind="click: deepSortListColumn.bind($data, \'natureAreaDescriptionVariables\', \'codeAndValue\')" class="pointerCursor">Beskrivelsesvariabler</th>\r\n                                                    <th data-bind="click: sortListColumn.bind($data, \'SurveyedYear\')" class="pointerCursor">Kartlagt år</th>\r\n                                                    <th data-bind="click: sortListColumn.bind($data, \'Contractor\')" class="pointerCursor">Oppdragsgiver</th>\r\n                                                    <th data-bind="click: sortListColumn.bind($data, \'Surveyer\')" class="pointerCursor">Kartlegger</th>\r\n                                                    <th data-bind="click: sortListColumn.bind($data, \'Program\')" class="pointerCursor">Program</th>\r\n                -->\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody data-bind="foreach: itemList">\r\n                                <tr>\r\n                                    <td style="text-align: center; vertical-align: middle;"><a data-bind="click: function(data, event) { $parent.showDetails($index(), data, event, \'left\') }"><img class="icon-info-xs" /></a></td>\r\n                                    <td><span data-bind="text: institutionName"></span></td>\r\n                                    <td class="hidden-xs hidden-sm hidden-md"><span data-bind="text: collectionName"></span></td>\r\n                                    <td class="hidden-xs hidden-sm hidden-md"><span data-bind="text: status"></span></td>\r\n                                    <td><span data-bind="text: scientificName"></span></td>\r\n                                    <td><span data-bind="text: scientificNameAuthor"></span></td>\r\n                                    <td><span data-bind="text: popularName"></span></td>\r\n                                    <td class="hidden-xs hidden-sm hidden-md"><span data-bind="text: taxonGroupName"></span></td>\r\n                                    <td><span class="date" data-bind="text: collector"></span></td>\r\n                                    <td><span class="date" data-bind="text: collected"></span></td>\r\n                                    <td><span data-bind="text: locality"></span></td>\r\n                                    <td><span class="pull-right" data-bind="text: coordinatePrecision > 0 ? coordinatePrecision + \' m\' : $parent.res().unknown"></span></td>\r\n                                    <td class="hidden-xs hidden-sm hidden-md"><span data-bind="text: municipality"></span></td>\r\n                                    <td class="hidden-xs hidden-sm hidden-md"><span data-bind="text: county"></span></td>\r\n                                    <td class="hidden-xs hidden-sm hidden-md"><span class="pull-right" data-bind="text: individualCount"></span></td>\r\n                                    <td class="hidden-xs hidden-sm hidden-md"><span data-bind="text: basisOfRecord"></span></td>\r\n                                    <td class="hidden-xs hidden-sm hidden-md"><span data-bind="text: behavior"></span></td>\r\n                                    <td class="hidden-xs hidden-sm hidden-md"><span data-bind="text: identifiedBy"></span></td>\r\n                                    <td class="hidden-xs hidden-sm hidden-md"><span data-bind="text: verified"></span></td>\r\n\r\n                                </tr>\r\n                            </tbody>\r\n                            <tfoot>\r\n                                <tr class="hidden-xs hidden-sm hidden-md">\r\n                                    <td colspan="19">\r\n                                        <span data-bind="text: res().listPageStatusText1"></span>\r\n                                        <span data-bind="text: pagePositionText"></span>\r\n                                        <span data-bind="text: res().listPageStatusText2"></span>\r\n                                        <span data-bind="text: addSeparator(totalListItems())"></span>\r\n                                        <span data-bind="text: res().listPageStatusText3"></span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr class="hidden-lg">\r\n                                    <td colspan="10">\r\n                                        <span data-bind="text: res().listPageStatusText1"></span>\r\n                                        <span data-bind="text: pagePositionText"></span>\r\n                                        <span data-bind="text: res().listPageStatusText2"></span>\r\n                                        <span data-bind="text: addSeparator(totalListItems())"></span>\r\n                                        <span data-bind="text: res().listPageStatusText3"></span>\r\n                                    </td>\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n';});


define('text!views/mainPanel.html',[],function () { return '<div class="l-fillparent">\r\n    <!-- Modal -->\r\n    <div class="modal fade" id="bookmarkModal" role="dialog">\r\n        <div class="modal-dialog">\r\n\r\n            <!-- Modal content-->\r\n            <div class="modal-content">\r\n                <div class="modal-header">\r\n                    <button type="button" class="close" data-dismiss="modal">&times;</button>\r\n                    <h4 class="modal-title" data-bind="text: res().copyLinkHelpTextWin"></h4>\r\n                </div>\r\n                <div class="modal-body">\r\n                    <input type="text" size="70" data-bind="attr: {value: lastLink}" onClick="this.select();" />\r\n                </div>\r\n                <div class="modal-footer">\r\n                    <button type="button" class="btn btn-default" data-dismiss="modal" data-bind="text: res().closeButtonTitle"></button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <nav class="menubar menubar-default  menubar-static-top" role="navigation">\r\n        \r\n        <div class="toggle-full-bar" \r\n             data-bind="click: toggleleftmenu, attr: {title: res().toggleLeftMenuButtonTitle}" >\r\n            <span id="toggleLeftMenuButton" data-bind="attr: {title: res().toggleLeftMenuButtonTitle}"\r\n                    class="pull-left glyphicon glyphicon-menu-left small-screen-only "\r\n                    style="padding: 0; height: 36px; margin-right: 5px; position: absolute"></span>\r\n        </div>\r\n        <div class="dropdown pull-left mainSelectButton" data-bind="attr: {title: res().mainDropdownTitle}">\r\n            <a href="#" class="btn btn-default icon-btn dropdown-toggle" data-toggle="dropdown" data-bind="event: {click: toggleLanguageVisible}" role="button" aria-expanded="false">\r\n                <div data-bind="attr: { \'class\': (\'icon-\' + activeNavTab().classname + \'-sm btn-icon\') }"></div>\r\n                <span class="btn-icon-label" data-bind="text: res()[activeNavTab().name]"></span><span class="caret"></span>\r\n            </a>\r\n            <ul class="dropdown-menu dropdown-menu-left" data-bind="event: {click: closeDropdown, mouseover: openDropdown, mouseout: closeDropdown}, foreach: navTabs">\r\n                <li data-bind="click: $parent.gotoTab, visible: visible, css: { active: (id == $parent.activeView()) }, attr: {title: $parent.res()[title]}">\r\n                    <a class="btn icon-btn" style="text-align: left">\r\n                        <div data-bind="attr: { \'class\': (\'icon-\' + classname + \'-sm btn-icon\')}"></div><span data-bind="text: $parent.res()[name]"></span></a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        <div class="menubar-left menubar-air">&nbsp;&nbsp;&nbsp;</div>\r\n        <div data-bind="compose: toolbar"></div>\r\n        <div data-bind="compose:\'viewmodels/languageBar\'"></div>\r\n\r\n    </nav>\r\n    <div id="mainview" class="l-panelcontent">\r\n        <div data-bind="router: { transition: \'entrance\', cacheViews: true }"></div>\r\n    </div>\r\n\r\n</div>\r\n';});


define('text!views/mapOl3.html',[],function () { return '<div class="l-fillparent">\r\n    <div data-bind="visible: isLoading">\r\n        <span class="ventehjul"></span>\r\n    </div>\r\n\r\n    <div id="map"></div>\r\n\r\n</div>\r\n';});


define('text!views/mapToolbar.html',[],function () { return '<div class="form-inline" style="max-height: 38px">\r\n\r\n    <div class="form-group map-geosearch" data-bind="attr: {title: res().locationHint}">\r\n        <div class="input-group col-xs-12">\r\n            <input type="text" class="form-control"\r\n                   data-bind="attr: { placeholder: res().zoomToLocationWatermark }, jqAuto: { autoFocus: true }, jqAutoSource: locations, jqAutoQuery: getPositions, jqAutoValue: selectedLocation, jqAutoSourceLabel: \'displayName\', jqAutoSourceInputValue: \'displayName\'" />\r\n            <!--<span class="input-group-addon" style="padding: 0">\r\n                <button title="Gå til din posisjon eller valgte posisjon" type="button" class="btn zoomToLocationIcon" data-bind="click: zoomToCurrentLocation"></button>\r\n            </span>-->\r\n        </div>\r\n    </div>\r\n    <div class="ol-control" data-bind="visible: isSecure()">\r\n        <button id="zoomToCurrentLocation" class="btn-info glyphicon glyphicon-screenshot go-to-position-button"\r\n                data-bind="click: zoomToMyLocation, attr: {title: res().zoomToCurrentLocationTooltip}"></button>\r\n    </div>\r\n\r\n    <button id="drawpolygon" class="btn btn-default icon-polygon-sm"\r\n            data-bind="click: togglePolygon, attr: {title: res().drawPolygonTooltip}"></button>\r\n\r\n    <div id="basisLayerSelect" class="btn btn-default icon-baselayers-sm" data-bind="attr: {title: res().backgroundLayersTooltip}, event: {click: toggleBaseLayers}">\r\n        <ul class="dropdown-menu base-layers" data-bind="event: {click: toggleBaseLayers}">\r\n            <li id="greyMap" data-bind="attr: {title: res().greyMap}, event: {click: function() {changeBaseLayer(\'greyMap\')}}">\r\n                <label>\r\n                    <a class="btn icon-btn">\r\n                        <img src="content/images/layers/GreyMap.png">\r\n                        <span data-bind="text:res().greyMap"></span>\r\n                    </a>\r\n                </label>\r\n            </li>\r\n            <li id="openStreetMap" data-bind="attr: {title: res().openStreetMap}, event: {click: function() {changeBaseLayer(\'openStreetMap\')}}">\r\n                <label>\r\n                    <a class="btn icon-btn">\r\n                        <img src="content/images/layers/openStreetMap.png">\r\n                        <span data-bind="text:res().openStreetMap"></span>\r\n                    </a>\r\n                </label>\r\n            </li>\r\n            <li id="nibwmts" data-bind="attr: {title: res().nibwmts}, event: {click: function() {changeBaseLayer(\'nibwmts\')}}">\r\n                <label>\r\n                    <a class="btn icon-btn">\r\n                        <img src="content/images/layers/nibwmts.png">\r\n                        <span data-bind="text:res().nibwmts"></span>\r\n                    </a>\r\n                </label>\r\n            </li>\r\n            <li id="terreng" data-bind="attr: {title: res().terreng}, event: {click: function() {changeBaseLayer(\'terreng\')}}">\r\n                <label>\r\n                    <a class="btn icon-btn">\r\n                        <img src="content/images/layers/terreng.png">\r\n                        <span data-bind="text:res().terreng"></span>\r\n                    </a>\r\n                </label>\r\n            </li>\r\n            <li id="sjokart" data-bind="attr: {title: res().sjokart}, event: {click: function() {changeBaseLayer(\'sjokart\')}}">\r\n                <label>\r\n                    <a class="btn icon-btn">\r\n                        <img src="content/images/layers/sjokart.png">\r\n                        <span data-bind="text:res().sjokart"></span>\r\n                    </a>\r\n                </label>\r\n            </li>\r\n            <li id="topo2" data-bind="attr: {title: res().topo2}, event: {click: function() {changeBaseLayer(\'topo2\')}}">\r\n                <label>\r\n                    <a class="btn icon-btn">\r\n                        <img src="content/images/layers/topo2.png">\r\n                        <span data-bind="text:res().topo2"></span>\r\n                    </a>\r\n                </label>\r\n            </li>\r\n            <li id="svalbard" data-bind="attr: {title: res().svalbard}, event: {click: function() {changeBaseLayer(\'svalbard\')}}">\r\n                <label>\r\n                    <a class="btn icon-btn">\r\n                        <img src="content/images/layers/svalbard.png">\r\n                        <span data-bind="text:res().svalbard"></span>\r\n                    </a>\r\n                </label>\r\n            </li>\r\n            <li id="janMayen" data-bind="attr: {title: res().janMayen}, event: {click: function() {changeBaseLayer(\'janMayen\')}}">\r\n                <label>\r\n                    <a class="btn icon-btn">\r\n                        <img src="content/images/layers/janMayen.png">\r\n                        <span data-bind="text:res().janMayen"></span>\r\n                    </a>\r\n                </label>\r\n            </li>\r\n            <li id="road" data-bind="attr: {title: res().road}, event: {click: function() {changeBaseLayer(\'road\')}}">\r\n                <label>\r\n                    <a class="btn icon-btn">\r\n                        <img src="content/images/layers/road.png">\r\n                        <span data-bind="text:res().road"></span>\r\n                    </a>\r\n                </label>\r\n            </li>\r\n            <li id="aerialWithLabels" data-bind="attr: {title: res().aerialWithLabels}, event: {click: function() {changeBaseLayer(\'aerialWithLabels\')}}">\r\n                <label>\r\n                    <a class="btn icon-btn">\r\n                        <img src="content/images/layers/aerialWithLabels.png">\r\n                        <span data-bind="text:res().aerialWithLabels"></span>\r\n                    </a>\r\n                </label>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n\r\n\r\n    <div id="overlayMulti" class="btn btn-default icon-picture-sm"\r\n         data-bind="attr: {title: res().showMapLayersPlaceholder}, event: {click: toggleOverlayLayers}">\r\n        <ul class="dropdown-menu overlay-layers" data-bind="event: {click: toggleOverlayLayers}">\r\n            <li id="admGrenser" data-bind="attr: {title: res().admGrenser}, event: {click: function() {switchOverlayLayer(\'admGrenser\')}}">\r\n                <a href="#" data-bind="text:res().admGrenser"></a>\r\n            </li>\r\n            <li id="vern" data-bind="attr: {title: res().vern}, event: {click: function() {switchOverlayLayer(\'vern\')}}">\r\n                <a href="#" data-bind="text:res().vern"></a>\r\n            </li>\r\n            <li id="bioseksjoner" data-bind="attr: {title: res().bioseksjoner}, event: {click: function() {switchOverlayLayer(\'bioseksjoner\')}}">\r\n                <a href="#" data-bind="text:res().bioseksjoner"></a>\r\n            </li>\r\n            <li id="biosoner" data-bind="attr: {title: res().biosoner}, event: {click: function() {switchOverlayLayer(\'biosoner\')}}">\r\n                <a href="#" data-bind="text:res().biosoner"></a>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <!-- <select class="" id="basisLayerSelect"\r\n                 data-bind="options: baseLayerList,\r\n                        optionsText: \'description\',\r\n                        optionsValue: \'name\',\r\n                        value: currentBaseLayer,\r\n                        attr: {title: res().backgroundLayersTooltip,\r\n                               \'data-placeholder\': res().backgroundLayersTooltip }"></select>\r\n\r\n    <select class="" data-bind="attr:{\'data-placeholder\': res().showMapLayersPlaceholder}, foreach: overlayLayerList"\r\n            id="overlayMulti" multiple="multiple">\r\n        <option data-bind="text: $parents[0].res()[name], attr: {value: name}"></option>\r\n    </select>-->\r\n    <!--res().showMapLayersPlaceholder-->\r\n    <!--<button title="Veksle fullskjermsvisning" type="button" data-bind="click: toggleFullscreen"\r\n                class="btn btn-default form-control glyph-button glyphicon glyphicon-fullscreen hidden-xs"></button>-->\r\n    <!--<button title="Veksle 3d-visning" type="button" data-bind="click: toggle3d"\r\n                class="btn btn-default form-control glyph-button glyphicon glyphicon-sunglasses hidden-xs"></button>-->\r\n    <!--<button title="Vis tegnforklaring" type="button" data-bind="click: showLegend"\r\n                class="btn btn-default form-control glyph-button glyphicon glyphicon-list-alt hidden-xs"></button>-->\r\n    <!-- Knappen som har samme funksjonen som "Symboler" i artstreet <button type="button" data-bind="click: showLegend, attr: {title: res().showLegendTitle}"\r\n            class="btn btn-default icon-point-sm"></button>-->\r\n    <!--<button type="button" data-bind="click: createLink, attr: {title: res().shareLinkTitle}"\r\n            class="btn btn-default icon-link-sm" data-toggle="modal" data-target="#bookmarkModal"></button>-->\r\n\r\n    <button type="button" data-bind="click: createBookmark, attr: {title: res().createBookmarkTitle}"\r\n            class="btn btn-default icon-bookmark-sm hidden-xs"></button>\r\n\r\n\r\n    <div class="form-group bookmarks hidden-xs" data-bind="css: { \'open panel panel-default\': openBookmarks()}">\r\n        <div data-bind="css: { \'panel-body\': openBookmarks}, visible: bookmarks().length">\r\n            <button class="btn btn-link btn-xs pull-right glyphicon"\r\n                    data-bind="click: toggleBookmarksContainer,\r\n                    css: { \'glyphicon-folder-open\' : !openBookmarks(), \'glyphicon-remove\' : openBookmarks() },\r\n                    visible: (bookmarks().length>\r\n                5 || openBookmarks())">\r\n            </button>\r\n\r\n\r\n            <div class="b-container pull-left" data-bind="foreach: tiledBookmarks()">\r\n                <div class="b-row" data-bind="foreach: $data">\r\n                    <div class="form-control bookmark" data-bind="click: $parents[1].applyFilter,\r\n                         event: {\r\n                            mouseover: $parents[1].enableRemoveBookmark,\r\n                            mouseout: $parents[1].disableRemoveBookmark },\r\n                         style: {\'background-image\': \'urL(\' + image + \')\'},\r\n                         attr: {title: $parents[1].res().openBookmarkTitle }">\r\n                        &nbsp;\r\n                        <span data-bind="click: $parents[1].removeBookmark, attr: {title: $parents[1].res().removeBookmarkTitle }"\r\n                              class="glyphicon glyphicon-remove-sign remove-bookmark"></span>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n    <!--<a type="button" data-bind="attr: {href: res().aboutUrl, target: \'_new\', title: res().about}" class="btn info-button"></a>-->\r\n    <div data-bind="compose:\'viewmodels/languageBar\'"></div>\r\n\r\n\r\n\r\n</div>\r\n';});


define('text!views/nav.html',[],function () { return '<nav class="navbar navbar-fixed-top">\r\n    <div class="navbar-inner">\r\n        <a class="brand" href="/">\r\n            <span class="title">Artskart2.0</span>\r\n        </a>\r\n        <div class="btn-group" data-bind="foreach: router.navigationModel">\r\n            <a data-bind="css: { active: isActive }, attr: { href: hash }, text: title"\r\n                class="btn btn-info" href="#"></a>\r\n        </div>\r\n        <div class="loader pull-right" data-bind="css: { active: router.isNavigating }">\r\n            <div class="progress progress-striped active page-progress-bar">\r\n                <div class="bar" style="width: 100px;"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</nav>\r\n';});


define('text!views/pager.html',[],function () { return '<div class="pull-right" data-bind="visible: availablePageIndexes().length > 1">\r\n    <button class="btn btn-mini-padding btn-default glyphicon glyphicon-fast-backward" \r\n            data-bind="click: firstPage, visible: currentPage() != 0, attr: {title: res().showFirstPageTitle}"></button>\r\n    <button class="btn btn-mini-padding btn-default glyphicon glyphicon-backward" \r\n            data-bind="click: fastBackward, visible: currentPage() != 0, attr: {title: res().fastBackwardsTitle}"></button>\r\n    <button class="btn btn-mini-padding btn-default glyphicon glyphicon-chevron-left" \r\n            data-bind="click: previousPage, visible: currentPage() != 0, attr: {title: res().showPreviousPageTitle}"></button>\r\n    <ul class="pagerList" data-bind="foreach: availablePageIndexes">\r\n        <li style="display: inline-block">\r\n            <button class="btn btn-mini-padding btn-default" \r\n                    data-bind="text: $parent.addSeparator($data + 1), click: $parent.goToPage, css: { active: $data == $parent.currentPage() }, \r\n                    attr: {title: $parent.res().showPageTitle + ($data + 1)}"></button>\r\n        </li>\r\n    </ul>\r\n    <button class="btn btn-mini-padding btn-default glyphicon glyphicon-chevron-right" \r\n            data-bind="click: nextPage, visible: currentPage() != lastPageIndex(), attr: {title: res().showNextPageTitle}"></button>\r\n    <button class="btn btn-mini-padding btn-default glyphicon glyphicon-forward" \r\n            data-bind="click: fastForward, visible: currentPage() != lastPageIndex(), attr: {title: res().fastForwardsTitle}"></button>\r\n    <button class="btn btn-mini-padding btn-default glyphicon glyphicon-fast-forward" \r\n            data-bind="click: lastPage, visible: currentPage() != lastPageIndex(), attr: {title: res().showLastPageTitle}"></button>\r\n</div>\r\n';});


define('text!views/shell.html',[],function () { return '<div id="viewport">\r\n    <div id="header" data-bind="compose: \'viewmodels/headerPanel\'">&nbsp;</div>\r\n    <div id="contentWrapper" class="content">\r\n        <div id="content">\r\n            <div id="leftpanel" data-bind="compose: \'viewmodels/leftPanel\'">&nbsp;</div>\r\n            <div id="main" data-bind="compose: \'viewmodels/mainPanel\'"></div>\r\n            <footer data-bind="compose: \'viewmodels/footer\'"></footer>\r\n        </div>\r\n        <!--<div id="footer">&nbsp;</div>-->\r\n    </div>\r\n</div>\r\n';});


define('text!views/siteInfo.html',[],function () { return '<br />\r\n<h2 data-bind="text: res().welcomeHeader"></h2>\r\n<p>\r\n    <span data-bind="text: res().aboutText1"></span>\r\n    <a data-bind="text: res().aboutGbifText, attr: {href: res().aboutGbifUrl, target: \'_new\'}"></a>\r\n    <span data-bind="text: res().aboutText2"></span>\r\n</p>\r\n\r\n<ul class="list-unstyled leftsidemenu">\r\n    <li class="lead" style="padding-left:0; margin-bottom:0;" >\r\n        <a data-bind="text: res().aboutHeader, attr: {href: res().aboutMoreUrl, target: \'_new\'}"></a>\r\n    </li>\r\n    <li>\r\n        <a class="clearfix" data-bind="text: res().contributorsTitle, attr: {href: res().contributorsUrl, target: \'_new\'}"></a>\r\n    </li>\r\n    <li>\r\n        <a class="clearfix" data-bind="text: res().guidelinesTitle, attr: {href: res().guidelinesUrl, target: \'_new\'}"></a>        \r\n    </li>\r\n    <li>\r\n        <a class="clearfix" data-bind="text: res().pictureLicencingTitle, attr: {href: res().pictureLicencingUrl, target: \'_new\'}"></a>\r\n    </li>\r\n    <li>\r\n        <a class="clearfix" data-bind="text: res().qualityOfDataTitle, attr: {href: res().qualityOfDataUrl, target: \'_new\'}"></a>\r\n    </li>\r\n    <li>\r\n        <a class="clearfix" data-bind="text: res().dataFormatTitle, attr: {href: res().dataFormatUrl, target: \'_new\'}"></a>\r\n    </li>\r\n</ul>\r\n<br>\r\n<span data-bind="text: res().contactText1"></span>\r\n<a data-bind="text: reportAdress(), attr:{href: \'mailto:\' + reportAdress()}"></a>\r\n<span data-bind="text: res().contactText2"></span>\r\n\r\n<div class="news">\r\n    <h3 data-bind="text: res().feedTitle"></h3>\r\n    <ul id="newslist" data-bind="foreach: news">\r\n        <li>\r\n            <span data-bind="text: $parent.formatDate(PublishDate)"></span>\r\n            <a data-bind="text: Title, attr: {href: Link, target: \'_new\' }"></a>\r\n        </li>\r\n    </ul>\r\n</div>\r\n<span id="systemupdateinfo" data-bind="text: res().releaseInfoHead + \': \' + releaseInfo()"></span>\r\n<!--<a href="http://www.artsdatabanken.no/artskart/bidragsytere?Key=1435226523">Bidragsytere</a>-->';});


define('text!views/statistics.html',[],function () { return '<p data-bind="visible: loadingAreas" class="help-block">\r\n    <span data-bind="text: res().makingStatisticsStatus"></span>\r\n    <img src="content/adb/throbber.gif">\r\n</p>\r\n<p data-bind="visible: totalAreas() && !loadingAreas()" class="help-block">\r\n    <span data-bind="text: res().showStatisticsStatus1"></span>\r\n    <span data-bind="text: addSeparator(totalAreas())"></span>\r\n    <span data-bind="text: res().showStatisticsStatus2"></span>\r\n</p>\r\n<p data-bind="visible: !totalAreas() && !loadingAreas(), text: res().noStatisticsToShow" class="help-block"></p>\r\n\r\n<div data-bind="visible: totalAreas" class="panel-group" id="statAccordion" role="tablist" aria-multiselectable="true">\r\n    <div class="panel panel-default">\r\n        <div class="panel-heading" role="tab" id="statHeadingOne">\r\n            <h4 class="panel-title">\r\n                <a class="accordion-toggle collapsed" role="button" data-toggle="collapse" data-parent="#statAccordion"\r\n                   href="#statOne" aria-expanded="true" aria-controls="statOne">\r\n                    <span class="panel-heading-title" data-bind="text:res().statInstitutionHeader"></span>\r\n                    <span class="pull-right icon-statisticsIcon-xs"></span>\r\n                </a>\r\n            </h4>\r\n        </div>\r\n        <div id="statOne" class="panel-collapse collapse whiteback" role="tabpanel" aria-labelledby="statHeadingOne">\r\n            <div class="panel-body">\r\n                <div class="row">\r\n                    <div class="col-xs-12 col-md-8">\r\n                        <span id="sourceChart"></span>\r\n                        <a data-bind="visible: !showingAllInstitutions(), click: loadAllInstitutions, text: res().statShowAll"></a>\r\n                    </div>\r\n                    <div class="col-xs-12 col-md-6">\r\n                        <table class="table-striped stat-table">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th data-bind="click: orderInstitutionsByName" class="pointerCursor"><span data-bind="text: res().statColumnInstitution"></span><span class="glyphicon glyphicon-resize-vertical"></span></th>\r\n                                    <th data-bind="click: orderInstitutionsByObservations" class="pointerCursor "><div class="pull-right"><span data-bind="text: res().statColumnCount" ></span><span class="glyphicon glyphicon-resize-vertical"></span></div></th>\r\n                                    <th data-bind="click: orderInstitutionsByDistinctObservations" class="pull-right pointerCursor"><span data-bind="text: res().statColumnDistinct"></span><span class="glyphicon glyphicon-resize-vertical"></span></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody data-bind="foreach:institutionResult">\r\n                                <tr>\r\n                                    <td data-bind="text: $parent.institutionMapping()[Type].Name"></td>\r\n                                    <td><span class="pull-right" data-bind="text: $parent.addSeparator(Count)"></span></td>\r\n                                    <td class="pull-right" data-bind="text: $parent.addSeparator(DistinctSpecies)"></td>\r\n                                </tr>\r\n                            </tbody>\r\n\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n<div class="panel panel-default">\r\n    <div class="panel-heading" role="tab" id="statSpeciesHeading">\r\n        <h4 class="panel-title">\r\n            <a class="accordion-toggle collapsed" role="button" data-toggle="collapse" data-parent="#statAccordion" href="#statSpecies" aria-expanded="false" aria-controls="statSpecies">\r\n                <span class="panel-heading-title" data-bind="text:res().statSpeciesHeader"></span>\r\n                <span class="pull-right icon-statisticsIcon-xs"></span>\r\n            </a>\r\n        </h4>\r\n    </div>\r\n    <div id="statSpecies" class="panel-collapse collapse whiteback" role="tabpanel" aria-labelledby="statSpeciesHeading">\r\n        <div class="panel-body">\r\n            <div class="row">\r\n                <div class="col-xs-12 col-md-9">\r\n                    <table class="table-striped stat-table">\r\n                        <thead>\r\n                            <tr>\r\n                                <th class="pointerCursor" data-bind="click: orderTaxon.bind($data, \'scientificname\')"><span data-bind="text: res().statColumnScientificName"></span><span class="glyphicon glyphicon-resize-vertical"></span></th>\r\n                                <th class="pointerCursor" data-bind="click: orderTaxon.bind($data, \'author\')"><span data-bind="text: res().statColumnAuthor"></span><span class="glyphicon glyphicon-resize-vertical"></span></th>\r\n                                <th class="hidden-xs pointerCursor" data-bind="click: orderTaxon.bind($data, \'popularname\')"><span data-bind="text: res().statColumnPopularName"></span><span class="glyphicon glyphicon-resize-vertical"></span></th>\r\n                                <th class="pointerCursor" style="width:110px"data-bind="click: orderTaxon.bind($data, \'category\')"><span data-bind="text: res().statColumnCategory"></span><span class="glyphicon glyphicon-resize-vertical"></span></th>\r\n                                <th class="pointerCursor" data-bind="click: orderTaxon.bind($data, \'count\')"><div class="pull-right"><span data-bind="text: res().statColumnCount"></span><span class="glyphicon glyphicon-resize-vertical"></span></div></th>\r\n                                <th class="hidden-xs pointerCursor" data-bind="click: orderTaxon.bind($data, \'cummulativecount\')"><div class="pull-right"><span data-bind="text: res().statColumnCumulativeCount"></span><span class="glyphicon glyphicon-resize-vertical"></span></div></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody data-bind="foreach:taxonResult.slice(0, speciesToShow())">\r\n                            <tr>\r\n                                <td>\r\n                                    <a data-bind="attr: {target: \'_new\', href: $parent.taxonBaseUrl + $data.Type}"><i data-bind="attr: {title: $data.Taxonomy}"><span data-bind="text: $data.Name || \'\'"></span></i></a>                                    \r\n                                </td>\r\n                                <td>\r\n                                    <span data-bind="text: $data.Author || \'\'"></span>\r\n                                </td>\r\n                                <td class="hidden-xs"> \r\n                                    <span data-bind="text: $data.PopularName || \'\'"></span>\r\n                                </td>\r\n                                <td>\r\n                                    <div data-bind="text: \'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\' + $parent.categoryCodeMapping()[CategoryId] + svalbardMerke, attr: {class: \'icon-\' + ($parent.categoryCodeMapping()[CategoryId] + \'\').toLowerCase(), title: $parent.categoryMapping()[CategoryId]}"></div>\r\n                                </td>\r\n                                <td>\r\n                                    <span class="pull-right" data-bind="text: $parent.addSeparator(Count)"></span>\r\n                                </td>\r\n                                <td class="hidden-xs">\r\n                                    <span class="pull-right"data-bind="visible: Number(CumulativeCount)>0, text: parseFloat(Count / CumulativeCount * 100).toLocaleString(undefined, { minimumFractionDigits:2, maximumFractionDigits:2 }), attr: {title: $parent.res().statCumulativeCount + CumulativeCount}"></span>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                        <tfoot>\r\n                            <tr>\r\n                                <td><span data-bind="text: res().statTotalText1 + totalTaxons() + res().statTotalText3"></span></td>\r\n                                <td></td>\r\n                                <td></td>\r\n                                <td class="hidden-xs"></td>\r\n                                <td class="hidden-xs"></td>\r\n                                <td class="pull-right">\r\n                                    <div data-bind="visible: speciesToShow() < totalTaxons()">\r\n                                        <a data-bind="click: loadMoreSpecies, text:res().statShowMore"></a>\r\n                                        <div data-bind="visible: totalTaxons() < 10001">\r\n                                            / <a data-bind="click: loadAllSpecies; visible: speciesToShow() < totalTaxons() "><span data-bind="text: res().statShowAll + \' (\' + totalTaxons()  + \')...\'"></span></a>\r\n                                        </div>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        </tfoot>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n    \r\n   \r\n<div class="panel panel-default">\r\n    <div class="panel-heading" role="tab" id="statHeadingTaxonGroups">\r\n        <h4 class="panel-title">\r\n            <a class="accordion-toggle collapsed" role="button" data-toggle="collapse" data-parent="#statAccordion" href="#statTaxonGroups" aria-expanded="false" aria-controls="statTwo">\r\n                <span class="panel-heading-title" data-bind="text:res().statTaxonGroupHeader"></span>\r\n                <span class="pull-right icon-statisticsIcon-xs"></span>\r\n            </a>\r\n        </h4>\r\n    </div>\r\n    <div id="statTaxonGroups" class="panel-collapse collapse whiteback" role="tabpanel" aria-labelledby="statHeadingTaxonGroups">\r\n        <div class="panel-body">\r\n            <div class="row">\r\n                <div class="col-xs-12 col-md-6">\r\n                    <table class="table-striped stat-table">\r\n                        <thead>\r\n                            <tr>\r\n                                <th data-bind="click: orderTaxonGroupsByName" class="pointerCursor"><span data-bind="text: res().statColumnTaxonGroups"></span><span class="glyphicon glyphicon-resize-vertical"></span></th>\r\n                                <th data-bind="click: orderTaxonGroupsByObservations" class="pointerCursor"><div class="pull-right"><span data-bind="text: res().statColumnCount"></span><span class="glyphicon glyphicon-resize-vertical"></span></div> </th>\r\n                                <th data-bind="click: orderTaxonGroupsByObservations" class="hidden-xs pointerCursor"><div class="pull-right"><span data-bind="text: res().statColumnPercent"></span><span class="glyphicon glyphicon-resize-vertical"></span></div></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody data-bind="foreach:taxonGroupResult">\r\n                            <tr>\r\n                                <td data-bind="text: $parent.taxonGroupMapping()[Type].Name"></td>\r\n                                <td><span class="pull-right" data-bind="text: $parent.addSeparator(Count)"></span></td>\r\n                                <td class="hidden-xs"><span class="pull-right" data-bind="text: parseFloat(Count / $parent.totalAreas() * 100).toLocaleString(undefined, { minimumFractionDigits:2, maximumFractionDigits:2 })"></span></td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class="panel panel-default" data-bind="visible: yearResult">\r\n    <div class="panel-heading" role="tab" id="statYearHeading">\r\n        <h4 class="panel-title">\r\n            <a class="accordion-toggle collapsed" role="button" data-toggle="collapse" data-parent="#statAccordion" href="#statYear" aria-expanded="false" aria-controls="statYear">\r\n                <span class="panel-heading-title" data-bind="text:res().statYearHeader"></span>\r\n                <span class="pull-right icon-statisticsIcon-xs"></span>\r\n            </a>\r\n        </h4>\r\n    </div>\r\n    <div id="statYear" class="panel-collapse collapse whiteback" role="tabpanel" aria-labelledby="statYearHeading">\r\n        <div class="panel-body">\r\n            <div class="row">\r\n                <div class="col-xs-12 col-md-6">\r\n                    <table class="table-striped stat-table">\r\n                        <thead>\r\n                        <tr>\r\n                            <th class="pointerCursor" data-bind="click: orderYears.bind($data, \'year\')"><span data-bind="text: res().statColumnYear"></span><span class="glyphicon glyphicon-resize-vertical"></span></th>\r\n                            <th class="pointerCursor" data-bind="click: orderYears.bind($data, \'count\')"><div class="pull-right"><span data-bind="text: res().statColumnCount"></span><span class="glyphicon glyphicon-resize-vertical"></span></div></th>\r\n                            <th class="hidden-xs pull-right pointerCursor" data-bind="click: orderYears.bind($data, \'cummulativecount\')"><span data-bind="text: res().statColumnCumulativeCount"></span><span class="glyphicon glyphicon-resize-vertical"></span></th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody data-bind="foreach:yearResult.slice(0, yearsToShow())">\r\n                        <tr>\r\n                            <td>\r\n                                <i><span data-bind="text: $data.Type || \'\'"></span></i>\r\n                            </td>\r\n                            <td>\r\n                                <span class="pull-right" data-bind="text: $parent.addSeparator(Count)"></span>\r\n                            </td>\r\n                            <td class="hidden-xs"><span class="pull-right" data-bind="visible: CumulativeCount>0, text: parseFloat(Count / CumulativeCount * 100).toLocaleString(undefined, { minimumFractionDigits:2, maximumFractionDigits:2 }), attr: {title: $parent.res().statCumulativeCount + CumulativeCount}"></span></td>\r\n                        </tr>\r\n                        </tbody>\r\n                        <tfoot>\r\n                        <tr>\r\n                            <td><span data-bind="text: res().statTotalText1 + totalYears() + res().statTotalText2"></span></td>\r\n                            <td class="hidden-xs"></td>\r\n                            <td >\r\n                                <div class="pull-right" data-bind="visible: yearsToShow() < totalYears()">\r\n                                    <a data-bind="click: loadMoreYears, text:res().statShowMore"></a>\r\n                                    <div data-bind="visible: totalYears() < 10001">\r\n                                        / <a data-bind="click: loadAllYears; visible: yearsToShow() < totalYears() "><span data-bind="text: res().statShowAll + \' (\' + totalYears()  + \')...\'"></span></a>\r\n                                    </div>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                        </tfoot>\r\n                    </table>\r\n                    <div data-bind="visible: yearSortParameter() === \'year\'">\r\n                        <input type="checkbox" data-bind="checked: includeEmptyYearsInChart">\r\n                        <span data-bind="text: res().statShowEmptyYears"></span>\r\n                    </div>\r\n                    <span id="yearChart"></span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n    \r\n\r\n<div class="panel panel-default">\r\n        <div class="panel-heading" role="tab" id="statHeadingTwo">\r\n            <h4 class="panel-title">\r\n                <a class="accordion-toggle collapsed" role="button" data-toggle="collapse" data-parent="#statAccordion" href="#statTwo" aria-expanded="false" aria-controls="statTwo">\r\n                    <span class="panel-heading-title" data-bind="text:res().statOtherHeader"></span>\r\n                    <span class="pull-right icon-statisticsIcon-xs"></span>\r\n                </a>\r\n            </h4>\r\n        </div>\r\n        <div id="statTwo" class="panel-collapse collapse whiteback" role="tabpanel" aria-labelledby="statHeadingTwo">\r\n            <div class="panel-body">\r\n                <div class="row">\r\n                    <div class="col-xs-12 col-md-6">\r\n                        <table class="table-striped stat-table">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th class="stat-table-top" data-bind="text: res().statBlackHeader"></th>\r\n                                    <th class="stat-table-top"><span class="pull-right" data-bind="text: res().statColumnCount"></span></th>\r\n                                    <th class="hidden-xs stat-table-top"><span class="pull-right" data-bind="text: res().statColumnPercent"></span></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody data-bind="foreach:categoryAlienResult">\r\n                                <tr>\r\n                                    <td>\r\n                                        <span data-bind="attr: {class: \'icon-\' + ($parent.categoryCodeMapping()[Type] + \'\').toLowerCase()}">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n                                        <span data-bind="text: $parent.categoryMapping()[Type]"></span>\r\n                                    </td>\r\n                                    <td><span class="pull-right" data-bind="text: $parent.addSeparator(Count)"></span></td>\r\n                                    <td class="hidden-xs"><span class="pull-right" data-bind="text: parseFloat(Count / $parent.totalAreas() * 100).toLocaleString(undefined, { minimumFractionDigits:2, maximumFractionDigits:2 })"></span></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div class="col-xs-12 col-md-6">\r\n                        <table class="table-striped stat-table">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th class="stat-table-top" data-bind="text: res().statRedHeader"></th>\r\n                                    <th class="stat-table-top"><span class="pull-right" data-bind="text: res().statColumnCount"></span></th>\r\n                                    <th class="hidden-xs stat-table-top"><span class="pull-right" data-bind="text: res().statColumnPercent"></span></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody data-bind="foreach:categoryRedlistResult">\r\n                                <tr>\r\n                                    <td>\r\n                                        <span data-bind="attr: {class: \'icon-\' + ($parent.categoryCodeMapping()[Type] + \'\').toLowerCase()}">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n                                        <span data-bind="text: $parent.categoryMapping()[Type]"></span>\r\n                                    </td>\r\n                                    <td><span class="pull-right" data-bind="text: $parent.addSeparator(Count)"></span></td>\r\n                                    <td class="hidden-xs"><span class="pull-right" data-bind="text: parseFloat(Count / $parent.totalAreas() * 100).toLocaleString(undefined, { minimumFractionDigits:2, maximumFractionDigits:2 })"></span></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div class="col-xs-12 col-md-6">\r\n                        <table class="table-striped stat-table">\r\n\r\n                            <thead>\r\n                                <tr>\r\n                                    <th class="stat-table-top" data-bind="text: res().statColumnMonth"></th>\r\n                                    <th class="stat-table-top"><span class="pull-right" data-bind="text: res().statColumnCount"></span></th>\r\n                                    <th class="hidden-xs stat-table-top"><span class="pull-right" data-bind="text: res().statColumnPercent"></span></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody data-bind="foreach:monthsResult">\r\n                                <tr>\r\n                                    <td data-bind="text: $parent.monthsMapping()[Type]"></td>\r\n                                    <td><span class="pull-right" data-bind="text: $parent.addSeparator(Count)"></span></td>\r\n                                    <td class="hidden-xs"><span class="pull-right" data-bind="text: parseFloat(Count / $parent.totalAreas() * 100).toLocaleString(undefined, { minimumFractionDigits:2, maximumFractionDigits:2 })"></span></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div class="col-xs-12 col-md-6">\r\n                        <table class="table-striped stat-table">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th class="stat-table-top" data-bind="text: res().statColumnBasisOfRecord"></th>\r\n                                    <th class="stat-table-top"><span class="pull-right" data-bind="text: res().statColumnCount"></span></th>\r\n                                    <th class="hidden-xs stat-table-top"><span class="pull-right" data-bind="text: res().statColumnPercent"></span></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody data-bind="foreach:basisOfRecordResult">\r\n                                <tr>\r\n                                    <td data-bind="text: $parent.basisOfRecordMapping()[Type]"></td>\r\n                                    <td><span class="pull-right" data-bind="text: $parent.addSeparator(Count)"></span></td>\r\n                                    <td class="hidden-xs"><span class="pull-right" data-bind="text: parseFloat(Count / $parent.totalAreas() * 100).toLocaleString(undefined, { minimumFractionDigits:2, maximumFractionDigits:2 })"></span></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div class="col-xs-12 col-md-6">\r\n                        <table class="table-striped stat-table">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th class="stat-table-top" data-bind="text: res().statColumnBehavior"></th>\r\n                                    <th class="stat-table-top"><span class="pull-right" data-bind="text: res().statColumnCount"></span></th>\r\n                                    <th class="hidden-xs stat-table-top"><span class="pull-right" data-bind="text: res().statColumnPercent"></span></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody data-bind="foreach:behaviorResult">\r\n                                <tr>\r\n                                    <td data-bind="text: $parent.behaviorMapping()[Type]"></td>\r\n                                    <td><span class="pull-right" data-bind="text: $parent.addSeparator(Count)"></span></td>\r\n                                    <td class="hidden-xs"><span class="pull-right" data-bind="text: parseFloat(Count / $parent.totalAreas() * 100).toLocaleString(undefined, { minimumFractionDigits:2, maximumFractionDigits:2 })"></span></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div class="col-xs-12 col-md-6">\r\n                        <table class="table-striped stat-table">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th class="stat-table-top" data-bind="text: res().statColumnTags"></th>\r\n                                    <th class="stat-table-top"><span class="pull-right" data-bind="text: res().statColumnCount"></span></th>\r\n                                    <th class="hidden-xs stat-table-top"><span class="pull-right" data-bind="text: res().statColumnPercent"></span></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody data-bind="foreach:tagResult">\r\n                                <tr>\r\n                                    <td data-bind="text: $parent.tagMapping()[Type]"></td>\r\n                                    <td><span class="pull-right" data-bind="text: $parent.addSeparator(Count)"></span></td>\r\n                                    <td class="hidden-xs"><span class="pull-right" data-bind="text: parseFloat(Count / $parent.totalAreas() * 100).toLocaleString(undefined, { minimumFractionDigits:2, maximumFractionDigits:2 })"></span></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>';});


define('text!views/statisticsToolbar.html',[],function () { return '<div class="form-inline">\r\n    <!--<button title="Veksle fullskjermsvisning" type="button" data-bind="click: toggleFullscreen" class="btn btn-default form-control glyph-button glyphicon glyphicon-fullscreen hidden-xs"></button>-->\r\n\r\n    <div class="hidden-xs form-group bookmarks" data-bind="css: { \'open panel panel-default\': openBookmarks()}">\r\n        <div data-bind="css: { \'panel-body\': openBookmarks}, visible: bookmarks().length">\r\n            <button class="btn btn-link btn-xs pull-right glyphicon glyphicon-remove"\r\n                    data-bind="click: toggleBookmarksContainer,\r\n                    css: { \'glyphicon-folder-open\' : !openBookmarks() },\r\n                    visible: (bookmarks().length>\r\n                5 || openBookmarks())">\r\n            </button>\r\n            <div class="b-container pull-left" data-bind="foreach: tiledBookmarks()">\r\n                <div class="b-row" data-bind="foreach: $data">\r\n                    <div class="form-control bookmark"\r\n                         title="Sett utvalg basert på dette bokmerket"\r\n                         data-bind="click: $parents[1].applyFilter, style: {\'width\': \'48px\', \'height\': \'34px\', \'background-image\': \'url(\' + image + \')\'}">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n    <div data-bind="compose:\'viewmodels/languageBar\'"></div>\r\n    <!--<a type="button" data-bind="attr: {href: res().aboutUrl, target: \'_new\', title: res().about}" class="btn info-button"></a>-->\r\n\r\n    <!-- <button type="button" data-bind="click: resource.chooseNynorsk, attr: {title: res().norwegian_no}" class="btn lang-nn"></button>\r\n     <button type="button" data-bind="click: resource.chooseNorwegian, attr: {title: res().norwegian}" class="btn lang-no"></button>\r\n     <button type="button" data-bind="click: resource.chooseEnglish, attr: {title: res().english}" class="btn lang-en"></button> -->\r\n\r\n</div>\r\n';});


define('text!views/treeview.html',[],function () { return '<div class="panel-group" id="accordion">\r\n    <div data-bind="visible: hasTaxonFilter">\r\n        <ol data-bind="foreach: taxons" class="selectedOptions">\r\n            <li class="bio">\r\n                <span data-bind="click: $parent.removeTaxon, text: $data.title, attr: {title: $data.title}"></span>\r\n            </li>\r\n        </ol>\r\n    </div>\r\n    <div data-bind="visible: hasGeometryFilter">\r\n        <ol data-bind="foreach: areas" class="selectedOptions">\r\n            <li class="areas">\r\n                <span data-bind="click: $parent.removeArea, text: $data.displayName"></span>\r\n            </li>\r\n        </ol>\r\n        <ol data-bind="visible: hasLocationFilter" class="selectedOptions">\r\n            <li>                 \r\n                <span data-bind="click: removeLocation, text: locationName"></span>\r\n            </li>\r\n        </ol>\r\n    </div>\r\n    \r\n    <div class="panel panel-default" id="panel-reduce">\r\n        <div class="panel-heading" role="tab" id="headingOne" data-toggle="collapse" href="#collapseOne">\r\n            <p class="panel-title">\r\n                <a class="accordion-toggle collapsed" role="button" data-toggle="collapse" data-parent="#accordion"\r\n                   href="#collapseOne" aria-expanded="false" aria-controls="collapseOne"\r\n                   data-bind="attr: {title: res().searchBoundsTooltip}">\r\n                    <span class="panel-heading-title" data-bind="text: res().searchTitle"></span>\r\n                </a>\r\n                <span data-bind="visible: hasGeometryFilter() || hasTaxonFilter(), click: clearTaxonAndPolygon, attr: {title: res().removeBoundsTooltip}"\r\n                      class="accordionIcon pull-right glyphicon glyphicon-remove"\r\n                      style="padding-left: 5px"></span>\r\n                <span data-bind="visible: hasGeometryFilter() && isMapView(), click: zoomToPolygon, attr: {title: res().zoomToPolygonTooltip}"\r\n                      class="accordionIcon pull-right glyphicon glyphicon-screenshot"></span>\r\n                <span class="pull-right badge" style="background-color: #1697AA; margin: 1px;"\r\n                      data-bind="text: reducedObservationsDisplay, attr: {title: res().reducedObservationCountTooltip}"></span>\r\n            </p>\r\n        </div>\r\n        \r\n        <div id="collapseOne" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingOne" data-parent="#accordion">\r\n            <div class="panel-body">\r\n                <div class="input-group col-xs-12">\r\n                    <span data-bind="click: toggleGeoInfo, attr: {title: res().showHelpText}"\r\n                          class="accordionIcon pull-right icon-info-xs pointerCursor"></span>\r\n                    <p data-bind="visible: geoInfoVisible, text: res().boundsHelpText" class="help-block"></p>\r\n                    <h5 style="margin-top: 20px">\r\n                        <span data-bind="visible: artNameSpinner"\r\n                              class="pull-right glyphicon glyphicon-globe glyphicon-spin"></span>\r\n                    </h5>\r\n\r\n                    <ul class="nav nav-tabs" role="tablist">\r\n                        <li role="presentation" class="active">\r\n                            <a href="#simpleSearch" aria-controls="simpleSearch" role="tab" data-toggle="tab">\r\n                                <span data-bind="text: res().simpleSearchTitle"></span>\r\n                            </a>\r\n                        </li>\r\n                        <li role="presentation">\r\n                            <a href="#taxonTree" aria-controls="taxonTree" role="tab" data-toggle="tab">\r\n                                <span data-bind="text: res().speciesTreeTitle"></span>\r\n                            </a>\r\n                        </li>\r\n                        <!-- ko if: GUILang() != \'EN\'-->\r\n                        <li role="presentation" class="language">\r\n                            <a href="#" class="btn dropdown-toggle" data-toggle="dropdown" data-bind="event: {click: toggleLanguageVisible}" role="button" aria-expanded="true" title="Bytt mellom bokmål, nynorsk og samisk">\r\n                                <span class="btn-icon-label">Språk</span>\r\n                                <span class="caret"></span>\r\n                            </a>\r\n                            <ul class="dropdown-menu-tree dropdown-menu-right active" data-bind="event: {mouseover: openDropdown, mouseout: closeDropdown}">\r\n                                <li id="bokmal-tre" data-bind="click: chooseBokmal, css: {active: (treeLang() == \'nb-NO\') }">\r\n                                    <a class="btn icon-btn" data-bind="event: {click: closeDropdown}">\r\n                                        <span>Bokmål</span>\r\n                                    </a>\r\n                                </li>\r\n                                <li id="nynorsk-tre" data-bind="click: chooseNynorsk, css: {active: (treeLang() == \'nn-NO\') }">\r\n                                    <a class="btn icon-btn" data-bind="event: {click: closeDropdown}">\r\n                                        <span>Nynorsk</span>\r\n                                    </a>\r\n                                </li>\r\n                                <li id="samisk" data-bind="click: chooseSamisk, css: {active: (treeLang() == \'se-NO\') }">\r\n                                    <a class="btn icon-btn" data-bind="event: {click: closeDropdown}">\r\n                                        <span>Samisk</span>\r\n                                    </a>\r\n                                </li>\r\n                            </ul>\r\n                        </li>\r\n                        <!-- /ko -->\r\n                    </ul>\r\n\r\n                    <div class="tab-content">\r\n                        <div role="tabpanel" class="tab-pane active" id="simpleSearch">\r\n                            <label class="sr-only" data-bind="text: res().simpleSearchPlaceholder"></label>\r\n                            <input id="art-search" type="text" class="form-control"\r\n                                   data-bind="attr: { placeholder: res().simpleSearchPlaceholder }, jqAuto: { autoFocus: true },jqAutoSource: artNames,jqAutoQuery: getArtNames,jqAutoValue: selectedArtName,jqAutoSourceLabel: \'displayName\',jqAutoSourceInputValue: \'displayName\'" />\r\n\r\n                            <div data-bind="visible: taxons().length > 0">\r\n                                <span data-bind="text: res().includeSubTaxons"></span>\r\n                                <input class="pull-right" id="chkIncludeSubTaxon" type="checkbox" data-bind="checked: includeSubTaxon, attr: {title: res().includeSubTaxonsTooltip}" />\r\n                            </div>\r\n                        </div>\r\n                        <div style="font-size: 12px;" role="tabpanel" class="tab-pane" id="taxonTree">\r\n                            <br />\r\n                            <span data-bind="text: res().scientificNameTitle"></span>\r\n                            <label class="switch" data-bind="event: {click: toggleSciName}, attr: {title: res().toggleScientificNames}">\r\n                                <input id="chkVitNavn" type="checkbox" data-bind="checked: !showPopNamesFirst()">\r\n                                <span class="slider round"></span>\r\n                            </label>                            \r\n                            <br />\r\n                            <div style="position: relative; left: -15px;">\r\n                                <div id="jstreeTaxon"></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <h5>\r\n                        <span data-bind="visible: datasetsSpinner"\r\n                              class="pull-right glyphicon glyphicon-globe glyphicon-spin"></span>\r\n                        <span data-bind="visible: admSpinner"\r\n                              class="pull-right glyphicon glyphicon-globe glyphicon-spin"></span>\r\n                        <span data-bind="visible: conservationSpinner"\r\n                              class="pull-right glyphicon glyphicon-globe glyphicon-spin"></span>\r\n                        <span data-bind="visible: matrikkelSpinner"\r\n                              class="pull-right glyphicon glyphicon-globe glyphicon-spin"></span>\r\n                    </h5>\r\n                    <div data-bind="visible: taxons().length == 0">\r\n                        <br><br>\r\n                    </div>\r\n                    <div class="tab-content">\r\n                        <div role="tabpanel" class="tab-pane active" id="simpleGeoSearch">\r\n                            <label class="sr-only" data-bind="text: res().searchAreaPlaceholder"></label>\r\n                            <input id="adm-search" type="text" class="form-control"\r\n                                   data-bind="attr: { placeholder: res().searchAreaPlaceholder }, jqAuto: { autoFocus: true }, jqAutoSource: admAreaMatches, jqAutoQuery: getAdmAreas, jqAutoValue: selectedAdmArea, jqAutoSourceLabel: \'displayName\', jqAutoSourceInputValue: \'displayName\'" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n        <div class="panel panel-default" id="panel-tree">\r\n            <div class="panel-heading" role="tab" id="headingTwo" data-toggle="collapse" href="#collapseTwo">\r\n                <p class="panel-title">\r\n                    <a class="accordion-toggle collapsed" role="button" data-toggle="collapse" data-parent="#accordion"\r\n                       href="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo"\r\n                       data-bind="attr: {title: res().filterTooltip}">\r\n                        <span class="panel-heading-title" data-bind="text: res().filterTitle"></span>\r\n                    </a>\r\n                    <span data-bind="visible: hasNodesSelected, click: clearCheckedNodes, attr: {title: res().removeFilterTooltip}"\r\n                          class="accordionIcon pull-right glyphicon glyphicon-remove"></span>\r\n                    <span class="pull-right badge" style="background-color: #1697AA; margin: 1px;"\r\n                          data-bind="text: totalListItemsDisplay, attr: {title: res().filterCountTooltip}"></span>\r\n                </p>\r\n            </div>\r\n            <div style="font-size: 12px;" id="collapseTwo" class="panel-collapse collapse " role="tabpanel"\r\n                 aria-labelledby="headingTwo" data-parent="#accordion">\r\n                <div class="panel-body" style="overflow-y: auto; overflow-x: hidden;">\r\n                    <div class="input-group col-xs-12">\r\n                        <span data-bind="click: toggleFilterInfo, attr: {title: res().showHelpText}"\r\n                              class="accordionIcon pull-right icon-info-xs pointerCursor"\r\n                              style="z-index: 10"></span>\r\n                        <p data-bind="visible: filterInfoVisible, text: res().filterHelpText" class="help-block"></p>\r\n\r\n                        <div style="position: absolute; left: -20px;">\r\n                            <div id="filterTree"></div>\r\n                            <div style="position: absolute; left: 20px; width: 96%;">\r\n                                <br>\r\n                                <label class="sr-only" data-bind="text: res().foundYearLabel"></label>\r\n                                <div id="slider-year" data-bind="attr: {title: res().foundYearTooltip}" style="margin-bottom: 5px"></div>\r\n                                <span data-bind="text: res().foundYearFrom"></span>\r\n                                <input type="text" id="yearFrom" class="filterYearTextBox">\r\n                                <span data-bind="text: res().foundYearTo"></span>\r\n                                <input type="text" id="yearTo" class="filterYearTextBox">\r\n\r\n                                <br>\r\n                                <label class="sr-only" data-bind="text: res().precisionLabel"></label>\r\n                                <div id="slider-precision" data-bind="attr: {title: res().precisionTooltip }" style="margin-top: 15px; margin-bottom: 5px"></div>\r\n                                <span data-bind="text: res().precisionFrom"></span>\r\n                                <input type="text" id="precisionFrom" class="filterPrecisionTextBox">\r\n                                <span data-bind="text: res().precisionTo"></span>\r\n                                <input type="text" id="precisionTo" class="filterPrecisionTextBox">\r\n                                <span data-bind="text: res().precisionUnit"></span>\r\n                                <br>\r\n                                <br>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class="panel panel-default" id="panel-advanced">\r\n            <div class="panel-heading" role="tab" id="headingAdvanced" data-toggle="collapse" href="#collapseAdvanced">\r\n                <p class="panel-title">\r\n                    <a class="accordion-toggle collapsed" role="button" data-toggle="collapse" data-parent="#accordion"\r\n                       href="#collapseAdvanced" aria-expanded="false" aria-controls="collapseAdvanced"\r\n                       data-bind="attr: {title: res().advancedTooltip}">\r\n                        <span class="panel-heading-title" data-bind="text: res().advancedTitle"></span>\r\n                    </a>\r\n                    <span data-bind="visible: hasAdvancedFilterSelected, click: clearAdvancedFilter, attr: {title: res().removeAdvancedTooltip}"\r\n                          class="accordionIcon pull-right glyphicon glyphicon-remove"></span>\r\n                    <span class="pull-right badge" style="background-color: #1697AA; margin: 1px;"\r\n                          data-bind="text: totalListItemsDisplay, attr: {title: res().advancedCountTooltip}"></span>\r\n                </p>\r\n            </div>\r\n            <div style="font-size: 12px;" id="collapseAdvanced" class="panel-collapse collapse" role="tabpanel"\r\n                 aria-labelledby="headingAdvanced" data-parent="#accordion">\r\n                <div class="panel-body" style="overflow-y: auto; overflow-x: hidden; height: 320px">\r\n                    <div class="input-group col-xs-12">\r\n                        <span data-bind="click: toggleFilterAdvanced, attr: {title: res().showHelpText}"\r\n                              class="accordionIcon pull-right icon-info-xs pointerCursor"></span>\r\n                        <p data-bind="visible: advancedInfoVisible, text: res().advancedHelpText" class="help-block"></p>\r\n                        <ol data-bind="foreach: collections" class="selectedOptions">\r\n                            <li class="collection">\r\n                                <span data-bind="click: $parent.removeCollection, text: $data.title"></span>\r\n                            </li>\r\n                        </ol>\r\n                        <ol data-bind="foreach: catalogNumbers" class="selectedOptions">\r\n                            <li class="collection">\r\n                                <span data-bind="click: $parent.removeCatalogNumber, text: $data"></span>\r\n                            </li>\r\n                        </ol>\r\n                        <div class="tab-content">\r\n                            <div role="tabpanel" class="tab-pane active" id="simpleDatasetSearch">\r\n                                <label class="sr-only" data-bind="attr: {title: res().searchProjectPlaceholder}"></label>\r\n                                <input id="dataset-search" type="text" class="form-control"\r\n                                       data-bind="attr: { placeholder: res().searchProjectPlaceholder }, jqAuto: { autoFocus: true }, jqAutoSource: datasetMatches, jqAutoQuery: getDatasets, jqAutoValue: selectedDataset, jqAutoSourceLabel: \'displayName\', jqAutoSourceInputValue: \'displayName\'" />\r\n                            </div>\r\n                        </div>\r\n                        <div class="tab-content" style="padding: 40px 0;">\r\n                            <div role="tabpanel" class="tab-pane active" id="simpleCollectionSearch">\r\n                                <label class="sr-only" data-bind="attr: {title: res().searchCollectionPlaceholder}"></label>\r\n                                <input id="collection-search" type="text" class="form-control"\r\n                                       data-bind="attr: { placeholder: res().searchCollectionPlaceholder }, jqAuto: { autoFocus: true }, jqAutoSource: collectionMatches, jqAutoQuery: getCollections, jqAutoValue: selectedCollection, jqAutoSourceLabel: \'displayName\', jqAutoSourceInputValue: \'displayName\'" />\r\n                            </div>\r\n                        </div>\r\n                        <div class="tab-content">\r\n                            <div role="tabpanel" class="tab-pane active" id="simpleCatalogNumberSearch">\r\n                                <label class="sr-only" data-bind="attr: {title: res().searchCatalogNumberPlaceholder}"></label>\r\n                                <input id="catalogNumber-search" type="text" class="form-control"\r\n                                       data-bind="attr: { placeholder: res().searchCatalogNumberPlaceholder }, value: selectedCatalogNumber" />\r\n                            </div>\r\n                        </div>\r\n                        <br>\r\n                        <br>\r\n                        <div style="position: absolute; left: -20px;">\r\n                            <div id="advancedTree"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n';});


require(["main"]);
}());
//# sourceMappingURL=artskart.js.map